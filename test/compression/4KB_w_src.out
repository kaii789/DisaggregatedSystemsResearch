Reading data from 'callgrind.out.11988'...
--------------------------------------------------------------------------------
Profile data file 'callgrind.out.11988' (creator: callgrind-3.15.0)
--------------------------------------------------------------------------------
I1 cache: 32768 B, 64 B, 8-way associative
D1 cache: 32768 B, 64 B, 8-way associative
LL cache: 36700160 B, 64 B, 35-way associative
Timerange: Basic block 0 - 6134744985
Trigger: Program termination
Profiled target:  /home/k.huang/DisaggregatedSystemsUofT/lib/sniper -c /home/k.huang/DisaggregatedSystemsUofT/config/base.cfg --general/total_cores=1 --general/output_dir=/home/k.huang/DisaggregatedSystemsUofT/test/compression --config=/home/k.huang/DisaggregatedSystemsUofT/config/nehalem.cfg --config=/home/k.huang/DisaggregatedSystemsUofT/disaggr_config/ddr4-2400-disagg.cfg --config=/home/k.huang/DisaggregatedSystemsUofT/disaggr_config/l3cache.cfg --config=/home/k.huang/DisaggregatedSystemsUofT/disaggr_config/local_memory_cache.cfg --config=/home/k.huang/DisaggregatedSystemsUofT/disaggr_config/l3cache.cfg --config=/home/k.huang/DisaggregatedSystemsUofT/test/compression/config.cfg -g --traceinput/stop_with_first_app=true -g --traceinput/restart_apps=false -g --traceinput/stop_with_first_app=false -g --traceinput/enabled=true -g --traceinput/emulate_syscalls=true -g --traceinput/num_apps=1 -g --traceinput/trace_prefix=/tmp/tmpVoWucj/run_benchmarks (PID 11988, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     ../../common/performance_model/
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir             Dr            Dw            I1mr       D1mr        D1mw      ILmr       DLmr        DLmw      
--------------------------------------------------------------------------------
27,488,400,794 6,552,836,815 2,747,185,028 19,296,358 318,167,119 6,329,417 19,120,975 101,166,138 3,845,613  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir            Dr            Dw          I1mr      D1mr        D1mw      ILmr      DLmr       DLmw       file:function
--------------------------------------------------------------------------------
4,510,292,358 1,256,389,764 590,137,408   574,873   1,067,346   112,275   572,786    783,648    76,155  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
3,913,141,469    60,000,754           0    17,019           1         0    16,990          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::checkDeltaLimits(long, unsigned int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
2,608,996,115   457,011,992 394,651,226   340,295      26,173   133,164   339,491     23,963   119,741  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::compressCacheLine(void*, void*) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
2,551,418,166   715,880,218 342,779,622   444,587   1,280,169     6,880   442,537    409,803       247  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
1,587,971,424   183,664,556 269,592,769    51,054           2         2    50,970          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::specializedCompress(void*, CompressionModelFPCBDI::m_compress_info*, void*, int, int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
1,475,807,683    41,542,723  20,789,244   269,518      74,331   117,916   269,514     67,475   117,815  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeUsingHistoryList(SubsecondTime, SubsecondTime) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
1,370,585,850   342,642,564           0   134,956   2,253,263         0   134,950  1,484,920         .  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
1,317,338,658   361,179,114 168,384,285   229,775   1,786,038    29,656   229,445    724,100    25,144  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:_int_malloc [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
1,185,154,985   924,612,626  16,116,896   204,159 173,379,168    50,405   204,156 28,475,435    50,340  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:QueueModelHistoryList::computeUsingHistoryList(SubsecondTime, SubsecondTime)
  735,248,918   465,686,375 244,324,161   336,176  42,674,689    36,473   336,171  6,985,866    17,135  /usr/include/c++/9/bits/stl_list.h:QueueModelHistoryList::computeUsingHistoryList(SubsecondTime, SubsecondTime)
  631,070,981   149,254,628           0    17,023           1         0    16,990          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::readWord(void*, unsigned int, unsigned int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  628,429,285   114,259,870 114,259,870    67,477           3     5,717    67,475          .         .  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
  594,516,634   127,746,920  60,574,054    95,798           0         2    94,511          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::repeatedValues(void*, CompressionModelFPCBDI::m_compress_info*, void*, unsigned int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  223,284,391    35,281,191   4,875,520    34,034           0         3    33,980          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::zeroValues(void*, CompressionModelFPCBDI::m_compress_info*, void*) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  218,617,955    87,254,007     623,595   134,660   7,700,830     3,823   134,660  7,408,357         .  /usr/include/c++/9/bits/list.tcc:std::__cxx11::list<unsigned long, std::allocator<unsigned long> >::remove(unsigned long const&) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  166,080,240    46,133,400  36,906,720   134,952           0         0   134,950          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator+(unsigned int) const [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  162,828,429    19,249,434  19,249,434    34,034           0         7    33,980          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::writeWord(void*, unsigned int, long, unsigned int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  148,055,683    58,433,706  19,743,518 1,326,973   4,254,958   401,824 1,326,958  1,023,019   113,303  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::getDramAccessCost(SubsecondTime, unsigned long, int, unsigned long, ShmemPerf*, bool) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  120,930,085    34,581,130  20,755,070   508,150   1,301,715         0   508,142    119,120         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::computeQueueDelay(SubsecondTime, SubsecondTime, int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  120,888,896    37,043,874  18,521,937   127,134           0         0   127,133          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  114,259,870    57,129,935           0    67,477     162,364         0    67,475     67,475         .  ???:0x00000000054bcf10 [???]
  114,219,386    57,109,693           0    67,477     134,278         0    67,475     67,475         .  ???:0x00000000054bd980 [???]
  114,219,386             0           0    67,477           0         0    67,475          .         .  ???:operator delete(void*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
  103,881,150    25,400,370  27,698,040   269,281           0    26,762   269,277          0    17,135  /home/k.huang/DisaggregatedSystemsUofT/common/misc/moving_average.h:MovingAverage<SubsecondTime>::addToWindow(SubsecondTime) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
  102,385,924    51,192,962           0    16,967      18,782         0    16,967     16,967         .  ???:0x00000000054bc9f0 [???]
  102,385,924             0           0    16,967           0         0    16,967          .         .  ???:operator new[](unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
  102,385,920    51,192,960           0    16,968      18,990         0    16,967     16,967         .  ???:0x000000000040a010 [???]
  102,385,920    51,192,960           0    16,965      18,994         0    16,965     16,965         .  ???:0x00000000054bd120 [???]
  102,385,920    51,192,960           0    16,965          19         0    16,965          .         .  ???:0x000000000040aa20 [???]
  102,385,920             0           0    17,044           0         0    16,965          .         .  ???:operator delete[](void*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
  101,493,480    41,520,060  18,453,360    67,476           0         0    67,475          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator+(ModuloNum const&) const [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   93,541,635    30,025,710  17,322,525   472,330     141,567    67,475   472,325     67,475    67,466  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::parseDeviceAddress(unsigned long, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   90,077,130    13,858,020  16,167,690   134,951           0    34,270   134,950          0    34,270  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::parseAddressBits(unsigned long, unsigned int&, unsigned int, unsigned int, unsigned long) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   89,789,295    28,486,087  10,070,516   501,484   1,775,781   157,486   455,144  1,750,044   155,440  ???:std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   87,284,917    22,969,715  22,969,715   134,952           0         0   134,950          .         .  /usr/include/c++/9/bits/list.tcc:std::_List_iterator<std::pair<SubsecondTime, SubsecondTime> > std::__cxx11::list<std::pair<SubsecondTime, SubsecondTime>, std::allocator<std::pair<SubsecondTime, SubsecondTime> > >::emplace<std::pair<SubsecondTime, SubsecondTime> >(std::_List_const_iterator<std::pair<SubsecondTime, SubsecondTime> >, std::pair<SubsecondTime, SubsecondTime>&&) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   86,599,731    43,190,487     145,838    57,385  30,002,396    13,151    57,385 29,374,096     8,215  /usr/include/c++/9/bits/stl_list.h:std::__cxx11::list<unsigned long, std::allocator<unsigned long> >::remove(unsigned long const&)
   85,457,790    25,406,370  20,787,030   202,428   2,246,025   161,880   202,425    428,874    27,392  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeQueueDelay(SubsecondTime, SubsecondTime, int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   83,333,424    22,563,208  19,150,243   453,456   1,153,087   602,658   447,439    401,679   162,372  ???:std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   80,832,450    27,710,040  18,477,360   202,428           0    28,460   202,425          0    17,135  /home/k.huang/DisaggregatedSystemsUofT/common/misc/moving_average.h:MovingArithmeticMean<SubsecondTime>::update(SubsecondTime) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   78,160,725    12,065,022   2,309,670    70,989     471,959         2    70,989    112,864         .  /usr/include/c++/9/bits/stl_tree.h:QueueModelWindowedMG1::addItem(SubsecondTime, SubsecondTime)
   67,862,320     3,855,050           0   134,959           0         0   134,950          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   67,292,853    17,559,490   5,256,488   136,088      18,224   152,033   135,920     16,990   135,920  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::compress(unsigned long, unsigned long, int, unsigned int*, unsigned int*) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   62,361,090    20,787,030  11,548,350   134,951   1,385,368    50,484   134,950    212,990    50,340  /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator-(ModuloNum const&) const [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   53,511,107    11,604,340           0   236,880     280,137         0   236,693     85,050         .  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   46,145,400    11,536,350  23,072,700    67,476           0         0    67,475          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::ModuloNum(unsigned int, unsigned int) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   39,264,390    13,858,020  13,858,020    67,476     708,992    27,079    67,475    168,798         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:QueueModelHistoryList::computeQueueDelay(SubsecondTime, SubsecondTime, int)
   37,489,768    14,058,663  18,744,884    67,502      22,658    21,524    67,475     16,990    13,610  ???:std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   37,133,888    11,604,340   9,283,472   202,532           0         0   202,425          .         .  /usr/include/c++/9/ext/vstring.tcc:__gnu_cxx::__versa_string<char, std::char_traits<char>, std::allocator<char>, __gnu_cxx::__sso_string_base>::compare(char const*) const [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   37,133,888     4,641,736           0   203,688     112,992         0   202,425     67,475         .  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2 [/usr/lib/x86_64-linux-gnu/libc-2.31.so]
   36,874,820    12,687,205  11,532,370   142,867          32        34   142,866          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:QueueModelWindowedMG1::computeQueueDelay(SubsecondTime, SubsecondTime, int)
   36,339,018    12,415,183  15,430,089   353,956     258,176   248,231   353,951     67,475         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:DramPerfModelDisagg::getDramAccessCost(SubsecondTime, unsigned long, int, unsigned long, ShmemPerf*, bool)
   32,335,380    16,167,690   4,619,340   134,951   1,548,756         0   134,950    313,294         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::updateAverageDelay(SubsecondTime) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   31,872,104     7,959,004           0    17,134   6,854,520         0    17,134  6,823,925         .  /usr/include/c++/9/bits/stl_algo.h:DramPerfModelDisagg::isRemoteAccess(unsigned long, int, DramCntlrInterface::access_t)
   30,960,522     7,727,388           0    16,990   6,633,052         0    16,990          .         .  /usr/include/c++/9/bits/stl_algo.h:DramPerfModelDisagg::getAccessLatencyRemote(SubsecondTime, unsigned long, int, unsigned long, DramCntlrInterface::access_t, ShmemPerf*)
   30,682,478     7,663,148           0     7,049   5,092,957         0     7,049    659,683         .  /usr/include/c++/9/bits/stl_algo.h:DramPerfModelDisagg::possiblyEvict(unsigned long, SubsecondTime, int)
   28,858,717    10,385,995   6,928,485   134,952     801,622     3,596   134,950    380,296     3,596  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::removeItems(SubsecondTime) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   28,067,472    14,033,736   9,355,824    67,530       6,004   307,986    67,475          0   181,195  ???:std::__detail::_List_node_base::_M_unhook() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28]
   26,681,138    12,347,958   7,166,590         0     157,549   229,915         0     67,475   127,429  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t)
   25,529,548     2,320,868   4,641,736         .           .         .         .          .         .  /usr/include/c++/9/bits/char_traits.h:__gnu_cxx::__versa_string<char, std::char_traits<char>, std::allocator<char>, __gnu_cxx::__sso_string_base>::compare(char const*) const
   23,072,700    11,536,350           .         .           .         .         .          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::~ModuloNum() [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   21,307,088     2,663,386           0    67,528           0         0    67,475          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/system/barrier_sync_server.h:BarrierSyncServer::getGlobalTime(bool) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   20,787,030     5,774,175   8,083,845    67,476           1         0    67,475          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::addItem(SubsecondTime, SubsecondTime) [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   20,769,030    11,536,350           0    67,476           0         0    67,475          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator==(ModuloNum const&) const [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   18,375,772     9,187,886   9,187,886         0           3    87,856         0          0    21,465  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:std::_List_iterator<std::pair<SubsecondTime, SubsecondTime> > std::__cxx11::list<std::pair<SubsecondTime, SubsecondTime>, std::allocator<std::pair<SubsecondTime, SubsecondTime> > >::emplace<std::pair<SubsecondTime, SubsecondTime> >(std::_List_const_iterator<std::pair<SubsecondTime, SubsecondTime> >, std::pair<SubsecondTime, SubsecondTime>&&)
   17,783,587     5,878,958     100,398    67,528   2,437,872         0    67,475  1,578,677         .  /usr/include/c++/9/bits/stl_tree.h:QueueModelWindowedMG1Remote::removeItemsUpdateBytes(SubsecondTime, SubsecondTime, bool)
   17,322,525     5,774,175   3,464,505   134,952           0    50,340   134,950          0    50,340  /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/address_home_lookup.cc:AddressHomeLookup::getLinearAddress(unsigned long) const [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   16,149,690     6,917,010   4,619,340         0   1,856,655         0         0    571,959         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:MovingArithmeticMean<SubsecondTime>::update(SubsecondTime)
   15,866,303     5,512,831     492,061   440,401   1,960,618         1   440,401  1,879,797         .  /usr/include/c++/9/bits/stl_tree.h:DramPerfModelDisagg::getAccessLatency(SubsecondTime, unsigned long, int, unsigned long, DramCntlrInterface::access_t, ShmemPerf*)
   13,973,148     4,657,716           0    68,477      84,582         0    67,475     67,475         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/log.cc:Log::getSingleton() [/home/k.huang/DisaggregatedSystemsUofT/lib/sniper]
   13,781,829             0   4,593,943         .           .         .         .          .         .  /usr/include/c++/9/ext/new_allocator.h:std::_List_iterator<std::pair<SubsecondTime, SubsecondTime> > std::__cxx11::list<std::pair<SubsecondTime, SubsecondTime>, std::allocator<std::pair<SubsecondTime, SubsecondTime> > >::emplace<std::pair<SubsecondTime, SubsecondTime> >(std::_List_const_iterator<std::pair<SubsecondTime, SubsecondTime> >, std::pair<SubsecondTime, SubsecondTime>&&)
   11,873,946     5,936,973           0    67,478     136,123         0    67,475     67,475         .  ???:0x000000000040a790 [???]
   11,833,466     5,916,733           0    67,477     152,948         0    67,475     67,475         .  ???:0x000000000040a720 [???]
   11,548,350     3,464,505   2,309,670    63,963           1   370,259    63,961          0   157,205  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:QueueModelWindowedMG1::addItem(SubsecondTime, SubsecondTime)
   11,546,660     2,309,332           .         .           .         .         .          .         .  /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h:QueueModelWindowedMG1::removeItems(SubsecondTime)
   11,454,339     2,309,670   4,588,003         .           .         .         .          .         .  /usr/include/c++/9/ext/new_allocator.h:QueueModelHistoryList::computeUsingHistoryList(SubsecondTime, SubsecondTime)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/vstring.tcc
--------------------------------------------------------------------------------
Ir         Dr         Dw        I1mr    D1mr D1mw ILmr    DLmr DLmw 

-- line 487 ----------------------------------------
         .          .         .       .    .    .       .    .    .        if (!__r)
         .          .         .       .    .    .       .    .    .  	__r = this->_S_compare(__n1, __n2);
         .          .         .       .    .    .       .    .    .        return __r;
         .          .         .       .    .    .       .    .    .      }
         .          .         .       .    .    .       .    .    .  
         .          .         .       .    .    .       .    .    .    template<typename _CharT, typename _Traits, typename _Alloc,
         .          .         .       .    .    .       .    .    .  	   template <typename, typename, typename> class _Base>
         .          .         .       .    .    .       .    .    .      int
18,566,944          0 9,283,472 135,056    0    0 134,950    .    .      __versa_string<_CharT, _Traits, _Alloc, _Base>::
         .          .         .       .    .    .       .    .    .      compare(const _CharT* __s) const
         .          .         .       .    .    .       .    .    .      {
         .          .         .       .    .    .       .    .    .        __glibcxx_requires_string(__s);
         .          .         .       .    .    .       .    .    .        const size_type __size = this->size();
         .          .         .       .    .    .       .    .    .        const size_type __osize = traits_type::length(__s);
         .          .         .       .    .    .       .    .    .        const size_type __len = std::min(__size, __osize);
         .          .         .       .    .    .       .    .    .        int __r = traits_type::compare(this->_M_data(), __s, __len);
 4,641,736          .         .       .    .    .       .    .    .        if (!__r)
         .          .         .       .    .    .       .    .    .  	__r = this->_S_compare(__size, __osize);
         .          .         .       .    .    .       .    .    .        return __r;
13,925,208 11,604,340         0  67,476    0    0  67,475    .    .      }
         .          .         .       .    .    .       .    .    .  
         .          .         .       .    .    .       .    .    .    template<typename _CharT, typename _Traits, typename _Alloc,
         .          .         .       .    .    .       .    .    .  	   template <typename, typename, typename> class _Base>
         .          .         .       .    .    .       .    .    .      int
         .          .         .       .    .    .       .    .    .      __versa_string <_CharT, _Traits, _Alloc, _Base>::
         .          .         .       .    .    .       .    .    .      compare(size_type __pos, size_type __n1, const _CharT* __s) const
         .          .         .       .    .    .       .    .    .      {
         .          .         .       .    .    .       .    .    .        __glibcxx_requires_string(__s);
-- line 514 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir         Dr         Dw I1mr   D1mr       D1mw ILmr   DLmr      DLmw 

-- line 96 ----------------------------------------
         .          .  .      .          .    .      .         .    .      }
         .          .  .      .          .    .      .         .    .  
         .          .  .      .          .    .      .         .    .    /// This is an overload used by find algos for the Input Iterator case.
         .          .  .      .          .    .      .         .    .    template<typename _InputIterator, typename _Predicate>
         .          .  .      .          .    .      .         .    .      inline _InputIterator
         .          .  .      .          .    .      .         .    .      __find_if(_InputIterator __first, _InputIterator __last,
         .          .  .      .          .    .      .         .    .  	      _Predicate __pred, input_iterator_tag)
         .          .  .      .          .    .      .         .    .      {
93,515,104 23,349,540  0 41,173 18,580,529    0 41,173 7,483,608    .        while (__first != __last && !__pred(__first))
         .          .  .      .          .    .      .         .    .  	++__first;
         .          .  .      .          .    .      .         .    .        return __first;
         .          .  .      .          .    .      .         .    .      }
         .          .  .      .          .    .      .         .    .  
         .          .  .      .          .    .      .         .    .    /// This is an overload used by find algos for the RAI case.
         .          .  .      .          .    .      .         .    .    template<typename _RandomAccessIterator, typename _Predicate>
         .          .  .      .          .    .      .         .    .      _RandomAccessIterator
         .          .  .      .          .    .      .         .    .      __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
-- line 112 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc
--------------------------------------------------------------------------------
Ir         Dr         Dw         I1mr   D1mr      D1mw   ILmr   DLmr    DLmw   

         .          .          .      .         .      .      .       .      .  #include <cassert>
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  #include "modulo_num.h"
         .          .          .      .         .      .      .       .      .  
11,536,350          0          0 67,476         0      0 67,475       .      .  ModuloNum::ModuloNum(UInt32 max_value, UInt32 value) :
         .          .          .      .         .      .      .       .      .     m_value(value),
23,072,700          0 23,072,700      .         .      .      .       .      .     m_max_value(max_value)
11,536,350 11,536,350          .      .         .      .      .       .      .  {}
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  
11,536,350          .          .      .         .      .      .       .      .  ModuloNum::~ModuloNum()
11,536,350 11,536,350          .      .         .      .      .       .      .  {}
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  ModuloNum
         .          .          .      .         .      .      .       .      .  ModuloNum::operator+(const ModuloNum& num) const
32,293,380          0 13,840,020 67,476         0      0 67,475       .      .  {
13,840,020  4,613,340  4,613,340      .         .      .      .       .      .     ModuloNum new_num(m_max_value);
18,453,360  4,613,340  9,226,680      .         .      .      .       .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::ModuloNum(unsigned int, unsigned int) (4,613,340x)
13,840,020  9,226,680          .      .         .      .      .       .      .     assert(m_max_value == num.getMaxValue());
         .          .          .      .         .      .      .       .      .  
18,453,360  9,226,680          .      .         .      .      .       .      .     new_num.setValue((m_value + num.getValue()) % m_max_value);
         .          .          .      .         .      .      .       .      .     return new_num;
23,066,700 18,453,360          .      .         .      .      .       .      .  }
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  ModuloNum
         .          .          .      .         .      .      .       .      .  ModuloNum::operator-(const ModuloNum& num) const
16,167,690          0  6,929,010 67,476         0 50,484 67,475       0 50,340  {
 6,929,010  2,309,670  2,309,670      0 1,385,368      0      0 212,990      .     ModuloNum new_num(m_max_value);
 9,238,680  2,309,670  4,619,340 67,476         0      0 67,475       .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::ModuloNum(unsigned int, unsigned int) (2,309,670x)
 6,929,010  4,619,340          .      .         .      .      .       .      .     assert(m_max_value == num.getMaxValue());
         .          .          .      .         .      .      .       .      .  
 4,619,340  4,619,340          .      .         .      .      .       .      .     if (m_value >= num.getValue())
16,167,690          0  2,309,670 67,475         0      0 67,475       .      .        new_num.setValue(m_value - num.getValue());
         .          .          .      .         .      .      .       .      .     else
         .          .          .      .         .      .      .       .      .        new_num.setValue(m_max_value - num.getValue() + m_value);
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .     return new_num;
11,548,350  9,238,680          .      .         .      .      .       .      .  }
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  ModuloNum
         .          .          .      .         .      .      .       .      .  ModuloNum::operator+(UInt32 value) const
55,360,080  4,613,340 23,066,700 67,476         0      0 67,475       .      .  {
32,293,380  4,613,340  9,226,680 67,476         0      0 67,475       .      .     ModuloNum num(m_max_value);
18,453,360  4,613,340  9,226,680      .         .      .      .       .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::ModuloNum(unsigned int, unsigned int) (4,613,340x)
 9,226,680  4,613,340          .      .         .      .      .       .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::~ModuloNum() (4,613,340x)
13,840,020  4,613,340          .      .         .      .      .       .      .     num.setValue(value % m_max_value);
18,453,360          0  4,613,340      .         .      .      .       .      .     return (*this + num);
124,560,180 46,133,400 32,293,380 67,476         0      0 67,475       .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator+(ModuloNum const&) const (4,613,340x)
46,133,400 32,293,380          .      .         .      .      .       .      .  }
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  ModuloNum
         .          .          .      .         .      .      .       .      .  ModuloNum::operator-(UInt32 value) const
         .          .          .      .         .      .      .       .      .  {
         .          .          .      .         .      .      .       .      .     ModuloNum num(m_max_value);
         .          .          .      .         .      .      .       .      .     num.setValue(value % m_max_value);
         .          .          .      .         .      .      .       .      .     return (*this - num);
         .          .          .      .         .      .      .       .      .  }
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  bool
         .          .          .      .         .      .      .       .      .  ModuloNum::operator==(const ModuloNum& num) const
 2,309,670          0          0 67,476         0      0 67,475       .      .  {
16,149,690  9,226,680          .      .         .      .      .       .      .     return ((m_value == num.getValue()) && (m_max_value == num.getMaxValue()));
 2,309,670  2,309,670          .      .         .      .      .       .      .  }
         .          .          .      .         .      .      .       .      .  
         .          .          .      .         .      .      .       .      .  bool
         .          .          .      .         .      .      .       .      .  ModuloNum::operator!=(const ModuloNum& num) const
         .          .          .      .         .      .      .       .      .  {
         .          .          .      .         .      .      .       .      .     return (!(*this == num));
         .          .          .      .         .      .      .       .      .  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/misc/moving_average.h
--------------------------------------------------------------------------------
Ir         Dr         Dw         I1mr    D1mr D1mw   ILmr    DLmr DLmw   

-- line 71 ----------------------------------------
         .          .          .       .    .      .       .    .      .     m_curr_window_back = ModuloNum(m_max_window_size + 1);
         .          .          .       .    .      .       .    .      .  }
         .          .          .       .    .      .       .    .      .  
         .          .          .       .    .      .       .    .      .  template<class T>
         .          .          .       .    .      .       .    .      .  MovingAverage<T>::~MovingAverage()
         .          .          .       .    .      .       .    .      .  { }
         .          .          .       .    .      .       .    .      .  
         .          .          .       .    .      .       .    .      .  template<class T>
23,096,700  2,309,670 11,548,350 134,952    0 26,762 134,950    0 17,135  void MovingAverage<T>::addToWindow(T next_num)
         .          .          .       .    .      .       .    .      .  {
 2,309,670  2,309,670          .       .    .      .       .    .      .     m_num_list[m_curr_window_back.getValue()] = next_num;
23,096,700  2,309,670  6,929,010  67,476    0      0  67,475    .      .     m_curr_window_back = m_curr_window_back + 1;
161,676,900 50,812,740 41,574,060 202,428    0      0 202,425    .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator+(unsigned int) const (2,309,670x)
 4,619,340  2,309,670          .       .    .      .       .    .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::~ModuloNum() (2,309,670x)
13,858,020          0  2,309,670       .    .      .       .    .      .     if (m_curr_window_back == m_curr_window_front)
20,769,030 11,536,350          0  67,476    0      0  67,475    .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator==(ModuloNum const&) const (2,309,670x)
         .          .          .       .    .      .       .    .      .     {
18,429,360  2,303,670  6,911,010  66,853    0      0  66,852    .      .        m_curr_window_front = m_curr_window_front + 1;
161,256,900 50,680,740 41,466,060       .    .      .       .    .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator+(unsigned int) const (2,303,670x)
 4,607,340  2,303,670          .       .    .      .       .    .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::~ModuloNum() (2,303,670x)
         .          .          .       .    .      .       .    .      .     }
23,090,700 16,167,690          .       .    .      .       .    .      .  }
         .          .          .       .    .      .       .    .      .  
         .          .          .       .    .      .       .    .      .  template <class T>
         .          .          .       .    .      .       .    .      .  class MovingArithmeticMean : public MovingAverage<T>
         .          .          .       .    .      .       .    .      .  {
         .          .          .       .    .      .       .    .      .     private:
         .          .          .       .    .      .       .    .      .        T sum;
         .          .          .       .    .      .       .    .      .  
         .          .          .       .    .      .       .    .      .     public:
         .          .          .       .    .      .       .    .      .        MovingArithmeticMean(UInt32 max_window_size):
         .          .          .       .    .      .       .    .      .           MovingAverage<T>(max_window_size),
         .          .          .       .    .      .       .    .      .           sum(SubsecondTime::Zero())
         .          .          .       .    .      .       .    .      .        { }
         .          .          .       .    .      .       .    .      .  
25,406,370  2,309,670 11,548,350  67,476    0 28,460  67,475    0 17,135        void update(T next_num)
         .          .          .       .    .      .       .    .      .        {
18,477,360  2,309,670  4,619,340  67,476    0      0  67,475    .      .           UInt32 curr_window_size = (this->m_curr_window_back - this->m_curr_window_front).getValue();
71,599,770 23,096,700 16,167,690 202,427 1,385,368 50,484 202,425 212,990 50,340  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::operator-(ModuloNum const&) const (2,309,670x)
 4,619,340  2,309,670          .       .    .      .       .    .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/modulo_num.cc:ModuloNum::~ModuloNum() (2,309,670x)
 4,625,340  2,315,670          .       .    .      .       .    .      .           if (curr_window_size == this->m_max_window_size)
         .          .          .       .    .      .       .    .      .           {
         .          .          .       .    .      .       .    .      .              curr_window_size --;
 4,607,340  4,607,340          0  66,851    0      0  66,850    .      .              sum -= this->m_num_list[this->m_curr_window_front.getValue()];
         .          .          .       .    .      .       .    .      .           }
         .          .          .       .    .      .       .    .      .           sum += next_num;
         .          .          .       .    .      .       .    .      .           curr_window_size ++;
         .          .          .       .    .      .       .    .      .  
 6,929,010          0  2,309,670       .    .      .       .    .      .           this->addToWindow(next_num);
463,739,670 147,662,880 113,047,830 539,185    0 273,366 539,177    0 61,534  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/moving_average.h:MovingAverage<SubsecondTime>::addToWindow(SubsecondTime) (2,309,670x)
20,787,030 16,167,690          0     625    0      0     625    .      .        }
         .          .          .       .    .      .       .    .      .  
         .          .          .       .    .      .       .    .      .        T compute() const
         .          .          .       .    .      .       .    .      .        {
         .          .          .       .    .      .       .    .      .           UInt32 curr_window_size = (this->m_curr_window_back - this->m_curr_window_front).getValue(); // recompute
         .          .          .       .    .      .       .    .      .           return sum / curr_window_size;
         .          .          .       .    .      .       .    .      .        }
         .          .          .       .    .      .       .    .      .  };
         .          .          .       .    .      .       .    .      .  
-- line 121 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/system/barrier_sync_server.h
--------------------------------------------------------------------------------
Ir         Dr        Dw I1mr   D1mr D1mw ILmr   DLmr DLmw 

-- line 50 ----------------------------------------
         .         .  .      .    .    .      .    .    .        ~BarrierSyncServer();
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .        virtual void setDisable(bool disable);
         .         .  .      .    .    .      .    .    .        virtual void setGroup(core_id_t core_id, core_id_t master_core_id);
         .         .  .      .    .    .      .    .    .        void synchronize(core_id_t core_id, SubsecondTime time);
         .         .  .      .    .    .      .    .    .        void release() { abortBarrier(); }
         .         .  .      .    .    .      .    .    .        void advance();
         .         .  .      .    .    .      .    .    .        void setFastForward(bool fastforward, SubsecondTime next_barrier_time = SubsecondTime::MaxTime());
21,307,088 2,663,386  0 67,528    0    0 67,475    .    .        SubsecondTime getGlobalTime(bool upper_bound = false) { return upper_bound ? m_next_barrier_time : m_global_time; }
         .         .  .      .    .    .      .    .    .        void setBarrierInterval(SubsecondTime barrier_interval) { m_barrier_interval = barrier_interval; }
         .         .  .      .    .    .      .    .    .        SubsecondTime getBarrierInterval() const { return m_barrier_interval; }
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .        void printState(void);
         .         .  .      .    .    .      .    .    .  };
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  #endif /* __BARRIER_SYNC_SERVER_H__ */

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc
--------------------------------------------------------------------------------
Ir         Dr         Dw         I1mr    D1mr      D1mw    ILmr    DLmr    DLmw    

-- line 582 ----------------------------------------
         .          .          .       .         .       .       .       .       .          sortAndPrintVectorPercentiles(throttled_pages_tracker_page_aggregated_counts, percentages_buf_2, aggregated_counts_buf);
         .          .          .       .         .       .       .       .       .          std::cout << "CDF X values (throttled page accesses aggregated by phys_page):\n" << aggregated_counts_buf.str() << std::endl;
         .          .          .       .         .       .       .       .       .          std::cout << "CDF Y values (probability):\n" << percentages_buf_2.str() << std::endl;
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  UInt64
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::parseAddressBits(UInt64 address, UInt32 &data, UInt32 offset, UInt32 size, UInt64 base_address = 0)
25,406,370          0 11,548,350  67,476         0       0  67,475       .       .  {
         .          .          .       .         .       .       .       .       .      // Parse data from the address based on the offset and size, return the address without the bits used to parse the data.
 6,929,010          0  2,309,670  67,475         0  17,135  67,475       0  17,135      UInt32 log2_size = floorLog2(size);
36,954,720  2,309,670          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (2,309,670x)
 4,619,340          .          .       .         .       .       .       .       .      if (base_address != 0) {
13,858,020          0  2,309,670       0         0  17,135       0       0  17,135          data = (base_address >> offset) % size;
         .          .          .       .         .       .       .       .       .      } else {
         .          .          .       .         .       .       .       .       .          data = (address >> offset) % size;
         .          .          .       .         .       .       .       .       .      }
25,406,370          .          .       .         .       .       .       .       .      return ((address >> (offset + log2_size)) << offset) | (address & ((1 << offset) - 1));
13,858,020 13,858,020          .       .         .       .       .       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  void
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::parseDeviceAddress(IntPtr address, UInt32 &channel, UInt32 &rank, UInt32 &bank_group, UInt32 &bank, UInt32 &column, UInt64 &dram_page)
16,167,690          0  9,238,680  67,476         0  67,475  67,475       0  67,466  {
         .          .          .       .         .       .       .       .       .      // Construct DDR address which has bits used for interleaving removed
 3,464,505  1,154,835  1,154,835  67,476    62,428       0  67,475       .       .      UInt64 linearAddress = m_address_home_lookup->getLinearAddress(address);
26,561,205  9,238,680  3,464,505 134,952   197,637  50,340 134,950  67,475  50,340  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/address_home_lookup.cc:AddressHomeLookup::getLinearAddress(unsigned long) const (1,154,835x)
 2,309,670          .          .       .         .       .       .       .       .      UInt64 address_bits = linearAddress >> 6;
10,393,515  4,619,340  1,154,835       0    79,139       0       0  67,475       .      /*address_bits = */parseAddressBits(address_bits, channel, m_channel_offset, m_num_channels, m_channel_offset < m_home_lookup_bit ? address : linearAddress);
63,515,925  8,083,845  8,083,845 134,951         0  17,135 134,950       0  17,135  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::parseAddressBits(unsigned long, unsigned int&, unsigned int, unsigned int, unsigned long) (1,154,835x)
11,548,350  3,464,505  1,154,835  67,476         0       0  67,475       .       .      address_bits = parseAddressBits(address_bits, rank,    m_rank_offset,    m_num_ranks,    m_rank_offset < m_home_lookup_bit ? address : linearAddress);
63,515,925  8,083,845  8,083,845       0         0  17,135       0       0  17,135  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::parseAddressBits(unsigned long, unsigned int&, unsigned int, unsigned int, unsigned long) (1,154,835x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  
 3,464,505  2,309,670          .       .         .       .       .       .       .      if (m_open_page_mapping) {
         .          .          .       .         .       .       .       .       .          // Open-page mapping: column address is bottom bits, then bank, then page
 4,619,340  2,309,670          .       .         .       .       .       .       .          if (m_column_offset) {
         .          .          .       .         .       .       .       .       .              // Column address is split into 2 halves ColHi and ColLo and
         .          .          .       .         .       .       .       .       .              // the address looks like: | Page | ColHi | Bank | ColLo |
         .          .          .       .         .       .       .       .       .              // m_column_offset specifies the number of ColHi bits
         .          .          .       .         .       .       .       .       .              column = (((address_bits >> m_column_hi_offset) << m_bank_offset)
         .          .          .       .         .       .       .       .       .                      | (address_bits & ((1 << m_bank_offset) - 1))) % m_dram_page_size;
         .          .          .       .         .       .       .       .       .              address_bits = address_bits >> m_bank_offset;
         .          .          .       .         .       .       .       .       .              bank_group = address_bits % m_num_bank_groups;
         .          .          .       .         .       .       .       .       .              bank = address_bits % m_num_banks;
         .          .          .       .         .       .       .       .       .              address_bits = address_bits >> (m_num_banks_log2 + m_column_offset);
         .          .          .       .         .       .       .       .       .          } else {
11,548,350  2,309,670  1,154,835  67,476         0       0  67,475       .       .              column = address_bits % m_dram_page_size; address_bits /= m_dram_page_size;
 4,619,340  1,154,835  1,154,835       .         .       .       .       .       .              bank_group = address_bits % m_num_bank_groups;
11,548,350  2,309,670  1,154,835       .         .       .       .       .       .              bank = address_bits % m_num_banks; address_bits /= m_num_banks;
         .          .          .       .         .       .       .       .       .          }
 2,309,670  1,154,835  1,154,835  67,475         0       0  67,475       .       .          dram_page = address_bits;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  #if 0
         .          .          .       .         .       .       .       .       .          // Test address parsing done in this function for open page mapping
         .          .          .       .         .       .       .       .       .          std::bitset<10> bs_col (column);
         .          .          .       .         .       .       .       .       .          std::string str_col = bs_col.to_string<char,std::string::traits_type,std::string::allocator_type>();
         .          .          .       .         .       .       .       .       .          std::stringstream ss_original, ss_recomputed;
         .          .          .       .         .       .       .       .       .          ss_original << std::bitset<64>(linearAddress >> m_block_size_log2) << std::endl;
         .          .          .       .         .       .       .       .       .          ss_recomputed << std::bitset<50>(dram_page) << str_col.substr(0,m_column_offset) << std::bitset<4>(bank)
-- line 636 ----------------------------------------
-- line 645 ----------------------------------------
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          // Closed-page mapping: column address is bits X+banksize:X, row address is everything else
         .          .          .       .         .       .       .       .       .          // (from whatever is left after cutting channel/rank/bank from the bottom)
         .          .          .       .         .       .       .       .       .          column = (address_bits >> m_column_bits_shift) % m_dram_page_size;
         .          .          .       .         .       .       .       .       .          dram_page = (((address_bits >> m_column_bits_shift) / m_dram_page_size) << m_column_bits_shift)
         .          .          .       .         .       .       .       .       .              | (address_bits & ((1 << m_column_bits_shift) - 1));
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
 2,309,670  1,154,835          .       .         .       .       .       .       .      if (m_randomize_address) {
         .          .          .       .         .       .       .       .       .          std::bitset<3> row_bits(dram_page >> m_randomize_offset);                 // Row[offset+2:offset]
         .          .          .       .         .       .       .       .       .          UInt32 row_bits3 = row_bits.to_ulong();
         .          .          .       .         .       .       .       .       .          row_bits[2] = 0;
         .          .          .       .         .       .       .       .       .          UInt32 row_bits2 = row_bits.to_ulong();
         .          .          .       .         .       .       .       .       .          bank_group ^= ((m_num_bank_groups == 8) ? row_bits3 : row_bits2);    // BankGroup XOR Row
         .          .          .       .         .       .       .       .       .          bank /= m_num_bank_groups;
         .          .          .       .         .       .       .       .       .          bank ^= row_bits2;                                                   // Bank XOR Row
         .          .          .       .         .       .       .       .       .          bank = m_banks_per_bank_group * bank_group + bank;
         .          .          .       .         .       .       .       .       .          rank = (m_num_ranks > 1) ? rank ^ row_bits[0] : rank;                // Rank XOR Row
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      //printf("[%2d] address %12lx linearAddress %12lx channel %2x rank %2x bank_group %2x bank %2x dram_page %8lx crb %4u\n", m_core_id, address, linearAddress, channel, rank, bank_group, bank, dram_page, (((channel * m_num_ranks) + rank) * m_num_banks) + bank);
 9,238,680  8,083,845          0 134,951         0       0 134,950       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  // DRAM hardware access cost
         .          .          .       .         .       .       .       .       .  SubsecondTime
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::getDramAccessCost(SubsecondTime start_time, UInt64 size, core_id_t requester, IntPtr address, ShmemPerf *perf, bool is_remote)
 1,689,300    253,395    929,115 134,950    31,822 165,703 134,950       0  96,168  {
   253,880    101,455    101,455       0    32,270       .       .       .       .      UInt64 phys_page = address & ~((UInt64(1) << floorLog2(m_page_size)) - 1);
 1,689,300     84,465          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (84,465x)
   793,195    219,415    134,950  67,475         0       0  67,475       .       .      IntPtr cacheline_address = (size > m_cache_line_size) ? phys_page : address & ~((UInt64(1) << floorLog2(m_cache_line_size)) - 1);
 1,349,500     67,475          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (67,475x)
         .          .          .       .         .       .       .       .       .      SubsecondTime t_now = start_time;
         .          .          .       .         .       .       .       .       .  
   168,930          .          .       .         .       .       .       .       .      if (is_remote) {
 9,381,960  3,347,610  1,343,370  17,136         0       0  17,135       .       .          for (UInt32 i = 0; i < size / m_cache_line_size; i++) {
         .          .          .       .         .       .       .       .       .              // Calculate address mapping inside the DIMM
         .          .          .       .         .       .       .       .       .              UInt32 channel, rank, bank_group, bank, column;
         .          .          .       .         .       .       .       .       .              UInt64 dram_page;
 9,940,455  7,731,465  3,313,485  34,271        34  17,135  34,270       0  17,135              parseDeviceAddress(cacheline_address, channel, rank, bank_group, bank, column, dram_page);
236,361,930 53,015,760 35,343,840 188,493   197,853  51,405 188,485  34,270  51,405  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::parseDeviceAddress(unsigned long, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
 6,626,970  1,104,495  1,104,495       .         .       .       .       .       .              perf->updateTime(t_now);
23,218,707  8,840,012  3,321,589  34,270    17,135   4,052  34,270  17,135   4,052  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add DDR controller pipeline delay
         .          .          .       .         .       .       .       .       .              t_now += m_controller_delay;
 4,417,980          0  1,104,495  17,136         0       0  17,135       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_CNTLR);
29,314,653  9,856,003  5,353,571       0         0  19,518       0       0  16,686  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add DDR refresh delay if needed
 2,208,990          .          .       .         .       .       .       .       .              if (m_refresh_interval != SubsecondTime::Zero()) {
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .                  SubsecondTime refresh_base = (t_now.getPS() / m_refresh_interval.getPS()) * m_refresh_interval;
         .          .          .       .         .       .       .       .       .                  if (t_now - refresh_base < m_refresh_length) {
         .          .          .       .         .       .       .       .       .                      t_now = refresh_base + m_refresh_length;
         .          .          .       .         .       .       .       .       .                      perf->updateTime(t_now, ShmemPerf::DRAM_REFRESH);
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
 7,731,465  5,522,475          0  34,272         0       0  34,270       .       .              UInt64 crb = (channel * m_num_ranks * m_num_banks) + (rank * m_num_banks) + bank; // Combine channel, rank, bank to index m_banks
 2,208,990  1,104,495          .       .         .       .       .       .       .              LOG_ASSERT_ERROR(crb < m_total_banks, "Bank index out of bounds");
         .          .          .       .         .       .       .       .       .              BankInfo &bank_info = m_r_banks[crb];
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              //printf("[%2d] %s (%12lx, %4lu, %4lu), t_open = %lu, t_now = %lu, bank_info.t_avail = %lu\n", m_core_id, bank_info.open_page == dram_page && bank_info.t_avail + m_bank_keep_open >= t_now ? "Page Hit: " : "Page Miss:", address, crb, dram_page % 10000, t_now.getNS() - bank_info.t_avail.getNS(), t_now.getNS(), bank_info.t_avail.getNS());
         .          .          .       .         .       .       .       .       .              // DRAM page hit/miss
 2,208,990  2,208,990          0       0   491,380       0       0 119,220       .              if (bank_info.open_page == dram_page                            // Last access was to this row
 6,571,874  2,208,990          0  17,065         0       0  17,064       .       .                      && bank_info.t_avail + m_bank_keep_open >= t_now   // Bank hasn't been closed in the meantime
         .          .          .       .         .       .       .       .       .              ) {
         .          .          .       .         .       .       .       .       .  
 1,644,232          0          0  17,015         0       0  17,014       .       .                  if (bank_info.t_avail > t_now) {
         .          .          .       .         .       .       .       .       .                      t_now = bank_info.t_avail;
     4,150      1,660        415     270         0       0     270       .       .                      perf->updateTime(t_now, ShmemPerf::DRAM_BANK_PENDING);
     9,105      3,385      1,375       0         0      45       0       0      45  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (415x)
         .          .          .       .         .       .       .       .       .                  }
 1,644,232          0    822,116       0         0 126,752       .       .       .                  ++m_dram_page_hits;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              } else {
         .          .          .       .         .       .       .       .       .                  // Wait for bank to become available
         .          .          .       .         .       .       .       .       .                  if (bank_info.t_avail > t_now)
         .          .          .       .         .       .       .       .       .                      t_now = bank_info.t_avail;
         .          .          .       .         .       .       .       .       .                  // Close dram_page
   564,758          .          .       .         .       .       .       .       .                  if (bank_info.t_avail + m_bank_keep_open >= t_now) {
         .          .          .       .         .       .       .       .       .                      // We found the dram_page open and have to close it ourselves
         .          .          .       .         .       .       .       .       .                      t_now += m_bank_close_delay;
       713          0        713       0         0     272       .       .       .                      ++m_dram_page_misses;
   563,332          .          .       .         .       .       .       .       .                  } else if (bank_info.t_avail + m_bank_keep_open + m_bank_close_delay > t_now) {
         .          .          .       .         .       .       .       .       .                      // Bank was being closed, we have to wait for that to complete
         .          .          .       .         .       .       .       .       .                      t_now = bank_info.t_avail + m_bank_keep_open + m_bank_close_delay;
     2,356          0      1,178       0         0     208       .       .       .                      ++m_dram_page_closing;
         .          .          .       .         .       .       .       .       .                  } else {
         .          .          .       .         .       .       .       .       .                      // Bank was already closed, no delay.
   841,464          0    280,488  17,092         0  56,791  17,091       .       .                      ++m_dram_page_empty;
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .                  // Open dram_page
         .          .          .       .         .       .       .       .       .                  t_now += m_bank_open_delay;
 1,129,516          0    282,379       .         .       .       .       .       .                  perf->updateTime(t_now, ShmemPerf::DRAM_BANK_CONFLICT);
 7,435,389  2,509,937  1,348,947       0         0  86,119       0       0  12,870  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (282,379x)
         .          .          .       .         .       .       .       .       .  
 1,411,895  1,129,516    282,379  16,864         0       0  16,864       .       .                  bank_info.open_page = dram_page;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add rank access time and availability
         .          .          .       .         .       .       .       .       .              UInt64 cr = (channel * m_num_ranks) + rank;
 2,208,990  1,104,495          0     272         0       0     271       .       .              LOG_ASSERT_ERROR(cr < m_total_ranks, "Rank index out of bounds");
 5,522,475  1,104,495          .       .         .       .       .       .       .              SubsecondTime rank_avail_request = (m_num_bank_groups > 1) ? m_intercommand_delay_short : m_intercommand_delay;
16,567,425  9,940,455  1,104,495  34,272   919,670       0  34,270 153,490       .              SubsecondTime rank_avail_delay = m_r_rank_avail.size() ? m_r_rank_avail[cr]->computeQueueDelay(t_now, rank_avail_request, requester) : SubsecondTime::Zero();
2,439,127,891 939,254,460 305,610,398 945,432 106,028,594 671,220 945,378 12,871,341 247,097  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeQueueDelay(SubsecondTime, SubsecondTime, int) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add bank group access time and availability
 2,208,990  1,104,495          .       .         .       .       .       .       .              UInt64 crbg = (channel * m_num_ranks * m_num_bank_groups) + (rank * m_num_bank_groups) + bank_group;
 2,208,990  1,104,495          0       0     3,879       .       .       .       .              LOG_ASSERT_ERROR(crbg < m_total_bank_groups, "Bank-group index out of bounds");
12,149,445  5,522,475  1,104,495       0 1,370,037       0       0 161,725       .              SubsecondTime group_avail_delay = m_r_bank_group_avail.size() ? m_r_bank_group_avail[crbg]->computeQueueDelay(t_now, m_intercommand_delay_long, requester) : SubsecondTime::Zero();
2,459,559,664 948,058,927 307,131,705   1,974 107,052,387 220,303   1,974 12,600,713  43,284  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeQueueDelay(SubsecondTime, SubsecondTime, int) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add device access time (tCAS)
         .          .          .       .         .       .       .       .       .              t_now += m_dram_access_cost;
 4,417,980          0  1,104,495  17,136         0       0  17,135       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_DEVICE);
29,372,025  9,865,565  5,372,695       0    88,043  25,891       0       0     348  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Mark bank as busy until it can receive its next command
         .          .          .       .         .       .       .       .       .              // Done before waiting for the bus to be free: sort of assumes best-case bus scheduling
         .          .          .       .         .       .       .       .       .              bank_info.t_avail = t_now;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add the wait time for the larger of bank group and rank availability delay
         .          .          .       .         .       .       .       .       .              t_now += (rank_avail_delay > group_avail_delay) ? rank_avail_delay : group_avail_delay;
 4,417,980          0  1,104,495       .         .       .       .       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_DEVICE);
23,202,429  8,837,299  3,316,163       0         0       1       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (1,104,495x)
         .          .          .       .         .       .       .       .       .              //std::cout << "DDR Processing time: " << m_bus_bandwidth.getRoundedLatency(8*pkt_size) << std::endl;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add DDR bus latency and queuing delay
 2,208,990  1,104,495          0       0   169,254       .       .       .       .              SubsecondTime ddr_processing_time = m_bus_bandwidth.getRoundedLatency(8 * m_cache_line_size); // bytes to bits
14,358,435  7,731,465  1,104,495  17,136   573,516       0  17,135  85,385       .              SubsecondTime ddr_queue_delay = m_r_queue_model.size() ? m_r_queue_model[channel]->computeQueueDelay(t_now, ddr_processing_time, requester) : SubsecondTime::Zero();
904,038,379 245,268,012 123,458,761 1,124,636 11,364,588 1,032,263 1,124,587 4,181,853 381,857  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::computeQueueDelay(SubsecondTime, SubsecondTime, int) (1,104,495x)
         .          .          .       .         .       .       .       .       .              t_now += ddr_queue_delay;
 4,417,980          0  1,104,495       .         .       .       .       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_QUEUE);
29,372,037  9,865,567  5,372,699       2        34      31       0       0       1  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (1,104,495x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Get next cacheline address
 6,626,970  1,104,495  2,208,990       0        93       .       .       .       .              cacheline_address += (UInt64(1) << floorLog2(m_cache_line_size));
22,089,900  1,104,495          0       2         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (1,104,495x)
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      } else {
 1,258,500    201,360    402,720 151,020         0       0 151,020       .       .          for (UInt32 i = 0; i < size / m_cache_line_size; i++) {
         .          .          .       .         .       .       .       .       .              // Calculate address mapping inside the DIMM
         .          .          .       .         .       .       .       .       .              UInt32 channel, rank, bank_group, bank, column;
         .          .          .       .         .       .       .       .       .              UInt64 dram_page;
   453,060    352,380    151,020 100,680         0       0 100,680       .       .              parseDeviceAddress(address, channel, rank, bank_group, bank, column, dram_page);
10,772,760  2,416,320  1,610,880 553,740   141,351 100,680 553,740 100,680 100,671  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::parseDeviceAddress(unsigned long, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&) (50,340x)
         .          .          .       .         .       .       .       .       .  
   302,040     50,340     50,340       .         .       .       .       .       .              perf->updateTime(t_now);
 1,079,730    406,485    158,550 100,680    50,340   3,765 100,680  50,340   3,765  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add DDR controller pipeline delay
         .          .          .       .         .       .       .       .       .              t_now += m_controller_delay;
   201,360          0     50,340       .         .       .       .       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_CNTLR);
 1,339,494    449,779    245,138       0         0  47,059       0       0  47,059  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add DDR refresh delay if needed
   100,680          .          .       .         .       .       .       .       .              if (m_refresh_interval != SubsecondTime::Zero()) {
         .          .          .       .         .       .       .       .       .                  SubsecondTime refresh_base = (t_now.getPS() / m_refresh_interval.getPS()) * m_refresh_interval;
         .          .          .       .         .       .       .       .       .                  if (t_now - refresh_base < m_refresh_length) {
         .          .          .       .         .       .       .       .       .                      t_now = refresh_base + m_refresh_length;
         .          .          .       .         .       .       .       .       .                      perf->updateTime(t_now, ShmemPerf::DRAM_REFRESH);
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
   352,380    251,700          0 100,680         0       0 100,680       .       .              UInt64 crb = (channel * m_num_ranks * m_num_banks) + (rank * m_num_banks) + bank; // Combine channel, rank, bank to index m_banks
   100,680     50,340          .       .         .       .       .       .       .              LOG_ASSERT_ERROR(crb < m_total_banks, "Bank index out of bounds");
         .          .          .       .         .       .       .       .       .              BankInfo &bank_info = m_banks[crb];
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              //printf("[%2d] %s (%12lx, %4lu, %4lu), t_open = %lu, t_now = %lu, bank_info.t_avail = %lu\n", m_core_id, bank_info.open_page == dram_page && bank_info.t_avail + m_bank_keep_open >= t_now ? "Page Hit: " : "Page Miss:", address, crb, dram_page % 10000, t_now.getNS() - bank_info.t_avail.getNS(), t_now.getNS(), bank_info.t_avail.getNS());
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // DRAM page hit/miss
   100,680    100,680          0       0   100,680       0       0 100,680       .              if (bank_info.open_page == dram_page                       // Last access was to this row
   293,392    100,680          0  46,016         0       0  46,016       .       .                      && bank_info.t_avail + m_bank_keep_open >= t_now   // Bank hasn't been closed in the meantime
         .          .          .       .         .       .       .       .       .              ) {
     1,660          .          .       .         .       .       .       .       .                  if (bank_info.t_avail > t_now) {
         .          .          .       .         .       .       .       .       .                      t_now = bank_info.t_avail;
   169,180    169,030         25  67,476    30,986       0  67,475       .       .                      perf->updateTime(t_now, ShmemPerf::DRAM_BANK_PENDING);
       627        217        109       0         0      17       0       0      17  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (25x)
         .          .          .       .         .       .       .       .       .                  }
     1,660          0        830       0         0     529       .       .       .                  ++m_dram_page_hits;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              } else {
         .          .          .       .         .       .       .       .       .                  // Wait for bank to become available
         .          .          .       .         .       .       .       .       .                  if (bank_info.t_avail > t_now)
         .          .          .       .         .       .       .       .       .                      t_now = bank_info.t_avail;
         .          .          .       .         .       .       .       .       .                  // Close dram_page
    99,020          .          .       .         .       .       .       .       .                  if (bank_info.t_avail + m_bank_keep_open >= t_now) {
         .          .          .       .         .       .       .       .       .                      // We found the dram_page open and have to close it ourselves
         .          .          .       .         .       .       .       .       .                      t_now += m_bank_close_delay;
       198          0        198       0         0     131       .       .       .                      ++m_dram_page_misses;
    98,624          .          .       .         .       .       .       .       .                  } else if (bank_info.t_avail + m_bank_keep_open + m_bank_close_delay > t_now) {
         .          .          .       .         .       .       .       .       .                      // Bank was being closed, we have to wait for that to complete
         .          .          .       .         .       .       .       .       .                      t_now = bank_info.t_avail + m_bank_keep_open + m_bank_close_delay;
       178          0         89       0         0      58       .       .       .                      ++m_dram_page_closing;
         .          .          .       .         .       .       .       .       .                  } else {
         .          .          .       .         .       .       .       .       .                      // Bank was already closed, no delay.
   147,669          0     49,223  49,223         0  34,245  49,223       .       .                      ++m_dram_page_empty;
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .                  // Open dram_page
         .          .          .       .         .       .       .       .       .                  t_now += m_bank_open_delay;
   198,040          0     49,510       .         .       .       .       .       .                  perf->updateTime(t_now, ShmemPerf::DRAM_BANK_CONFLICT);
 1,317,228    442,333    241,036       0         0  42,503       0       0  42,503  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (49,510x)
         .          .          .       .         .       .       .       .       .  
   247,550    198,040     49,510  49,510         0       0  49,510       .       .                  bank_info.open_page = dram_page;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add rank access time and availability
         .          .          .       .         .       .       .       .       .              UInt64 cr = (channel * m_num_ranks) + rank;
   100,680     50,340          0     830         0       0     830       .       .              LOG_ASSERT_ERROR(cr < m_total_ranks, "Rank index out of bounds");
   251,700     50,340          .       .         .       .       .       .       .              SubsecondTime rank_avail_request = (m_num_bank_groups > 1) ? m_intercommand_delay_short : m_intercommand_delay;
   755,100    453,060     50,340 100,680   192,397       0 100,680 151,020       .              SubsecondTime rank_avail_delay = m_rank_avail.size() ? m_rank_avail[cr]->computeQueueDelay(t_now, rank_avail_request, requester) : SubsecondTime::Zero();
112,271,579 43,228,388 13,973,476 1,784,813 7,243,941 274,642 1,784,813 6,644,330 274,302  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeQueueDelay(SubsecondTime, SubsecondTime, int) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add bank group access time and availability
   100,680     50,340          .       .         .       .       .       .       .              UInt64 crbg = (channel * m_num_ranks * m_num_bank_groups) + (rank * m_num_bank_groups) + bank_group;
   100,680     50,340          0       0        93       .       .       .       .              LOG_ASSERT_ERROR(crbg < m_total_bank_groups, "Bank-group index out of bounds");
   553,740    251,700     50,340       0   107,692       0       0 100,680       .              SubsecondTime group_avail_delay = m_bank_group_avail.size() ? m_bank_group_avail[crbg]->computeQueueDelay(t_now, m_intercommand_delay_long, requester) : SubsecondTime::Zero();
110,446,893 42,537,536 13,840,041   5,392 6,281,162  21,808   5,392 6,228,699  20,103  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeQueueDelay(SubsecondTime, SubsecondTime, int) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add device access time (tCAS)
         .          .          .       .         .       .       .       .       .              t_now += m_dram_access_cost;
   201,360          0     50,340  50,340         0       0  50,340       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_DEVICE);
 1,339,650    449,805    245,190       0     1,997     857       0       0      26  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Mark bank as busy until it can receive its next command
         .          .          .       .         .       .       .       .       .              // Done before waiting for the bus to be free: sort of assumes best-case bus scheduling
         .          .          .       .         .       .       .       .       .              bank_info.t_avail = t_now;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Add the wait time for the larger of bank group and rank availability delay
         .          .          .       .         .       .       .       .       .              t_now += (rank_avail_delay > group_avail_delay) ? rank_avail_delay : group_avail_delay;
   201,360          0     50,340       .         .       .       .       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_DEVICE);
 1,058,280    402,910    151,400       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // DDR bus latency and queuing delay
   100,680     50,340          0       0     6,304       .       .       .       .              SubsecondTime ddr_processing_time = m_bus_bandwidth.getRoundedLatency(8 * m_cache_line_size); // bytes to bits
         .          .          .       .         .       .       .       .       .              //std::cout << m_bus_bandwidth.getRoundedLatency(8*pkt_size) << std::endl;
   654,420    352,380     50,340 100,680   166,751       0 100,680 150,819       .              SubsecondTime ddr_queue_delay = m_queue_model.size() ? m_queue_model[channel]->computeQueueDelay(t_now, ddr_processing_time, requester) : SubsecondTime::Zero();
33,906,856  9,165,241  5,056,574 1,828,380   996,584  49,637 1,828,380 737,358  46,405  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::computeQueueDelay(SubsecondTime, SubsecondTime, int) (50,340x)
         .          .          .       .         .       .       .       .       .              t_now += ddr_queue_delay;
   201,360          0     50,340       .         .       .       .       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_QUEUE);
 1,295,058    442,373    230,326       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (50,340x)
         .          .          .       .         .       .       .       .       .              t_now += ddr_processing_time;
   201,360          0     50,340       .         .       .       .       .       .              perf->updateTime(t_now, ShmemPerf::DRAM_BUS);
 1,339,758    449,823    245,226       0         0      18       0       0      18  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Get next cacheline address
   100,680     50,340     50,340       .         .       .       .       .       .              cacheline_address += (UInt64(1) << floorLog2(m_cache_line_size));
 1,006,800     50,340          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (50,340x)
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      return t_now - start_time;  // Net increase of time, ie the pure hardware access cost
 1,081,055    844,650          0  67,476    58,100       0  67,475       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  SubsecondTime
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::getAccessLatencyRemote(SubsecondTime pkt_time, UInt64 pkt_size, core_id_t requester, IntPtr address, DramCntlrInterface::access_t access_type, ShmemPerf *perf)
   376,970     34,270    205,620  34,270         0  28,614  34,270       0  14,087  {
         .          .          .       .         .       .       .       .       .      // pkt_size is in 'Bytes'
         .          .          .       .         .       .       .       .       .      // m_dram_bandwidth is in 'Bits per clock cycle'
         .          .          .       .         .       .       .       .       .  
   119,945          0     51,405  17,135         0  17,135  17,135       0  17,133      SubsecondTime cacheline_hw_access_latency = getDramAccessCost(pkt_time, pkt_size, requester, address, perf, true);
176,376,869 57,456,438 21,789,802 2,333,944 6,162,810 331,808 2,333,944 5,985,594 311,610  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::getDramAccessCost(SubsecondTime, unsigned long, int, unsigned long, ShmemPerf*, bool) (17,135x)
    17,135     17,135          .       .         .       .       .       .       .      m_total_remote_dram_hardware_latency_cachelines += cacheline_hw_access_latency;
         .          .          .       .         .       .       .       .       .      SubsecondTime t_now = pkt_time + cacheline_hw_access_latency;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      SubsecondTime t_remote_queue_request = t_now;  // time of making queue request (after DRAM hardware access cost added)
         .          .          .       .         .       .       .       .       .      // Compress
   154,215     51,405     34,270       0         0  16,607       .       .       .      UInt64 phys_page = address & ~((UInt64(1) << floorLog2(m_page_size)) - 1);
   342,700     17,135          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (17,135x)
    34,270          0     17,135  17,135         0       0  17,135       .       .      UInt32 size = pkt_size;
         .          .          .       .         .       .       .       .       .      SubsecondTime cacheline_compression_latency = SubsecondTime::Zero();  // when cacheline compression is not enabled, this is always 0
    51,405     34,270          0       0    17,135       0       0  17,135       .      if (m_use_compression)
         .          .          .       .         .       .       .       .       .      {
    34,270     17,135          0  17,135     4,601       0  17,135       .       .          if (m_r_cacheline_gran) {
         .          .          .       .         .       .       .       .       .              if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .                  m_compression_model->update_bandwidth_utilization(m_data_movement_2->getCachelineQueueUtilizationPercentage(t_now));
         .          .          .       .         .       .       .       .       .                  m_compression_model->update_queue_model(m_data_movement_2, t_now, &m_r_part2_bandwidth, requester);
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .              else if (m_r_partition_queues == 3 || m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .                  m_compression_model->update_bandwidth_utilization(m_data_movement->getCachelineQueueUtilizationPercentage(t_now));
         .          .          .       .         .       .       .       .       .                  m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_part2_bandwidth, requester);
         .          .          .       .         .       .       .       .       .              }
-- line 901 ----------------------------------------
-- line 910 ----------------------------------------
         .          .          .       .         .       .       .       .       .                  bytes_saved += m_cache_line_size - size;
         .          .          .       .         .       .       .       .       .              else
         .          .          .       .         .       .       .       .       .                  bytes_saved -= size - m_cache_line_size;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              address_to_compressed_size[phys_page] = size;
         .          .          .       .         .       .       .       .       .              address_to_num_cache_lines[phys_page] = compressed_cache_lines;
         .          .          .       .         .       .       .       .       .              m_total_compression_latency += cacheline_compression_latency;
         .          .          .       .         .       .       .       .       .              t_now += cacheline_compression_latency;
    34,270     17,135          0  17,135    17,135       0  17,135  17,135       .          } else if (m_use_cacheline_compression) {
         .          .          .       .         .       .       .       .       .              if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .                  m_cacheline_compression_model->update_bandwidth_utilization(m_data_movement_2->getCachelineQueueUtilizationPercentage(t_now));
         .          .          .       .         .       .       .       .       .                  m_cacheline_compression_model->update_queue_model(m_data_movement_2, t_now, &m_r_part2_bandwidth, requester);
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .              else if (m_r_partition_queues == 3 || m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .                  m_cacheline_compression_model->update_bandwidth_utilization(m_data_movement->getCachelineQueueUtilizationPercentage(t_now));
         .          .          .       .         .       .       .       .       .                  m_cacheline_compression_model->update_queue_model(m_data_movement, t_now, &m_r_part2_bandwidth, requester);
         .          .          .       .         .       .       .       .       .  
-- line 926 ----------------------------------------
-- line 940 ----------------------------------------
         .          .          .       .         .       .       .       .       .              address_to_num_cache_lines[phys_page] = compressed_cache_lines;
         .          .          .       .         .       .       .       .       .              m_total_cacheline_compression_latency += cacheline_compression_latency;
         .          .          .       .         .       .       .       .       .              t_now += cacheline_compression_latency;
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      // TODO: datamovement_queue_delay is only added to t_now if(m_r_mode != 4 && !m_r_enable_selective_moves), should we also only add cacheline compression latency if the same condition is true?
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      SubsecondTime cacheline_delay;
    85,675          0          0  17,135         0       0  17,135       .       .      if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .          // Use computeQueueDelayNoEffect here, in case need we don't separately get the cacheline through the cacheline queue (in that case, only move the page through the page queue)
         .          .          .       .         .       .       .       .       .          cacheline_delay = m_data_movement_2->computeQueueDelayNoEffect(t_remote_queue_request + cacheline_compression_latency, m_r_part2_bandwidth.getRoundedLatency(8*size), QueueModel::CACHELINE, requester);
    85,675     51,405          0       0    49,586       .       .       .       .      } else if (m_r_partition_queues == 2) {
         .          .          .       .         .       .       .       .       .          cacheline_delay = m_data_movement->computeQueueDelayNoEffect(t_remote_queue_request + cacheline_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), QueueModel::CACHELINE, requester);
    34,270          .          .       .         .       .       .       .       .      } else if (m_r_partition_queues == 3) {
         .          .          .       .         .       .       .       .       .          cacheline_delay = m_data_movement->computeQueueDelayNoEffect(t_remote_queue_request + cacheline_compression_latency, m_r_part2_bandwidth.getRoundedLatency(8*size), QueueModel::CACHELINE, requester);
    34,270          .          .       .         .       .       .       .       .      } else if (m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .          cacheline_delay = m_data_movement->computeQueueDelayNoEffect(t_remote_queue_request + cacheline_compression_latency, m_r_part2_bandwidth.getRoundedLatency(8*size), QueueModel::CACHELINE, requester);
         .          .          .       .         .       .       .       .       .      } else {
         .          .          .       .         .       .       .       .       .          // Use computeQueueDelayNoEffect here, in case need we end up moving the whole page instead and not requesting the cacheline separately
   154,215     34,270     34,270  17,135         0       0  17,135       .       .          cacheline_delay = m_data_movement->computeQueueDelayNoEffect(t_remote_queue_request + cacheline_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), QueueModel::CACHELINE, requester);
 6,105,465  2,066,984    488,945 171,348   482,726       0 171,348       4       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.cc:QueueModelWindowedMG1Remote::computeQueueDelayNoEffect(SubsecondTime, SubsecondTime, QueueModel::request_t, int) (17,135x)
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      SubsecondTime datamovement_queue_delay = cacheline_delay;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // TODO: Currently model decompression by adding decompression latency to inflight page time
   188,485     51,405     17,135  34,270         0       0  34,270       .       .      if (m_use_compression && (m_r_cacheline_gran || m_use_cacheline_compression))
         .          .          .       .         .       .       .       .       .      {
         .          .          .       .         .       .       .       .       .          CompressionModel *compression_model = m_r_cacheline_gran ? m_compression_model : m_cacheline_compression_model;
         .          .          .       .         .       .       .       .       .          SubsecondTime decompression_latency = compression_model->decompress(phys_page, address_to_num_cache_lines[phys_page], m_core_id);
         .          .          .       .         .       .       .       .       .          datamovement_queue_delay += decompression_latency;
         .          .          .       .         .       .       .       .       .          if (m_r_cacheline_gran)
         .          .          .       .         .       .       .       .       .              m_total_decompression_latency += decompression_latency;
         .          .          .       .         .       .       .       .       .          else
         .          .          .       .         .       .       .       .       .              m_total_cacheline_decompression_latency += decompression_latency;
-- line 972 ----------------------------------------
-- line 973 ----------------------------------------
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      //std::cout << "Packet size: " << pkt_size << "  Cacheline Processing time: " << m_r_bus_bandwidth.getRoundedLatency(8*pkt_size) << " Remote queue delay " << datamovement_queue_delay << std::endl; 
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      SubsecondTime ddr_processing_time = m_bus_bandwidth.getRoundedLatency(8 * pkt_size);
         .          .          .       .         .       .       .       .       .      t_now += ddr_processing_time;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Track access to page
    17,135          .          .       .         .       .       .       .       .      if (m_r_cacheline_gran)
         .          .          .       .         .       .       .       .       .          phys_page =  address & ~((UInt64(1) << floorLog2(m_cache_line_size)) - 1); // Was << 6
         .          .          .       .         .       .       .       .       .      bool move_page = false;
    85,675     17,135          0  34,270         0       0  34,270       .       .      if (m_r_mode == 2 || m_r_mode == 5) {  // Update m_remote_access_tracker
         .          .          .       .         .       .       .       .       .          auto it = m_remote_access_tracker.find(phys_page);
         .          .          .       .         .       .       .       .       .          if (it != m_remote_access_tracker.end()) {
         .          .          .       .         .       .       .       .       .              m_remote_access_tracker[phys_page] += 1; 
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .          else {
         .          .          .       .         .       .       .       .       .              m_remote_access_tracker[phys_page] = 1;
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .          m_recent_remote_accesses.insert(std::pair<SubsecondTime, UInt64>(t_now, phys_page));
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      if (m_r_mode == 2 && m_remote_access_tracker[phys_page] > m_r_datamov_threshold) {
         .          .          .       .         .       .       .       .       .          // Only move pages when the page has been accessed remotely m_r_datamov_threshold times
         .          .          .       .         .       .       .       .       .          move_page = true;
         .          .          .       .         .       .       .       .       .      } 
    51,405          .          .       .         .       .       .       .       .      if (m_r_mode == 1 || m_r_mode == 3) {
         .          .          .       .         .       .       .       .       .          move_page = true; 
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      if (m_r_mode == 5) {
         .          .          .       .         .       .       .       .       .          // Use m_recent_remote_accesses to update m_remote_access_tracker so that it only keeps recent (10^5 ns) remote accesses
         .          .          .       .         .       .       .       .       .          while (!m_recent_remote_accesses.empty() && m_recent_remote_accesses.begin()->first + m_r_mode_5_remote_access_history_window_size < t_now) {
         .          .          .       .         .       .       .       .       .              auto entry = m_recent_remote_accesses.begin();
         .          .          .       .         .       .       .       .       .              m_remote_access_tracker[entry->second] -= 1;
         .          .          .       .         .       .       .       .       .              m_recent_remote_accesses.erase(entry);
-- line 1006 ----------------------------------------
-- line 1016 ----------------------------------------
         .          .          .       .         .       .       .       .       .                  move_page = true;
         .          .          .       .         .       .       .       .       .                  ++m_rmode5_page_moved_due_to_threshold;
         .          .          .       .         .       .       .       .       .              } else {
         .          .          .       .         .       .       .       .       .                  ++m_move_page_cancelled_rmode5;  // we chose not to move the page
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      // Cancel moving the page if the amount of reserved bufferspace in localdram for inflight + inflight_evicted pages is not enough to support an additional move
   325,565    102,810          0  17,135    51,236       0  17,135  29,941       .      if (move_page && m_r_reserved_bufferspace > 0 && ((m_inflight_pages.size() + m_inflightevicted_pages.size())  >= ((double)m_r_reserved_bufferspace/100)*(m_localdram_size/m_page_size))) {
       290        145        145     145         0       0     145       .       .          move_page = false;
       145          0        145       0         0     145       0       0     145          ++m_move_page_cancelled_bufferspace_full;
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      // Cancel moving the page if the queue used to move the page is already full
   186,890     84,950     33,980  33,980    14,822       0  33,980       .       .      if (move_page && m_data_movement->getPageQueueUtilizationPercentage(t_now) > m_r_page_queue_utilization_threshold) {  // save 5% for evicted pages?
 5,640,586  2,007,224    483,913       0         7       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.h:QueueModelWindowedMG1Remote::getPageQueueUtilizationPercentage(SubsecondTime) (16,990x)
         .          .          .       .         .       .       .       .       .          move_page = false;
         .          .          .       .         .       .       .       .       .          ++m_move_page_cancelled_datamovement_queue_full;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          if (m_use_throttled_pages_tracker) {
         .          .          .       .         .       .       .       .       .              // Track future accesses to throttled page
         .          .          .       .         .       .       .       .       .              auto it = m_throttled_pages_tracker.find(phys_page);
         .          .          .       .         .       .       .       .       .              if (it != m_throttled_pages_tracker.end() && t_now <= m_r_ideal_pagethrottle_remote_access_history_window_size + m_throttled_pages_tracker[phys_page].first) {
         .          .          .       .         .       .       .       .       .                  // found it, and last throttle of this page was within 10^5 ns
-- line 1037 ----------------------------------------
-- line 1040 ----------------------------------------
         .          .          .       .         .       .       .       .       .              } else {
         .          .          .       .         .       .       .       .       .                  if (it != m_throttled_pages_tracker.end()) {  // there was previously a value in the map
         .          .          .       .         .       .       .       .       .                      // printf("disagg.cc: m_throttled_pages_tracker[%lu] max was %u\n", phys_page, m_throttled_pages_tracker[phys_page].second);
         .          .          .       .         .       .       .       .       .                      m_throttled_pages_tracker_values.push_back(std::pair<UInt64, UInt32>(phys_page, m_throttled_pages_tracker[phys_page].second));
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .                  m_throttled_pages_tracker[phys_page] = std::pair<SubsecondTime, UInt32>(t_now, 0);
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }
    34,270          0          0  16,990         0       0  16,990       .       .      } else if (m_use_throttled_pages_tracker) {
         .          .          .       .         .       .       .       .       .          // Page was not throttled
         .          .          .       .         .       .       .       .       .          auto it = m_throttled_pages_tracker.find(phys_page);
         .          .          .       .         .       .       .       .       .          if (it != m_throttled_pages_tracker.end()) {  // there was previously a value in the map
         .          .          .       .         .       .       .       .       .              // printf("disagg.cc: m_throttled_pages_tracker[%lu] max was %u\n", phys_page, m_throttled_pages_tracker[phys_page].second);
         .          .          .       .         .       .       .       .       .              m_throttled_pages_tracker_values.push_back(std::pair<UInt64, UInt32>(phys_page, m_throttled_pages_tracker[phys_page].second));
         .          .          .       .         .       .       .       .       .              m_throttled_pages_tracker.erase(phys_page);  // page was moved, clear
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .     
    34,270     17,135          0  17,135         0       0  17,135       .       .      if (!m_r_use_separate_queue_model) {  // when a separate remote QueueModel is used, the network latency is added there
         .          .          .       .         .       .       .       .       .          t_now += m_r_added_latency;
         .          .          .       .         .       .       .       .       .      }
    68,540     34,270          0  17,135         0       0  17,135       .       .      if (m_r_mode != 4 && !m_r_enable_selective_moves) {
         .          .          .       .         .       .       .       .       .          t_now += datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .          m_total_remote_datamovement_latency += datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
    68,540     17,135     17,135       .         .       .       .       .       .      perf->updateTime(t_now, ShmemPerf::DRAM_BUS);
   459,159    153,634     84,513       0         0      39       0       0      39  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc:ShmemPerf::updateTime(SubsecondTime, ShmemPerf::shmem_times_type_t) (17,135x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Adding data movement cost of the entire page for now (this just adds contention in the queue)
         .          .          .       .         .       .       .       .       .      SubsecondTime page_datamovement_queue_delay = SubsecondTime::Zero();
    34,270     17,135          .       .         .       .       .       .       .      if (move_page) {
    16,990          0     16,990       0         0   6,830       .       .       .          ++m_page_moves;
         .          .          .       .         .       .       .       .       .          SubsecondTime page_compression_latency = SubsecondTime::Zero();  // when page compression is not enabled, this is always 0
         .          .          .       .         .       .       .       .       .          SubsecondTime page_hw_access_latency = SubsecondTime::Zero();
         .          .          .       .         .       .       .       .       .          std::vector<std::pair<UInt64, SubsecondTime>> updated_inflight_page_arrival_time_deltas;
    67,960     33,980          0  33,980         0       0  33,980       .       .          if (m_r_simulate_datamov_overhead && !m_r_cacheline_gran) {
         .          .          .       .         .       .       .       .       .              //check if queue is full
         .          .          .       .         .       .       .       .       .              //if it is... wait.
         .          .          .       .         .       .       .       .       .              //to wait: t_remote_queue_request + some amount of time
         .          .          .       .         .       .       .       .       .              //try again
         .          .          .       .         .       .       .       .       .  
   271,840    118,930     84,950  16,991         0  16,989  16,990       .       .              page_hw_access_latency = getDramAccessCost(t_remote_queue_request, m_page_size, requester, address, perf, true);
6,202,297,530 2,246,703,268 806,349,943 389,540 222,563,593 2,238,159 389,405 24,256,673 514,575  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::getDramAccessCost(SubsecondTime, unsigned long, int, unsigned long, ShmemPerf*, bool) (16,990x)
         .          .          .       .         .       .       .       .       .              m_total_remote_dram_hardware_latency_pages += page_hw_access_latency;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Compress
    33,980     16,990     16,990       .         .       .       .       .       .              UInt32 page_size = m_page_size;
    50,970     33,980          0  16,990    33,977       0  16,990       .       .              if (m_use_compression)
         .          .          .       .         .       .       .       .       .              {
   169,900     84,950     33,980  33,980    67,958  16,988  33,980  33,980       .                  m_compression_model->update_bandwidth_utilization(m_data_movement->getPageQueueUtilizationPercentage(t_now));
 5,635,520  2,005,279    483,741      14   541,342       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.h:QueueModelWindowedMG1Remote::getPageQueueUtilizationPercentage(SubsecondTime) (16,990x)
   135,920     50,970          .       .         .       .       .       .       .                  if (m_r_partition_queues == 1 || m_r_partition_queues == 3 || m_r_partition_queues == 4)
         .          .          .       .         .       .       .       .       .                      m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_part_bandwidth, requester);
         .          .          .       .         .       .       .       .       .                  else
    33,980     33,980          .       .         .       .       .       .       .                      m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_bus_bandwidth, requester);
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .                  UInt32 compressed_cache_lines;
   271,840    152,910     50,970      27    17,866      59       0  16,990       .                  page_compression_latency = m_compression_model->compress(phys_page, m_page_size, m_core_id, &page_size, &compressed_cache_lines);
17,784,109,918 3,475,574,823 1,653,239,606 2,629,092 2,843,430 1,404,935 2,627,720 2,701,855 1,398,063  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::compress(unsigned long, unsigned long, int, unsigned int*, unsigned int*) (16,990x)
    67,960     33,980          0  16,990       742       0  16,990       .       .                  if (m_page_size > page_size)
    50,838          0     16,990       .         .       .       .       .       .                      bytes_saved += m_page_size - page_size;
         .          .          .       .         .       .       .       .       .                  else
       198          0          0      66         0       0      66       .       .                      bytes_saved -= page_size - m_page_size;
         .          .          .       .         .       .       .       .       .  
   101,940     16,990     33,980  16,990         0       0  16,990       .       .                  address_to_compressed_size[phys_page] = page_size;
 1,658,748    567,499     56,650  52,860   256,501     725  50,627 250,357     598  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::operator[](unsigned long const&) (16,990x)
    84,950     16,990     33,980       .         .       .       .       .       .                  address_to_num_cache_lines[phys_page] = compressed_cache_lines;
 1,679,806    572,924     59,166      40   213,288   1,175      40 210,082     846  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::operator[](unsigned long const&) (16,990x)
         .          .          .       .         .       .       .       .       .                  m_total_compression_latency += page_compression_latency;
         .          .          .       .         .       .       .       .       .                  t_now += page_compression_latency;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
   203,880    101,940          0  17,016     7,495       0  16,990       .       .              if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .                  page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + page_hw_access_latency + page_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*page_size), page_size, QueueModel::PAGE, requester);
    33,980          .          .       .         .       .       .       .       .              } else if (m_r_partition_queues == 2) {
         .          .          .       .         .       .       .       .       .                  page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + page_hw_access_latency + page_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*page_size), page_size, QueueModel::PAGE, requester);
    33,980          .          .       .         .       .       .       .       .              } else if (m_r_partition_queues == 3) {
         .          .          .       .         .       .       .       .       .                  page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + page_hw_access_latency + page_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*page_size), page_size, QueueModel::PAGE, requester, true, phys_page);
    33,980          0          0  16,990         0       0  16,990       .       .              } else if (m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .                  page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + page_hw_access_latency + page_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*page_size), page_size, QueueModel::PAGE, requester);
         .          .          .       .         .       .       .       .       .              } else {
   254,850     33,980     84,950  50,970         0       1  50,970       .       .                  page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + page_hw_access_latency + page_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*page_size), page_size, QueueModel::PAGE, requester);
19,320,945  5,516,132  2,128,371 392,841   643,548  43,319 374,926 473,506  36,902  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.cc:QueueModelWindowedMG1Remote::computeQueueDelayTrackBytes(SubsecondTime, SubsecondTime, unsigned long, QueueModel::request_t, int, bool, unsigned long) (16,990x)
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // TODO: Currently model decompression by adding decompression latency to inflight page time
    33,980     16,990          .       .         .       .       .       .       .              if (m_use_compression)
         .          .          .       .         .       .       .       .       .              {
   288,830    152,910     84,950  50,904     2,088       0  50,904       .       .                  SubsecondTime decompression_latency = m_compression_model->decompress(phys_page, address_to_num_cache_lines[phys_page], m_core_id);
 1,419,364    505,418     16,990       0        41       .       .       .       .  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::operator[](unsigned long const&) (16,990x)
   985,420    373,780    169,900  34,056     7,695       0  33,980       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::decompress(unsigned long, unsigned int, int) (16,990x)
    16,990     16,990          .       .         .       .       .       .       .                  page_datamovement_queue_delay += decompression_latency;
         .          .          .       .         .       .       .       .       .                  m_total_decompression_latency += decompression_latency;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Update t_now after page_datamovement_queue_delay includes the decompression latency
    67,960     33,980          .       .         .       .       .       .       .              if (m_r_partition_queues != 0) {
         .          .          .       .         .       .       .       .       .                  if (page_hw_access_latency + page_compression_latency + page_datamovement_queue_delay <= cacheline_hw_access_latency + cacheline_compression_latency + datamovement_queue_delay) {
         .          .          .       .         .       .       .       .       .                      // If the page arrival time via the page queue is faster than the cacheline via the cacheline queue, use the page queue arrival time
         .          .          .       .         .       .       .       .       .                      // (and the cacheline request is not sent)
         .          .          .       .         .       .       .       .       .                      t_now += page_datamovement_queue_delay;  // if nonzero, compression latency was earlier added to t_now already
         .          .          .       .         .       .       .       .       .                      m_total_remote_datamovement_latency += page_datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .                      t_now -= cacheline_hw_access_latency;  // remove previously added latency
         .          .          .       .         .       .       .       .       .                      t_now += page_hw_access_latency;
         .          .          .       .         .       .       .       .       .                      if (m_r_mode != 4 && !m_r_enable_selective_moves) {
-- line 1136 ----------------------------------------
-- line 1160 ----------------------------------------
         .          .          .       .         .       .       .       .       .                      // LOG_PRINT("partition_queue=1 resulted in savings of APPROX %lu ns in getAccessLatencyRemote", ((page_compression_latency + page_datamovement_queue_delay) - (cacheline_compression_latency + datamovement_queue_delay)).getNS());
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              } else {
         .          .          .       .         .       .       .       .       .                  // Default is requesting the whole page at once (instead of also requesting cacheline), so replace time of cacheline request with the time of the page request
         .          .          .       .         .       .       .       .       .                  t_now += page_datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .                  m_total_remote_datamovement_latency += page_datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .                  t_now -= cacheline_hw_access_latency;  // remove previously added latency
         .          .          .       .         .       .       .       .       .                  t_now += page_hw_access_latency;
    67,960     33,980          .       .         .       .       .       .       .                  if (m_r_mode != 4 && !m_r_enable_selective_moves) {
         .          .          .       .         .       .       .       .       .                      t_now -= datamovement_queue_delay;  // only subtract if it was added earlier
         .          .          .       .         .       .       .       .       .                      m_total_remote_datamovement_latency -= datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .                  }
   101,940     50,970          0       0    33,087       .       .       .       .                  if (m_use_compression && (m_r_cacheline_gran || m_use_cacheline_compression))
         .          .          .       .         .       .       .       .       .                      t_now -= cacheline_compression_latency;  // essentially didn't separately compress cacheline, so subtract this previously added compression latency
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          } else if (!m_r_simulate_datamov_overhead) {
         .          .          .       .         .       .       .       .       .              // Include the hardware access cost of the page
         .          .          .       .         .       .       .       .       .              page_datamovement_queue_delay = getDramAccessCost(t_remote_queue_request, m_page_size, requester, address, perf, true);
         .          .          .       .         .       .       .       .       .          } else {
         .          .          .       .         .       .       .       .       .              page_datamovement_queue_delay = SubsecondTime::Zero();
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  
    16,990     16,990          0  16,990    13,898       0  16,990       .       .          assert(std::find(m_local_pages.begin(), m_local_pages.end(), phys_page) == m_local_pages.end()); 
    50,970     16,990          0  16,990    16,990       0  16,990       .       .          assert(std::find(m_remote_pages.begin(), m_remote_pages.end(), phys_page) != m_remote_pages.end()); 
         .          .          .       .         .       .       .       .       .          m_local_pages.push_back(phys_page);
    16,990          0     16,990       .         .       .       .       .       .          m_local_pages_remote_origin[phys_page] = 1;
    33,980     16,990          0  16,990     2,676       0  16,990       .       .          if (m_r_exclusive_cache)
         .          .          .       .         .       .       .       .       .              m_remote_pages.remove(phys_page);
    16,990          .          .       .         .       .       .       .       .          m_moved_pages_no_access_yet.push_back(phys_page);
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          m_inflight_pages.erase(phys_page);
   118,930     67,960     16,990       0    38,292       .       .       .       .          SubsecondTime global_time = Sim()->getClockSkewMinimizationServer()->getGlobalTime();
   169,900     33,980     16,990       0     8,075       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/system/barrier_sync_server.h:BarrierSyncServer::getGlobalTime(bool) (16,990x)
         .          .          .       .         .       .       .       .       .          SubsecondTime page_arrival_time = t_remote_queue_request + page_hw_access_latency + page_compression_latency + page_datamovement_queue_delay;  // page_datamovement_queue_delay already contains the page decompression latency
    16,990     16,990          .       .         .       .       .       .       .          m_inflight_pages[phys_page] = SubsecondTime::max(global_time, page_arrival_time);
    33,980          .          .       .         .       .       .       .       .          if (global_time > page_arrival_time + SubsecondTime::NS(50)) {  // if global time is more than 50 ns ahead of page_arrival_time
        23          0         23       .         .       .       .       .       .              ++m_global_time_much_larger_than_page_arrival;
         .          .          .       .         .       .       .       .       .              m_sum_global_time_much_larger += global_time - page_arrival_time;
         .          .          .       .         .       .       .       .       .          }
    16,990          0     16,990       8         0       0       8       .       .          m_inflight_redundant[phys_page] = 0; 
    50,970     33,980          0       0    16,990       0       0  16,990       .          if (m_inflight_pages.size() > m_max_bufferspace)
         8          0          4       .         .       .       .       .       .              m_max_bufferspace++;
         .          .          .       .         .       .       .       .       .  
    33,980          .          .       .         .       .       .       .       .          for (auto it = updated_inflight_page_arrival_time_deltas.begin(); it != updated_inflight_page_arrival_time_deltas.end(); ++it) {
         .          .          .       .         .       .       .       .       .              if (m_inflight_pages.count(it->first) && it->second > SubsecondTime::Zero()) {
         .          .          .       .         .       .       .       .       .                  m_inflight_pages_delay_time += it->second;
         .          .          .       .         .       .       .       .       .                  m_inflight_pages[it->first] += it->second;  // update arrival time if it's still an inflight page
         .          .          .       .         .       .       .       .       .                  ++m_inflight_page_delayed;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
    67,960     33,980          0       0     3,297       .       .       .       .      if (!move_page || !m_r_simulate_datamov_overhead || m_r_cacheline_gran) {  // move_page == false, or earlier condition (m_r_simulate_datamov_overhead && !m_r_cacheline_gran) is false
         .          .          .       .         .       .       .       .       .          // Actually put the cacheline request on the queue, since after now we're sure we actually use the cacheline request
         .          .          .       .         .       .       .       .       .          // This actual cacheline request probably has a similar delay value as the earlier computeQueueDelayNoEffect value, no need to update t_now
     1,160        290          0     290         0       0     290       .       .          if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .              cacheline_delay = m_data_movement_2->computeQueueDelayTrackBytes(t_remote_queue_request + cacheline_compression_latency, m_r_part2_bandwidth.getRoundedLatency(8*size), size, QueueModel::CACHELINE, requester);
       435        145          .       .         .       .       .       .       .          } else if (m_r_partition_queues == 2) {
         .          .          .       .         .       .       .       .       .              cacheline_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + cacheline_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, QueueModel::CACHELINE, requester);
       290          .          .       .         .       .       .       .       .          } else if (m_r_partition_queues == 3) {
         .          .          .       .         .       .       .       .       .              std::vector<std::pair<UInt64, SubsecondTime>> updated_inflight_page_arrival_time_deltas;
         .          .          .       .         .       .       .       .       .              cacheline_delay = m_data_movement->computeQueueDelayTrackBytesPotentialPushback(t_remote_queue_request + cacheline_compression_latency, m_r_part2_bandwidth.getRoundedLatency(8*size), size, QueueModel::CACHELINE, updated_inflight_page_arrival_time_deltas, true, requester);
         .          .          .       .         .       .       .       .       .              for (auto it = updated_inflight_page_arrival_time_deltas.begin(); it != updated_inflight_page_arrival_time_deltas.end(); ++it) {
         .          .          .       .         .       .       .       .       .                  if (m_inflight_pages.count(it->first) && it->second > SubsecondTime::Zero()) {
         .          .          .       .         .       .       .       .       .                      m_inflight_pages_delay_time += it->second;
         .          .          .       .         .       .       .       .       .                      m_inflight_pages[it->first] += it->second;  // update arrival time if it's still an inflight page
         .          .          .       .         .       .       .       .       .                      ++m_inflight_page_delayed;
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
       435        145          .       .         .       .       .       .       .          } else if (m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .              cacheline_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + cacheline_compression_latency, m_r_part2_bandwidth.getRoundedLatency(8*size), size, QueueModel::CACHELINE, requester);
         .          .          .       .         .       .       .       .       .          } else {
         .          .          .       .         .       .       .       .       .              // partition queues off, but move_page = false so actually put the cacheline request on the queue
     1,595        145        580     290         0       0     290       .       .              cacheline_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + cacheline_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, QueueModel::CACHELINE, requester);
   193,391     56,596     19,536   3,956     3,985     259   3,956   3,962     250  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.cc:QueueModelWindowedMG1Remote::computeQueueDelayTrackBytes(SubsecondTime, SubsecondTime, unsigned long, QueueModel::request_t, int, bool, unsigned long) (145x)
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      } 
         .          .          .       .         .       .       .       .       .  
       290        145          0     145         0       0     145       .       .      if (move_page) { // Check if there's place in local DRAM and if not evict an older page to make space
   101,940     33,980     16,990       .         .       .       .       .       .          t_now += possiblyEvict(phys_page, pkt_time, requester);
2,497,132,301 458,223,292 208,361,832 578,137 6,918,146 244,839 453,147 900,642  25,979  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::possiblyEvict(unsigned long, SubsecondTime, int) (16,990x)
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Update Memory Counters?
         .          .          .       .         .       .       .       .       .      //queue_delay = ddr_queue_delay;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      //std::cout << "Remote Latency: " << t_now - pkt_time << std::endl;
    85,675     34,270     17,135  16,990    18,299       0  16,990       .       .      possiblyPrefetch(phys_page, t_now, requester);
   462,645    188,485    154,215  51,405     7,452       0  51,405       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::possiblyPrefetch(unsigned long, SubsecondTime, int) (17,135x)
         .          .          .       .         .       .       .       .       .      SubsecondTime access_latency = t_now - pkt_time;
         .          .          .       .         .       .       .       .       .      m_total_remote_access_latency += access_latency;
         .          .          .       .         .       .       .       .       .      m_total_access_latency += access_latency;
         .          .          .       .         .       .       .       .       .      return access_latency;
   205,620    171,350          0       0    34,083       .       .       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  void
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::updateBandwidth()
         .          .          .       .         .       .       .       .       .  {
         .          .          .       .         .       .       .       .       .      m_update_bandwidth_count += 1;
         .          .          .       .         .       .       .       .       .      if (m_use_dynamic_bandwidth && m_update_bandwidth_count % 20 == 0) {
         .          .          .       .         .       .       .       .       .          m_r_bw_scalefactor = (int)(m_r_bw_scalefactor + 1) % 17;
         .          .          .       .         .       .       .       .       .          if (m_r_bw_scalefactor == 0)
-- line 1257 ----------------------------------------
-- line 1269 ----------------------------------------
         .          .          .       .         .       .       .       .       .          m_r_part2_bandwidth.changeBandwidth(m_dram_speed * m_data_bus_width / (1000 * m_r_bw_scalefactor / m_r_cacheline_queue_fraction)); // Remote memory - Partitioned Queues => Cacheline Queue
         .          .          .       .         .       .       .       .       .          // Currently only windowed_mg1_remote_ind_queues QueueModel updates stats tracking based on updateBandwidth()
         .          .          .       .         .       .       .       .       .          m_data_movement->updateBandwidth(m_r_bus_bandwidth.getBandwidthBitsPerUs(), m_r_cacheline_queue_fraction);
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  void
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::update_bw_utilization_count(SubsecondTime pkt_time)
   674,750     67,475    337,375 134,950         0  67,475 134,950       0  67,475  {
   337,375    202,425     67,475  67,475   202,425       0  67,475 202,425       .      double bw_utilization = m_data_movement->getPageQueueUtilizationPercentage(pkt_time);
28,301,304  9,748,001  2,640,856 1,383,285 2,742,264 234,917 1,383,285 2,742,264 234,917  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.h:QueueModelWindowedMG1Remote::getPageQueueUtilizationPercentage(SubsecondTime) (67,475x)
   202,425     67,475          0       0    67,475       0       0  67,475       .      int decile = (int)(bw_utilization * 10);
   134,950          .          .       .         .       .       .       .       .      if (decile > 10)
         .          .          .       .         .       .       .       .       .          decile = 10;  // put all utilizations above 100% here
   134,950          .          .       .         .       .       .       .       .      else if (decile < 0)
         .          .          .       .         .       .       .       .       .          std::cout << "update_bw_utilization_count() decile < 0, returned page bw utilization is wrong?" << std::endl;
   134,950          0     67,475       0         0  67,475       0       0  67,475      m_bw_utilization_decile_to_count[decile] += 1;
   607,275    472,325          0       0        14       .       .       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  SubsecondTime
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::getAccessLatency(SubsecondTime pkt_time, UInt64 pkt_size, core_id_t requester, IntPtr address, DramCntlrInterface::access_t access_type, ShmemPerf *perf)
 1,416,975    134,950    877,175 134,950    67,475 134,950 134,950  67,475 134,950  {
         .          .          .       .         .       .       .       .       .      // Update bandwidth factor every 1K remote accesses
         .          .          .       .         .       .       .       .       .      /*
         .          .          .       .         .       .       .       .       .      if (m_use_dynamic_bandwidth && m_num_accesses + 1 % 1000 == 0)
         .          .          .       .         .       .       .       .       .          updateBandwidth();
         .          .          .       .         .       .       .       .       .      */
         .          .          .       .         .       .       .       .       .  
   134,950     67,475          0       0    67,475       0       0  67,475       .      if (m_track_page_bw_utilization_stats) {
         .          .          .       .         .       .       .       .       .          // Update BW utilization count
   269,900     67,475     67,475       0         0  67,475       0       0  67,475          update_bw_utilization_count(pkt_time);
30,797,879 10,625,176  3,180,656 1,585,710 3,012,178 369,867 1,585,710 3,012,164 369,867  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::update_bw_utilization_count(SubsecondTime) (67,475x)
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
   742,225    202,425    134,950  67,475    67,498  67,475  67,475  67,475  67,475      UInt64 phys_page = address & ~((UInt64(1) << floorLog2(m_page_size)) - 1);
 1,349,500     67,475          0 134,950         0       0 134,950       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (67,475x)
   134,950     67,475          0       0    67,475       0       0  67,475       .      if (m_r_cacheline_gran)
         .          .          .       .         .       .       .       .       .          phys_page =  address & ~((UInt64(1) << floorLog2(m_cache_line_size)) - 1); // Was << 6
   202,425    134,950     67,475  67,475         0       0  67,475       .       .      UInt64 cacheline =  address & ~((UInt64(1) << floorLog2(m_cache_line_size)) - 1); // Was << 6
 1,349,500     67,475          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (67,475x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      if (m_page_usage_map.count(phys_page) == 0) {
     1,810        905        905       2         0     905       2       0     905          ++m_unique_pages_accessed;
   392,024          0        905  66,570         0       0  66,570       .       .          m_page_usage_map[phys_page] = 0;
         .          .          .       .         .       .       .       .       .      } else {
    66,570          0     66,570  66,570         0       0  66,570       .       .          m_page_usage_map[phys_page] += 1;
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // m_inflight_pages: tracks which pages are being moved and when the movement will complete
         .          .          .       .         .       .       .       .       .      // Check if the page movement is over and if so, remove from the list
         .          .          .       .         .       .       .       .       .      // Do this for both queues, forward and backward
         .          .          .       .         .       .       .       .       .      std::map<UInt64, SubsecondTime>::iterator i;
   278,774     53,074          .       .         .       .       .       .       .      for (i = m_inflight_pages.begin(); i != m_inflight_pages.end();) {
   424,592    265,370     53,074       0    40,415       0       0  40,306       .          if (i->second <= SubsecondTime::max(Sim()->getClockSkewMinimizationServer()->getGlobalTime(), pkt_time)) {
   530,740    106,148     53,074       0         1       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/system/barrier_sync_server.h:BarrierSyncServer::getGlobalTime(bool) (53,074x)
    16,981          .          .       .         .       .       .       .       .              m_inflight_redundant.erase(i->first);
   101,886     67,924          .       .         .       .       .       .       .              m_data_movement->removeInflightPage(i->first);
         .          .          .       .         .       .       .       .       .              m_inflight_pages.erase(i++);
         .          .          .       .         .       .       .       .       .          } else {
         .          .          .       .         .       .       .       .       .              ++i;
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
   154,592      7,866      3,910   3,910         0       0   3,910       .       .      for (i = m_inflightevicted_pages.begin(); i != m_inflightevicted_pages.end();) {
    47,472     35,604      3,956   7,820     3,909       0   7,820   3,909       .          if (i->second <= SubsecondTime::max(Sim()->getClockSkewMinimizationServer()->getGlobalTime(), pkt_time)) {
    39,560      7,912      3,956       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/system/barrier_sync_server.h:BarrierSyncServer::getGlobalTime(bool) (3,956x)
         .          .          .       .         .       .       .       .       .              m_inflightevicted_pages.erase(i++);
         .          .          .       .         .       .       .       .       .          } else {
         .          .          .       .         .       .       .       .       .              ++i;
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Other systems using the remote memory and creating disturbance
   269,900    134,950          0  63,565         0       0  63,565       .       .      if (m_r_disturbance_factor > 0) {
         .          .          .       .         .       .       .       .       .          if ( (unsigned int)(rand() % 100) < m_r_disturbance_factor) {
         .          .          .       .         .       .       .       .       .              SubsecondTime delay(SubsecondTime::NS() * 1000);
         .          .          .       .         .       .       .       .       .              if (m_r_partition_queues == 1)  
         .          .          .       .         .       .       .       .       .                  /* SubsecondTime page_datamovement_queue_delay = */ m_data_movement->computeQueueDelayTrackBytes(pkt_time + delay, m_r_part_bandwidth.getRoundedLatency(8*m_page_size), m_page_size, QueueModel::PAGE, requester);
         .          .          .       .         .       .       .       .       .              else if (m_r_partition_queues == 2)
         .          .          .       .         .       .       .       .       .                  /* SubsecondTime page_datamovement_queue_delay = */ m_data_movement->computeQueueDelayTrackBytes(pkt_time + delay, m_r_bus_bandwidth.getRoundedLatency(8*m_page_size), m_page_size, QueueModel::PAGE, requester);
         .          .          .       .         .       .       .       .       .              else if (m_r_partition_queues == 3)
         .          .          .       .         .       .       .       .       .                  /* SubsecondTime page_datamovement_queue_delay = */ m_data_movement->computeQueueDelayTrackBytes(pkt_time + delay, m_r_part_bandwidth.getRoundedLatency(8*m_page_size), m_page_size, QueueModel::PAGE, requester);
-- line 1345 ----------------------------------------
-- line 1347 ----------------------------------------
         .          .          .       .         .       .       .       .       .                  /* SubsecondTime page_datamovement_queue_delay = */ m_data_movement->computeQueueDelayTrackBytes(pkt_time + delay, m_r_part_bandwidth.getRoundedLatency(8*m_page_size), m_page_size, QueueModel::PAGE, requester);
         .          .          .       .         .       .       .       .       .              else	
         .          .          .       .         .       .       .       .       .                  /* SubsecondTime page_datamovement_queue_delay = */ m_data_movement->computeQueueDelayTrackBytes(pkt_time + delay, m_r_bus_bandwidth.getRoundedLatency(8*m_page_size), m_page_size, QueueModel::PAGE, requester);
         .          .          .       .         .       .       .       .       .              m_extra_pages++;	
         .          .          .       .         .       .       .       .       .          } 
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Every 1000 cacheline requests, update page locality stats and determine whether to adjust cacheline queue ratio
   472,325    134,950    134,950  67,475    67,475       0  67,475  67,475       .      ++m_num_accesses;
   404,837     67,462          0       0    67,462       0       0  67,462       .      if (m_num_accesses % 5000 == 0) {
        39         39          0       0        13       0       0      13       .          UInt64 total_recent_accesses = m_num_recent_remote_accesses + m_num_recent_remote_additional_accesses + m_num_recent_local_accesses;
         .          .          .       .         .       .       .       .       .          UInt64 total_recent_pages = m_recent_accessed_pages.size();
         .          .          .       .         .       .       .       .       .          // average number of cachelines accessed per unique page
       169         39         13      13        13       0      13      13       .          double true_page_locality_measure = (double)total_recent_accesses / total_recent_pages;
        10          5          0       5         0       0       5       .       .          m_page_locality_measures.push_back(true_page_locality_measure);
         .          .          .       .         .       .       .       .       .          
         .          .          .       .         .       .       .       .       .          // counts every non-first access to a page as a "local" access
       117         39         13      13         0       0      13       .       .          double modified_page_locality_measure = (double)(m_num_recent_local_accesses + m_num_recent_remote_additional_accesses) / total_recent_accesses;
         .          .          .       .         .       .       .       .       .          // counts every non-first access to a page that wasn't accessed again via the cacheline queue as a "local" access
        78          0         13       .         .       .       .       .       .          double modified2_page_locality_measure = (double)m_num_recent_local_accesses / total_recent_accesses;
        10          5          0       5         0       0       5       .       .          m_modified_page_locality_measures.push_back(modified_page_locality_measure);
        10          5          .       .         .       .       .       .       .          m_modified2_page_locality_measures.push_back(modified2_page_locality_measure);
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          // Adjust cl queue fraction if needed
         .          .          .       .         .       .       .       .       .          double cacheline_queue_utilization_percentage;
        52         39          0      13         0       0      13       .       .          if (m_r_partition_queues == 1)
         .          .          .       .         .       .       .       .       .              cacheline_queue_utilization_percentage = m_data_movement_2->getCachelineQueueUtilizationPercentage(pkt_time);
         .          .          .       .         .       .       .       .       .          else
       104         52         13      21         0       0      21       .       .              cacheline_queue_utilization_percentage = m_data_movement->getCachelineQueueUtilizationPercentage(pkt_time); 
     4,662      1,683        377      26         0       0      26       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.h:QueueModelWindowedMG1Remote::getCachelineQueueUtilizationPercentage(SubsecondTime) (13x)
        39         26          0      13         0       0      13       .       .          if (m_use_dynamic_cl_queue_fraction_adjustment && m_r_partition_queues != 0 && (m_data_movement->getPageQueueUtilizationPercentage(pkt_time) > 0.8 || cacheline_queue_utilization_percentage > 0.8)) {
         .          .          .       .         .       .       .       .       .              // Consider adjusting m_r_cacheline_queue_fraction
         .          .          .       .         .       .       .       .       .              // 0.2 is chosen as the "baseline" cacheline queue fraction, 0.025 is chosen as a step size
         .          .          .       .         .       .       .       .       .              if (true_page_locality_measure > 40 + std::max(0.0, (0.2 - m_r_cacheline_queue_fraction) * 100)) {
         .          .          .       .         .       .       .       .       .                  // Page locality high, increase prioritization of cachelines
         .          .          .       .         .       .       .       .       .                  m_r_cacheline_queue_fraction -= 0.025;
         .          .          .       .         .       .       .       .       .                  if (m_r_cacheline_queue_fraction < 0.1)  // min cl queue fraction
         .          .          .       .         .       .       .       .       .                      m_r_cacheline_queue_fraction = 0.1;
         .          .          .       .         .       .       .       .       .                  else
         .          .          .       .         .       .       .       .       .                      ++m_r_cacheline_queue_fraction_decreased;
         .          .          .       .         .       .       .       .       .              } else if (true_page_locality_measure < 20 - std::max(0.0, (m_r_cacheline_queue_fraction - 0.2) * 50)) {
         .          .          .       .         .       .       .       .       .                  // Page locality low, increase prioritization of cachelines
         .          .          .       .         .       .       .       .       .                  m_r_cacheline_queue_fraction += 0.025;
         .          .          .       .         .       .       .       .       .                  if (m_r_cacheline_queue_fraction > 0.6)  // max cl queue fraction (for now)
         2          0          0       2         0       0       2       .       .                      m_r_cacheline_queue_fraction = 0.6;
         .          .          .       .         .       .       .       .       .                  else
         .          .          .       .         .       .       .       .       .                      ++m_r_cacheline_queue_fraction_increased;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .              updateBandwidth();
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Update stats
         .          .          .       .         .       .       .       .       .              if (m_r_cacheline_queue_fraction < m_min_r_cacheline_queue_fraction) {
         .          .          .       .         .       .       .       .       .                  m_min_r_cacheline_queue_fraction = m_r_cacheline_queue_fraction;
-- line 1398 ----------------------------------------
-- line 1400 ----------------------------------------
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .              if (m_r_cacheline_queue_fraction > m_max_r_cacheline_queue_fraction) {
         .          .          .       .         .       .       .       .       .                  m_max_r_cacheline_queue_fraction = m_r_cacheline_queue_fraction;
         .          .          .       .         .       .       .       .       .                  m_max_r_cacheline_queue_fraction_stat_scaled = m_max_r_cacheline_queue_fraction * 10000;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          // Reset variables
        26         13         13      13         0       0      13       .       .          m_num_recent_remote_accesses = 0;
        13          0         13       .         .       .       .       .       .          m_num_recent_remote_additional_accesses = 0;   // For cacheline queue requests made on inflight pages. Track this separately since they could be counted as either "remote" or "local" cacheline accesses
        13          0         13       .         .       .       .       .       .          m_num_recent_local_accesses = 0;
         .          .          .       .         .       .       .       .       .          m_recent_accessed_pages.clear();
         .          .          .       .         .       .       .       .       .          // m_recent_access_count_begin_time = Sim()->getClockSkewMinimizationServer()->getGlobalTime();
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      if (!m_recent_accessed_pages.count(phys_page)) {
         .          .          .       .         .       .       .       .       .          m_recent_accessed_pages.insert(phys_page);
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Should we enable a remote access?
   674,750    404,850     67,475 133,148         3       0 133,148       .       .      if (m_enable_remote_mem && isRemoteAccess(address, requester, access_type)) {
58,621,970 21,033,405  2,768,633 1,746,352 9,160,354  26,232 1,746,352 9,098,571  25,550  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::isRemoteAccess(unsigned long, int, DramCntlrInterface::access_t) (67,475x)
    51,405     17,135          0       0     3,041       .       .       .       .          if (access_type == DramCntlrInterface::READ) {
    29,553     17,135     12,418  12,418     7,480  12,418  12,418       0  12,418              ++m_remote_reads;
         .          .          .       .         .       .       .       .       .          } else {  // access_type == DramCntlrInterface::WRITE
     9,434          0      4,717   4,717         0   4,717   4,717       0   4,717              ++m_remote_writes;
         .          .          .       .         .       .       .       .       .          }
    34,270     17,135     17,135   4,717         0   4,001   4,717       .       .          ++m_num_recent_remote_accesses;
         .          .          .       .         .       .       .       .       .          //	printf("Remote access: %d\n",m_remote_reads); 
   205,620    137,080     51,405  16,990         .       .       .       .       .          return (getAccessLatencyRemote(pkt_time, pkt_size, requester, address, access_type, perf)); 
26,764,546,834 6,273,753,810 2,698,019,884 8,187,434 249,572,291 4,565,465 8,029,041 35,042,424 2,386,459  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::getAccessLatencyRemote(SubsecondTime, unsigned long, int, unsigned long, DramCntlrInterface::access_t, ShmemPerf*) (17,135x)
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      // m_local_reads_remote_origin
         .          .          .       .         .       .       .       .       .      if (m_local_pages_remote_origin.count(phys_page)) {
    50,329          0     50,329       .         .       .       .       .       .          m_local_pages_remote_origin[phys_page] += 1;
   150,987     50,329          0  50,329         0       0  50,329       .       .          if (access_type == DramCntlrInterface::READ) {
    93,605     50,329     43,276       0         0       2       .       .       .              ++m_local_reads_remote_origin;
         .          .          .       .         .       .       .       .       .          } else {  // access_type == DramCntlrInterface::WRITE
    14,106          0      7,053   7,053         0   7,053   7,053       0   7,053              ++m_local_writes_remote_origin;
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
   201,360     50,340     50,340  50,351         0       0  50,351       .       .      m_moved_pages_no_access_yet.remove(phys_page);  // there has been a local access to phys_page
303,661,777 129,780,129    494,214   5,172 37,731,545  28,315   5,172 36,746,427  13,119  => /usr/include/c++/9/bits/list.tcc:std::__cxx11::list<unsigned long, std::allocator<unsigned long> >::remove(unsigned long const&) (50,340x)
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // pkt_size is in 'Bytes'
         .          .          .       .         .       .       .       .       .      // m_dram_bandwidth is in 'Bits per clock cycle'
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // // Calculate address mapping inside the DIMM
         .          .          .       .         .       .       .       .       .      // UInt32 channel, rank, bank_group, bank, column;
         .          .          .       .         .       .       .       .       .      // UInt64 dram_page;
         .          .          .       .         .       .       .       .       .      // parseDeviceAddress(address, channel, rank, bank_group, bank, column, dram_page);
-- line 1446 ----------------------------------------
-- line 1531 ----------------------------------------
         .          .          .       .         .       .       .       .       .      // SubsecondTime ddr_processing_time = m_bus_bandwidth.getRoundedLatency(8 * pkt_size); // bytes to bits
         .          .          .       .         .       .       .       .       .      // //std::cout << m_bus_bandwidth.getRoundedLatency(8*pkt_size) << std::endl;  
         .          .          .       .         .       .       .       .       .      // SubsecondTime ddr_queue_delay = m_queue_model.size() ? m_queue_model[channel]->computeQueueDelay(t_now, ddr_processing_time, requester) : SubsecondTime::Zero();
         .          .          .       .         .       .       .       .       .      // t_now += ddr_queue_delay;
         .          .          .       .         .       .       .       .       .      // perf->updateTime(t_now, ShmemPerf::DRAM_QUEUE);
         .          .          .       .         .       .       .       .       .      // t_now += ddr_processing_time;
         .          .          .       .         .       .       .       .       .      // perf->updateTime(t_now, ShmemPerf::DRAM_BUS);
         .          .          .       .         .       .       .       .       .     
   453,060    201,360    151,020       0    36,643       .       .       .       .      SubsecondTime cacheline_hw_access_latency = getDramAccessCost(pkt_time, pkt_size, requester, address, perf, false);
291,345,594 104,916,930 38,663,551 5,525,259 15,468,244 731,922 5,525,259 14,314,946 579,632  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/dram_perf_model_disagg.cc:DramPerfModelDisagg::getDramAccessCost(SubsecondTime, unsigned long, int, unsigned long, ShmemPerf*, bool) (50,340x)
    50,340     50,340          .       .         .       .       .       .       .      m_total_local_dram_hardware_latency += cacheline_hw_access_latency;
         .          .          .       .         .       .       .       .       .      SubsecondTime t_now = pkt_time + cacheline_hw_access_latency;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      // Update Memory Counters? 
         .          .          .       .         .       .       .       .       .      //queue_delay = ddr_queue_delay;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .      SubsecondTime t_remote_queue_request = t_now;  // time of making queue request (after DRAM hardware access cost added)
         .          .          .       .         .       .       .       .       .  
    50,340          0     50,340       0         0  40,619       .       .       .      ++m_num_recent_local_accesses;
    11,706      7,804          0   3,902         0       0   3,902       .       .      if ((m_inflight_pages.find(phys_page) == m_inflight_pages.end()) || m_r_enable_selective_moves) {
         .          .          .       .         .       .       .       .       .          // The phys_page is not included in m_inflight_pages or m_r_enable_selective_moves is true, then total access latency = t_now - pkt_time
         .          .          .       .         .       .       .       .       .          SubsecondTime access_latency = t_now - pkt_time;
         .          .          .       .         .       .       .       .       .          m_total_local_access_latency += access_latency;
         .          .          .       .         .       .       .       .       .          m_total_access_latency += access_latency;
         .          .          .       .         .       .       .       .       .          // LOG_PRINT("getAccessLatency branch 1: %lu ns", access_latency.getNS());
         .          .          .       .         .       .       .       .       .          return access_latency;
         .          .          .       .         .       .       .       .       .      } else {
         .          .          .       .         .       .       .       .       .          // The phys_age is an inflight page and m_r_enable_selective_moves is false
         .          .          .       .         .       .       .       .       .          //SubsecondTime current_time = std::min(Sim()->getClockSkewMinimizationServer()->getGlobalTime(), t_now);
    31,374     11,706      2,966   6,868         0       0   6,868       .       .          SubsecondTime access_latency = m_inflight_pages[phys_page] > t_now ? (m_inflight_pages[phys_page] - pkt_time) : (t_now - pkt_time);
    89,570     28,022      2,966   5,932         0       0   5,932       .       .  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, SubsecondTime, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SubsecondTime> > >::operator[](unsigned long const&) (2,966x)
         .          .          .       .         .       .       .       .       .  
    11,864          .          .       .         .       .       .       .       .          if (access_latency > (t_now - pkt_time)) {
         .          .          .       .         .       .       .       .       .              // The page is still in transit from remote to local memory
     5,932      2,966      2,966   2,966         0   2,966   2,966       0   2,966              m_inflight_hits++; 
         .          .          .       .         .       .       .       .       .  
     8,898      2,966          .       .         .       .       .       .       .              if (m_r_partition_queues != 0) {
         .          .          .       .         .       .       .       .       .                  double cacheline_queue_utilization_percentage;
         .          .          .       .         .       .       .       .       .                  if (m_r_partition_queues == 1)
         .          .          .       .         .       .       .       .       .                      cacheline_queue_utilization_percentage = m_data_movement_2->getCachelineQueueUtilizationPercentage(t_now);
         .          .          .       .         .       .       .       .       .                  else
         .          .          .       .         .       .       .       .       .                      cacheline_queue_utilization_percentage = m_data_movement->getCachelineQueueUtilizationPercentage(t_now);
         .          .          .       .         .       .       .       .       .                  if (cacheline_queue_utilization_percentage > m_r_cacheline_queue_utilization_threshold) {
         .          .          .       .         .       .       .       .       .                      // Can't make additional cacheline request
         .          .          .       .         .       .       .       .       .                      ++m_redundant_moves_type2_cancelled_datamovement_queue_full;
-- line 1573 ----------------------------------------
-- line 1713 ----------------------------------------
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .          m_total_local_access_latency += access_latency;
         .          .          .       .         .       .       .       .       .          m_total_access_latency += access_latency;
         .          .          .       .         .       .       .       .       .          // LOG_PRINT("getAccessLatency branch 2: %lu ns", access_latency.getNS());
         .          .          .       .         .       .       .       .       .          return access_latency;  
         .          .          .       .         .       .       .       .       .      }
   809,700    674,750          0  21,037    82,924       0  21,037       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  bool
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::isRemoteAccess(IntPtr address, core_id_t requester, DramCntlrInterface::access_t access_type) 
   944,650     67,475    472,325  67,475         0       0  67,475       .       .  {
   269,900    134,950          .       .         .       .       .       .       .      UInt64 num_local_pages = m_localdram_size/m_page_size;
   134,950     67,475          0  67,475         0       0  67,475       .       .      if (m_r_cacheline_gran) // When we perform moves at cacheline granularity (should be disabled by default)
    67,475          .          .       .         .       .       .       .       .          num_local_pages = m_localdram_size/m_cache_line_size;  // Assuming 64bit cache line
         .          .          .       .         .       .       .       .       .  
   607,275          0    134,950  67,475         0       0  67,475       .       .      UInt64 phys_page =  address & ~((UInt64(1) << floorLog2(m_page_size)) - 1);
 1,349,500     67,475          .       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (67,475x)
   134,950     67,475          .       .         .       .       .       .       .      if (m_r_cacheline_gran) 
         .          .          .       .         .       .       .       .       .          phys_page =  address & ~((UInt64(1) << floorLog2(m_cache_line_size)) - 1);
         .          .          .       .         .       .       .       .       .  
   202,425     67,475          .       .         .       .       .       .       .      if (m_r_mode == 0 || m_r_mode == 4) { // Static partitioning: no data movement and m_r_partitioning_ratio decides how many go where
         .          .          .       .         .       .       .       .       .          if (std::find(m_local_pages.begin(), m_local_pages.end(), phys_page) != m_local_pages.end())
         .          .          .       .         .       .       .       .       .              return false;
         .          .          .       .         .       .       .       .       .          else if (std::find(m_remote_pages.begin(), m_remote_pages.end(), phys_page) != m_remote_pages.end())
         .          .          .       .         .       .       .       .       .              return true;
         .          .          .       .         .       .       .       .       .          else if ( (unsigned int)(rand() % 100) < m_r_partitioning_ratio) {
         .          .          .       .         .       .       .       .       .              m_local_pages.push_back(phys_page);
    43,283          0          0  43,283         0       0  43,283       .       .              return false;
         .          .          .       .         .       .       .       .       .          } 
         .          .          .       .         .       .       .       .       .          else {
         .          .          .       .         .       .       .       .       .              m_remote_pages.push_back(phys_page);
         .          .          .       .         .       .       .       .       .              return true; 
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .      }
   472,325          0          0  67,475         0       0  67,475       .       .      else if (m_r_mode == 1 || m_r_mode == 2 || m_r_mode == 3 || m_r_mode == 5) {  // local DRAM as a cache 
   168,147     67,475          0       0    67,475       0       0  67,475       .          if (std::find(m_local_pages.begin(), m_local_pages.end(), phys_page) != m_local_pages.end()) { // Is it in local DRAM?
   201,344          0     50,336       .         .       .       .       .       .              m_local_pages.remove(phys_page); // LRU
 7,856,196  2,472,992  1,055,968 742,497   517,821  24,531 742,497 517,811  24,531  => /usr/include/c++/9/bits/list.tcc:std::__cxx11::list<unsigned long, std::allocator<unsigned long> >::remove(unsigned long const&) (50,336x)
         .          .          .       .         .       .       .       .       .              m_local_pages.push_back(phys_page);
   100,672          .          .       .         .       .       .       .       .              if (access_type == DramCntlrInterface::WRITE) {
    28,212          0      7,053       .         .       .       .       .       .                  m_dirty_pages.remove(phys_page);
   722,699    217,935    115,297     580     8,213      98     580   8,212      98  => /usr/include/c++/9/bits/list.tcc:std::__cxx11::list<unsigned long, std::allocator<unsigned long> >::remove(unsigned long const&) (7,053x)
         .          .          .       .         .       .       .       .       .                  m_dirty_pages.push_back(phys_page);
         .          .          .       .         .       .       .       .       .              }
     7,053          .          .       .         .       .       .       .       .              return false;
         .          .          .       .         .       .       .       .       .          }
    49,607     17,139          0  17,139    17,139       0  17,139  17,139       .          else if (std::find(m_remote_pages.begin(), m_remote_pages.end(), phys_page) != m_remote_pages.end()) {	
         .          .          .       .         .       .       .       .       .              // printf("Remote page found: %lx\n", phys_page);
    48,702     16,234          0       0     2,502       .       .       .       .              if (m_use_throttled_pages_tracker && m_use_ideal_page_throttling && m_throttled_pages_tracker.count(phys_page)) {
         .          .          .       .         .       .       .       .       .                  // This is a previously throttled page
         .          .          .       .         .       .       .       .       .                  if (m_moved_pages_no_access_yet.size() > 0) {
         .          .          .       .         .       .       .       .       .                      UInt64 other_page = m_moved_pages_no_access_yet.front();  // for simplicity, choose first element
         .          .          .       .         .       .       .       .       .                      m_moved_pages_no_access_yet.pop_front();
         .          .          .       .         .       .       .       .       .                      // Do swap: mimic procedure for evicting other_page and replacing it with phys_page
         .          .          .       .         .       .       .       .       .                      // other_page hasn't been accessed yet so no need to check if it's dirty
         .          .          .       .         .       .       .       .       .                      m_local_pages.remove(other_page);
         .          .          .       .         .       .       .       .       .                      m_local_pages_remote_origin.erase(other_page);
-- line 1768 ----------------------------------------
-- line 1794 ----------------------------------------
         .          .          .       .         .       .       .       .       .                      return false;  // After swap, this is now a local access
         .          .          .       .         .       .       .       .       .                  } else {
         .          .          .       .         .       .       .       .       .                      ++m_ideal_page_throttling_swap_unavailable;
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .              return true;
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .          else {
     2,715        905          0     905       161       0     905       .       .              if (m_remote_init) { // Assuming all pages start off in remote memory
         .          .          .       .         .       .       .       .       .                  m_remote_pages.push_back(phys_page); 
         .          .          .       .         .       .       .       .       .                  //    printf("Remote page found: %lx\n", phys_page); 
         .          .          .       .         .       .       .       .       .                  return true;
         .          .          .       .         .       .       .       .       .              } else {
     1,810        905          0       0       238       .       .       .       .                  if (m_local_pages.size() < num_local_pages) {
         .          .          .       .         .       .       .       .       .                      m_local_pages.push_back(phys_page);
         8          .          .       .         .       .       .       .       .                      return false; 
         .          .          .       .         .       .       .       .       .                  } 
         .          .          .       .         .       .       .       .       .                  else {
         .          .          .       .         .       .       .       .       .                      m_remote_pages.push_back(phys_page); 
         .          .          .       .         .       .       .       .       .                      // printf("Remote page created: %lx\n", phys_page); 
       901          .          .       .         .       .       .       .       .                      return true;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }  
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      return false;  
   809,700    607,275          0  24,192    21,353       0  24,192       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  SubsecondTime 
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::possiblyEvict(UInt64 phys_page, SubsecondTime t_now, core_id_t requester) 
   254,850     16,990    135,920  16,990     6,654   7,632  16,990       .       .  {
         .          .          .       .         .       .       .       .       .      // Important note: phys_page is the current physical page being accessed before the call to this function,
         .          .          .       .         .       .       .       .       .      // NOT the page to be evicted!
         .          .          .       .         .       .       .       .       .      // This function can only evict one page per function call
         .          .          .       .         .       .       .       .       .      SubsecondTime sw_overhead = SubsecondTime::Zero();
         .          .          .       .         .       .       .       .       .      SubsecondTime evict_compression_latency = SubsecondTime::Zero();
         .          .          .       .         .       .       .       .       .      UInt64 evicted_page; 
         .          .          .       .         .       .       .       .       .  
    33,980     33,980          .       .         .       .       .       .       .      UInt64 num_local_pages = m_localdram_size/m_page_size;
    33,980     16,990          0  16,990         0       0  16,990       .       .      if (m_r_cacheline_gran)
         .          .          .       .         .       .       .       .       .          num_local_pages = m_localdram_size/m_cache_line_size;
         .          .          .       .         .       .       .       .       .          
    33,980          0     16,990       .         .       .       .       .       .      QueueModel::request_t queue_request_type = m_r_cacheline_gran ? QueueModel::CACHELINE : QueueModel::PAGE;
         .          .          .       .         .       .       .       .       .      SubsecondTime t_remote_queue_request = t_now;  // Use this instead of incrementing t_now throughout, if need to send page requests in parallel
    33,980          .          .       .         .       .       .       .       .      if (m_local_pages.size() > num_local_pages) {
         .          .          .       .         .       .       .       .       .          bool found = false;
         .          .          .       .         .       .       .       .       .  
    33,980     16,990          0  16,990         0       0  16,990       .       .          if (m_r_dontevictdirty) {
         .          .          .       .         .       .       .       .       .              auto i = m_local_pages.begin();
         .          .          .       .         .       .       .       .       .              for(unsigned int k = 0; k < m_local_pages.size()/2; ++i, ++k) {
         .          .          .       .         .       .       .       .       .                  if (std::find(m_dirty_pages.begin(), m_dirty_pages.end(), *i) == m_dirty_pages.end()) {
         .          .          .       .         .       .       .       .       .                      // This is a non-dirty page
         .          .          .       .         .       .       .       .       .                      found = true;
         .          .          .       .         .       .       .       .       .                      evicted_page = *i; 
         .          .          .       .         .       .       .       .       .                      break;
         .          .          .       .         .       .       .       .       .                  }
-- line 1850 ----------------------------------------
-- line 1853 ----------------------------------------
         .          .          .       .         .       .       .       .       .              if (found) {
         .          .          .       .         .       .       .       .       .                  m_local_pages.remove(evicted_page);
         .          .          .       .         .       .       .       .       .                  m_local_pages_remote_origin.erase(evicted_page);
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          // If found==false, remove the first page
         .          .          .       .         .       .       .       .       .          if (!found) {
    33,980     16,990     16,990       0     7,643       .       .       .       .              evicted_page = m_local_pages.front(); // Evict the least recently used page
         .          .          .       .         .       .       .       .       .              m_local_pages.pop_front();
         .          .          .       .         .       .       .       .       .              m_local_pages_remote_origin.erase(evicted_page);
         .          .          .       .         .       .       .       .       .          }
    16,990          0     16,990  16,990         0  16,990  16,990       0  16,990          ++m_local_evictions; 
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .          if (m_r_simulate_sw_pagereclaim_overhead) 
         .          .          .       .         .       .       .       .       .              sw_overhead = SubsecondTime::NS() * 30000; 		
         .          .          .       .         .       .       .       .       .  
    21,092     16,990          .       .         .       .       .       .       .          if (std::find(m_dirty_pages.begin(), m_dirty_pages.end(), evicted_page) != m_dirty_pages.end()) {
         .          .          .       .         .       .       .       .       .              // The page to evict is dirty
     2,051          0      2,051       0         0   2,051       .       .       .              ++m_page_moves;
     2,051          0      2,051       .         .       .       .       .       .              ++m_writeback_pages;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Compress
     8,204      6,153      2,051   2,051         0       0   2,051       .       .              UInt32 size = m_r_cacheline_gran ? m_cache_line_size : m_page_size;
     4,102      2,051          .       .         .       .       .       .       .              if (m_use_compression)
         .          .          .       .         .       .       .       .       .              {
    32,816     18,459      8,204   2,051     8,443       0   2,051       .       .                  m_compression_model->update_bandwidth_utilization(m_data_movement->getPageQueueUtilizationPercentage(t_now));
   830,110    309,934     60,522   3,473    49,831   1,191   1,392   2,954       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.h:QueueModelWindowedMG1Remote::getPageQueueUtilizationPercentage(SubsecondTime) (2,051x)
    18,459      8,204          0   2,051         0       0   2,051       .       .                  if (m_r_partition_queues == 1 || m_r_partition_queues == 3 || m_r_partition_queues == 4)
         .          .          .       .         .       .       .       .       .                      m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_part_bandwidth, requester);
         .          .          .       .         .       .       .       .       .                  else
     4,102      4,102          .       .         .       .       .       .       .                      m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_bus_bandwidth, requester);
         .          .          .       .         .       .       .       .       .  
     4,102      2,051          .       .         .       .       .       .       .                  UInt32 gran_size = size;
         .          .          .       .         .       .       .       .       .                  UInt32 compressed_cache_lines;
    22,561      8,204      6,153   2,051     2,655       0   2,051       .       .                  SubsecondTime compression_latency = m_compression_model->compress(evicted_page, gran_size, m_core_id, &size, &compressed_cache_lines);
2,442,652,940 438,396,185 206,382,692  34,194   307,898 165,093   2,190      68   4,339  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::compress(unsigned long, unsigned long, int, unsigned int*, unsigned int*) (2,051x)
    12,306      8,204          0   2,077        30       0   2,051       .       .                  if (gran_size > size)
     8,204      2,051      2,051       0        83       .       .       .       .                      bytes_saved += gran_size - size;
         .          .          .       .         .       .       .       .       .                  else
         .          .          .       .         .       .       .       .       .                      bytes_saved -= size - gran_size;
         .          .          .       .         .       .       .       .       .   
     2,051          0      2,051   2,051         0       0   2,051       .       .                  address_to_compressed_size[evicted_page] = size;
     4,102      2,051      2,051   2,051         0       0   2,051       .       .                  address_to_num_cache_lines[evicted_page] = compressed_cache_lines;
     4,102      2,051      2,051       .         .       .       .       .       .                  evict_compression_latency += compression_latency;
         .          .          .       .         .       .       .       .       .                  m_total_compression_latency += compression_latency;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              SubsecondTime page_datamovement_queue_delay = SubsecondTime::Zero();
    12,306      6,153          0   2,051       156       0   2,051       .       .              if (m_r_simulate_datamov_overhead) { 
    20,510      8,204          0   2,077       539       0   2,051       .       .                  if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
     4,102          .          .       .         .       .       .       .       .                  } else if (m_r_partition_queues == 2) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
     4,102          .          .       .         .       .       .       .       .                  } else if (m_r_partition_queues == 3) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
     4,102          .          .       .         .       .       .       .       .                  } else if (m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         .          .          .       .         .       .       .       .       .                  } /* else if (m_r_cacheline_gran) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         .          .          .       .         .       .       .       .       .                  } */ else {
    24,612      4,102      8,204   4,102         0       0   4,102       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
 2,520,208    751,180    256,783  12,299    84,599   3,827   1,161   4,966   2,606  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.cc:QueueModelWindowedMG1Remote::computeQueueDelayTrackBytes(SubsecondTime, SubsecondTime, unsigned long, QueueModel::request_t, int, bool, unsigned long) (2,051x)
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // TODO: Currently model decompression by adding decompression latency to inflight page time
     4,102      2,051          .       .         .       .       .       .       .              if (m_use_compression)
         .          .          .       .         .       .       .       .       .              {
    18,459     10,255      2,051   2,051       369       0   2,051       .       .                  SubsecondTime decompression_latency = m_compression_model->decompress(evicted_page, address_to_num_cache_lines[evicted_page], m_core_id);
   118,958     45,122     20,510     186     1,010       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::decompress(unsigned long, unsigned int, int) (2,051x)
     4,102      4,102          0   2,051         0       0   2,051       .       .                  page_datamovement_queue_delay += decompression_latency;
         .          .          .       .         .       .       .       .       .                  m_total_decompression_latency += decompression_latency;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
     6,153      2,051          0       0       966       .       .       .       .              if (std::find(m_remote_pages.begin(), m_remote_pages.end(), evicted_page) == m_remote_pages.end()) {
         .          .          .       .         .       .       .       .       .                  // The page to evict is not in remote_pages
         .          .          .       .         .       .       .       .       .                  m_remote_pages.push_back(evicted_page);
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .              m_inflightevicted_pages[evicted_page] = t_remote_queue_request + evict_compression_latency + page_datamovement_queue_delay;
         .          .          .       .         .       .       .       .       .  
    44,809     14,939          0  14,939         0       0  14,939       .       .          } else if (std::find(m_remote_pages.begin(), m_remote_pages.end(), evicted_page) == m_remote_pages.end()) {
         .          .          .       .         .       .       .       .       .              // The page to evict is not dirty and not in remote memory
         .          .          .       .         .       .       .       .       .              m_remote_pages.push_back(evicted_page);
         4          0          4       0         0       4       .       .       .              ++m_page_moves;
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // Compress
        16         12          4       .         .       .       .       .       .              UInt32 size = m_r_cacheline_gran ? m_cache_line_size : m_page_size;
         8          4          0       4         0       0       4       .       .              if (m_use_compression)
         .          .          .       .         .       .       .       .       .              {
        56         36         12       4         0       0       4       .       .                  m_compression_model->update_bandwidth_utilization(m_data_movement->getPageQueueUtilizationPercentage(t_now));
     2,261        704        272      59        86      15      53      86      14  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.h:QueueModelWindowedMG1Remote::getPageQueueUtilizationPercentage(SubsecondTime) (4x)
        36         16          .       .         .       .       .       .       .                  if (m_r_partition_queues == 1 || m_r_partition_queues == 3 || m_r_partition_queues == 4)
         .          .          .       .         .       .       .       .       .                      m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_part_bandwidth, requester);
         .          .          .       .         .       .       .       .       .                  else
         8          8          0       4         0       0       4       .       .                      m_compression_model->update_queue_model(m_data_movement, t_now, &m_r_bus_bandwidth, requester);
         .          .          .       .         .       .       .       .       .  
         4          4          .       .         .       .       .       .       .                  UInt32 gran_size = size;
         .          .          .       .         .       .       .       .       .                  UInt32 compressed_cache_lines;
        44         16         12       4         0       0       4       .       .                  SubsecondTime compression_latency = m_compression_model->compress(evicted_page, gran_size, m_core_id, &size, &compressed_cache_lines);
 4,138,722    795,743    377,856      65        59      31       0       3       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::compress(unsigned long, unsigned long, int, unsigned int*, unsigned int*) (4x)
        24         16          .       .         .       .       .       .       .                  if (gran_size > size)
        12          2          4       .         .       .       .       .       .                      bytes_saved += gran_size - size;
         .          .          .       .         .       .       .       .       .                  else
        14          2          4       4         0       0       4       .       .                      bytes_saved -= size - gran_size;
         .          .          .       .         .       .       .       .       .   
        20          4          8       4         0       0       4       .       .                  address_to_compressed_size[evicted_page] = size;
     1,512        334        234       9         5       4       3       3       4  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::operator[](unsigned long const&) (4x)
        20          4          8       .         .       .       .       .       .                  address_to_num_cache_lines[evicted_page] = compressed_cache_lines;
     1,512        334        234       0         5       4       0       3       4  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::operator[](unsigned long const&) (4x)
         4          4          .       .         .       .       .       .       .                  evict_compression_latency += compression_latency;
         .          .          .       .         .       .       .       .       .                  m_total_compression_latency += compression_latency;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              SubsecondTime page_datamovement_queue_delay = SubsecondTime::Zero();
         8          4          .       .         .       .       .       .       .              if (m_r_simulate_datamov_overhead) {
        40         16          0       8         0       0       8       .       .                  if (m_r_partition_queues == 1) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         8          .          .       .         .       .       .       .       .                  } else if (m_r_partition_queues == 2) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         8          .          .       .         .       .       .       .       .                  } else if (m_r_partition_queues == 3) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         8          0          0       4         0       0       4       .       .                  } else if (m_r_partition_queues == 4) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_part_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         .          .          .       .         .       .       .       .       .                  } /* else if (m_r_cacheline_gran) {
         .          .          .       .         .       .       .       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
         .          .          .       .         .       .       .       .       .                  } */ else {
        68         16         16       8         0       0       8       .       .                      page_datamovement_queue_delay = m_data_movement->computeQueueDelayTrackBytes(t_remote_queue_request + evict_compression_latency, m_r_bus_bandwidth.getRoundedLatency(8*size), size, queue_request_type, requester);
     4,134      1,021        619      22         6      10       2       0       8  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1_remote.cc:QueueModelWindowedMG1Remote::computeQueueDelayTrackBytes(SubsecondTime, SubsecondTime, unsigned long, QueueModel::request_t, int, bool, unsigned long) (4x)
         .          .          .       .         .       .       .       .       .                  }
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .              // TODO: Currently model decompression by adding decompression latency to inflight page time
         8          4          0       4         0       0       4       .       .              if (m_use_compression)
         .          .          .       .         .       .       .       .       .              {
        72         36         20       8         0       0       8       .       .                  SubsecondTime decompression_latency = m_compression_model->decompress(evicted_page, address_to_num_cache_lines[evicted_page], m_core_id);
       232         88         40       .         .       .       .       .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::decompress(unsigned long, unsigned int, int) (4x)
       167         54          4       .         .       .       .       .       .  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::operator[](unsigned long const&) (4x)
         4          4          .       .         .       .       .       .       .                  page_datamovement_queue_delay += decompression_latency;
         .          .          .       .         .       .       .       .       .                  m_total_decompression_latency += decompression_latency;
         .          .          .       .         .       .       .       .       .              }
         .          .          .       .         .       .       .       .       .  
        12          0          4       .         .       .       .       .       .              m_inflightevicted_pages[evicted_page] = t_remote_queue_request + evict_compression_latency + page_datamovement_queue_delay;
     1,414        294        230      24         6       4      16       0       4  => /usr/include/c++/9/bits/stl_map.h:std::map<unsigned long, SubsecondTime, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SubsecondTime> > >::operator[](unsigned long const&) (4x)
         .          .          .       .         .       .       .       .       .          }
         .          .          .       .         .       .       .       .       .  
    50,970          0     16,990  14,939         0   5,427  14,939       .       .          m_dirty_pages.remove(evicted_page);
   604,336    203,332    117,766  41,081    20,471   4,185  41,029     855     299  => /usr/include/c++/9/bits/list.tcc:std::__cxx11::list<unsigned long, std::allocator<unsigned long> >::remove(unsigned long const&) (16,990x)
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      return sw_overhead + evict_compression_latency;  // latencies that are on the critical path
   220,870    169,900          0  17,016    15,131       0  16,990       .       .  }
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  
         .          .          .       .         .       .       .       .       .  void 
         .          .          .       .         .       .       .       .       .  DramPerfModelDisagg::possiblyPrefetch(UInt64 phys_page, SubsecondTime t_now, core_id_t requester) 
   239,890     17,135    154,215  34,270         0       0  34,270       .       .  {
         .          .          .       .         .       .       .       .       .      // Important note: phys_page is the current physical page being accessed before the call to this function,
         .          .          .       .         .       .       .       .       .      // NOT the page to be prefetched!
    34,270     17,135          0       0     7,452       .       .       .       .      if (!m_r_enable_nl_prefetcher) {
         .          .          .       .         .       .       .       .       .          return;
         .          .          .       .         .       .       .       .       .      }
         .          .          .       .         .       .       .       .       .      QueueModel::request_t queue_request_type = m_r_cacheline_gran ? QueueModel::CACHELINE : QueueModel::PAGE;
         .          .          .       .         .       .       .       .       .      SubsecondTime t_remote_queue_request = t_now;  // Use this instead of incrementing t_now throughout, to mimic sending page requests in parallel
         .          .          .       .         .       .       .       .       .      std::vector<UInt64> prefetch_page_candidates;
         .          .          .       .         .       .       .       .       .      m_prefetcher_model->pagePrefetchCandidates(phys_page, prefetch_page_candidates);
         .          .          .       .         .       .       .       .       .      for (auto it = prefetch_page_candidates.begin(); it != prefetch_page_candidates.end(); ++it) {
         .          .          .       .         .       .       .       .       .          if (m_data_movement->getPageQueueUtilizationPercentage(t_now) > m_r_page_queue_utilization_threshold) {
-- line 2006 ----------------------------------------
-- line 2080 ----------------------------------------
         .          .          .       .         .       .       .       .       .          m_local_pages.push_back(pref_page);
         .          .          .       .         .       .       .       .       .          m_local_pages_remote_origin[pref_page] = 1;
         .          .          .       .         .       .       .       .       .          if (m_r_exclusive_cache)
         .          .          .       .         .       .       .       .       .              m_remote_pages.remove(pref_page);
         .          .          .       .         .       .       .       .       .          m_inflight_pages.erase(pref_page);
         .          .          .       .         .       .       .       .       .          m_inflight_pages[pref_page] = t_remote_queue_request + page_compression_latency + page_datamovement_queue_delay;  // use max of this time with Sim()->getClockSkewMinimizationServer()->getGlobalTime() here as well?
         .          .          .       .         .       .       .       .       .          possiblyEvict(phys_page, t_remote_queue_request, requester);
         .          .          .       .         .       .       .       .       .      }
   188,485    154,215          0  17,135         0       0  17,135       .       .  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/pr_l1_pr_l2_dram_directory_msi/shmem_perf.cc
--------------------------------------------------------------------------------
Ir         Dr         Dw         I1mr   D1mr D1mw ILmr   DLmr DLmw 

-- line 62 ----------------------------------------
         .          .          .      .    .    .      .    .    .     m_core_id = core_id;
         .          .          .      .    .    .      .    .    .     m_time_begin = time;
         .          .          .      .    .    .      .    .    .     m_time_last = time;
         .          .          .      .    .    .      .    .    .     for(int i = 0; i < ShmemPerf::NUM_SHMEM_TIMES; ++i)
         .          .          .      .    .    .      .    .    .        m_times[i] = SubsecondTime::Zero();
         .          .          .      .    .    .      .    .    .  }
         .          .          .      .    .    .      .    .    .  
         .          .          .      .    .    .      .    .    .  void ShmemPerf::updateTime(SubsecondTime time, shmem_times_type_t reason)
49,391,832  6,173,979 18,521,937 67,476    0    0 67,475    .    .  {
12,347,958          .          .      .    .    .      .    .    .     LOG_ASSERT_ERROR(reason < NUM_SHMEM_TIMES, "Invalid ShmemPerf reason %d", reason);
         .          .          .      .    .    .      .    .    .  
         .          .          .      .    .    .      .    .    .     // Ignore duplicate paths or updates using stale pointers
12,347,958          .          .      .    .    .      .    .    .     if (time > m_time_last)
         .          .          .      .    .    .      .    .    .     {
         .          .          .      .    .    .      .    .    .        m_times[reason] += time - m_time_last;
         .          .          .      .    .    .      .    .    .        m_time_last = time;
         .          .          .      .    .    .      .    .    .     }
46,801,148 30,869,895          0 59,658    0    0 59,658    .    .  }
         .          .          .      .    .    .      .    .    .  
         .          .          .      .    .    .      .    .    .  void ShmemPerf::updatePacket(NetPacket& packet)
         .          .          .      .    .    .      .    .    .  {
         .          .          .      .    .    .      .    .    .     if (packet.time > m_time_last)
         .          .          .      .    .    .      .    .    .     {
         .          .          .      .    .    .      .    .    .        m_times[NOC_QUEUE] += packet.queue_delay;
         .          .          .      .    .    .      .    .    .        m_time_last += packet.queue_delay;
         .          .          .      .    .    .      .    .    .        updateTime(packet.time, NOC_BASE);
-- line 87 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc
--------------------------------------------------------------------------------
Ir            Dr          Dw          I1mr   D1mr   D1mw    ILmr   DLmr   DLmw    

-- line 79 ----------------------------------------
            .           .           .      .      .       .      .      .       .      for (UInt32 i = 0; i < 24; i++) {
            .           .           .      .      .       .      .      .       .          m_total_compressed += m_compress_options[i];
            .           .           .      .      .       .      .      .       .          m_bytes_saved_per_option[i] += m_bits_saved_per_option[i] / 8;
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  SubsecondTime
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::compress(IntPtr addr, size_t data_size, core_id_t core_id, UInt32 *compressed_page_size, UInt32 *compressed_cache_lines)
      361,855      38,090     190,450 33,987      0       0 33,980      .       .  {
            .           .           .      .      .       .      .      .       .      // Get Data
       95,225      38,090      38,090 16,993      0       0 16,990      .       .      Core *core = Sim()->getCoreManager()->getCoreFromID(core_id);
      704,665     247,585      95,225 67,960 74,563   1,624 67,960 67,960       .  => /home/k.huang/DisaggregatedSystemsUofT/common/system/core_manager.cc:CoreManager::getCoreFromID(int) (19,045x)
            .           .           .      .      .       .      .      .       .      // UInt64 page = addr & ~((UInt64(1) << floorLog2(m_page_size)) - 1);
            .           .           .      .      .       .      .      .       .      // core->getApplicationData(Core::NONE, Core::READ, page, m_data_buffer, data_size, Core::MEM_MODELED_NONE);
       57,135      19,045           .      .      .       .      .      .       .      if (data_size == m_cache_line_size)  { // If we compress in cache_line granularity
       76,180      19,045      19,045      .      .       .      .      .       .          core->getApplicationData(Core::NONE, Core::READ, addr, m_data_buffer, data_size, Core::MEM_MODELED_NONE); // Assume addr already points to page or cache line
   35,070,532  10,828,220   6,836,323 1,747,680 2,155,165 1,271,406 1,721,191 1,942,576 1,140,391  => /home/k.huang/DisaggregatedSystemsUofT/common/core/core.cc:Core::getApplicationData(Core::lock_signal_t, Core::mem_op_t, unsigned long, char*, unsigned int, Core::MemModeled, unsigned long, SubsecondTime, bool) (19,045x)
            .           .           .      .      .       .      .      .       .      } else { // If we compress in page_size granularity, we shift to move to the start_addr of the corresponding page
      133,315      19,045      19,045 16,990      0       0 16,990      .       .          UInt64 page = addr & ~((UInt64(1) << floorLog2(m_page_size)) - 1);
      380,900      19,045           0      7      .       .      .      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc:floorLog2(unsigned int) (19,045x)
      133,315      19,045      76,180      0 18,021       0      0 16,990       .          core->getApplicationData(Core::NONE, Core::READ, page, m_data_buffer, data_size, Core::MEM_MODELED_NONE);
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // BDI
            .           .           .      .      .       .      .      .       .      UInt32 total_bits = 0;
            .           .           .      .      .       .      .      .       .      UInt32 total_bytes = 0;
            .           .           .      .      .       .      .      .       .      UInt32 total_compressed_cache_lines = 0;
    7,503,730   2,494,895           0 17,066    100       0 16,990      .       .      for (UInt32 i = 0; i < m_cacheline_count; i++)
            .           .           .      .      .       .      .      .       .      {
   21,939,840   4,875,520   4,875,520      2      0 151,028      0      0 135,920          m_compressed_cache_line_sizes[i] = compressCacheLine(m_data_buffer + i * m_cache_line_size, m_compressed_data_buffer + i * m_cache_line_size);
20,127,338,360 3,886,036,231 1,847,774,028 711,616 882,679 144,996 704,839 657,436 126,091  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::compressCacheLine(void*, void*) (2,437,760x)
    7,313,280   4,875,520           .      .      .       .      .      .       .          total_bits += m_compressed_cache_line_sizes[i];
   24,331,256   4,875,520           0 17,018      0       0 16,990      .       .          if ((m_compressed_cache_line_sizes[i] != ((m_cache_line_size * 8) + m_prefix_len)) && (m_compressed_cache_line_sizes[i] < ((m_cache_line_size * 8) + ((m_cache_line_size * 8) / 32) * m_prefix_len)) )
    4,852,348           .           .      .      .       .      .      .       .              total_compressed_cache_lines++;
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  
       38,090           .           .      .      .       .      .      .       .      total_bytes = total_bits / 8;
       19,045           .           .      .      .       .      .      .       .      if (total_bits % 8 != 0)
       38,090           .           .      .      .       .      .      .       .          total_bytes++;
            .           .           .      .      .       .      .      .       .  
       57,135      19,045           .      .      .       .      .      .       .      if (total_bytes > m_page_size) {
           68           0          68     66      0       0     66      .       .          m_num_overflowed_pages++;
            .           .           .      .      .       .      .      .       .          total_bytes = m_page_size; // if compressed data is larger than the page_size, we sent the page in uncompressed format
          136           .           .      .      .       .      .      .       .          total_compressed_cache_lines = 0; // if page is sent uncompressed, the decompression latency is 0
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .      assert(total_bytes <= m_page_size && "[FPCBDI] Wrong compression!");
            .           .           .      .      .       .      .      .       .    
            .           .           .      .      .       .      .      .       .      // Return compressed cache lines
       38,090      19,045      19,045 16,950     36     458 16,924      .       .      *compressed_cache_lines = total_compressed_cache_lines;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // Return compressed pages size in Bytes
       38,090      19,045      19,045      0      0     547      .      .       .      *compressed_page_size = total_bytes;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // Return compression latency - All lines go over the compression pipeline
       38,090      38,090           .      .      .       .      .      .       .      ComponentLatency compress_latency(ComponentLatency(core->getDvfsDomain(), m_cacheline_count  * m_compression_latency));
            .           .           .      .      .       .      .      .       .      // Even though page might be sent uncompressed, we still need to add the compression latency
            .           .           .      .      .       .      .      .       .      return compress_latency.getLatency();
            .           .           .      .      .       .      .      .       .  
      228,540     190,450           0 17,016     67       0 16,990      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  SubsecondTime
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::decompress(IntPtr addr, UInt32 compressed_cache_lines, core_id_t core_id)
      152,360           0      57,135 17,057      0       0 16,990      .       .  {
       76,180      38,090      19,045      0     13       .      .      .       .      Core *core = Sim()->getCoreManager()->getCoreFromID(core_id);
      704,665     247,585      95,225    128  8,686       .      .      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/system/core_manager.cc:CoreManager::getCoreFromID(int) (19,045x)
       19,045      19,045           0      0      1       .      .      .       .      ComponentLatency decompress_latency(ComponentLatency(core->getDvfsDomain(), compressed_cache_lines * m_decompression_latency));
            .           .           .      .      .       .      .      .       .      return decompress_latency.getLatency();
            .           .           .      .      .       .      .      .       .  
       95,225      76,180           .      .      .       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  SInt64
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::readWord(void *ptr, UInt32 idx, UInt32 word_size) // idx: which word of input ptr to read 
   74,627,314           0           0 17,022      0       0 16,990      .       .  {
            .           .           .      .      .       .      .      .       .      SInt64 word;
  332,561,725           .           .      .      .       .      .      .       .      switch (word_size)
            .           .           .      .      .       .      .      .       .      {
            .           .           .      .      .       .      .      .       .          case 8:
   55,112,958  27,556,479           .      .      .       .      .      .       .              word = ((SInt64 *)ptr)[idx];
   27,556,479  27,556,479           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          case 4:
   53,886,606  26,943,303           0      1      1       .      .      .       .              word = ((SInt32 *)ptr)[idx];
   26,943,303  26,943,303           .      .      .       .      .      .       .              break;    
            .           .           .      .      .       .      .      .       .          case 2:
   40,255,064  20,127,532           .      .      .       .      .      .       .              word = ((SInt16 *)ptr)[idx];
   20,127,532  20,127,532           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          case 1:
            .           .           .      .      .       .      .      .       .              word = ((SInt8 *)ptr)[idx];
            .           .           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          default:
            .           .           .      .      .       .      .      .       .              fprintf(stderr,"Unknown Base Size\n");
            .           .           .      .      .       .      .      .       .              exit(1);
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      return word;
            .           .           .      .      .       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  void 
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::writeWord(void *ptr, UInt32 idx, SInt64 word, UInt32 word_size)
   19,249,434           0           0 17,017      0       0 16,990      .       .  {
   85,830,693           0           0 13,604      0       0 13,589      .       .      switch(word_size)
            .           .           .      .      .       .      .      .       .      {
            .           .           .      .      .       .      .      .       .          case 8:   
   15,719,918           0   7,859,959      0      0       4      .      .       .              ((SInt64 *)ptr)[idx] = (SInt64)word;
    7,859,959   7,859,959           .      .      .       .      .      .       .              break;          
            .           .           .      .      .       .      .      .       .          case 4:   
   10,844,326           0   5,422,163      0      0       2      .      .       .              ((SInt32 *)ptr)[idx] = (SInt32)word;
    5,422,163   5,422,163           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          case 2:
    5,850,012           0   2,925,006      0      0       1      .      .       .              ((SInt16*)ptr)[idx] = (SInt16)word;
    2,925,006   2,925,006           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          case 1:
    6,084,612           0   3,042,306  3,413      0       0  3,401      .       .              ((SInt8*)ptr)[idx] = (SInt8)word;
    3,042,306   3,042,306           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          default:
            .           .           .      .      .       .      .      .       .              fprintf(stderr,"Unknown Base Size\n");
            .           .           .      .      .       .      .      .       .              exit(1);
            .           .           .      .      .       .      .      .       .      }      
            .           .           .      .      .       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  bool
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::checkDeltaLimits(SInt64 delta, UInt32 delta_size)
   60,000,754           0           0      1      .       .      .      .       .  {
   60,000,754           0           0 17,017      0       0 16,990      .       .      bool within_limits = true;
            .           .           .      .      .       .      .      .       .      SInt8 cur_byte;
1,765,840,988  60,000,754           0      0      1       .      .      .       .      for(SInt8 j = delta_size; j < sizeof(SInt64); j++) {     
1,144,378,479           0           0      1      .       .      .      .       .          cur_byte = (delta >> (8*j)) & 0xff; // Get j-th byte from the word
            .           .           .      .      .       .      .      .       .          if (cur_byte != 0)
  882,920,494           .           .      .      .       .      .      .       .              within_limits = false;
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .      return within_limits;
            .           .           .      .      .       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  void
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::zeroValues(void* in, m_compress_info *res, void* out)
    7,313,280   2,437,760           0 17,018      0       0 16,990      .       .  {
            .           .           .      .      .       .      .      .       .      // Zero compression compresses an all-zero cache line into a bit that just indicates that the cache line is all-zero.
            .           .           .      .      .       .      .      .       .      char base;
    2,437,760           .           .      .      .       .      .      .       .      UInt32 i = 0;
    2,437,760   2,437,760           .      .      .       .      .      .       .      base = ((char*)in)[0];
    4,875,520           .           .      .      .       .      .      .       .      if (base == 0) { 
  110,617,844           .           .      .      .       .      .      .       .          for (i = 1; i < m_cache_line_size; i++)
   79,513,929  26,504,643           0  7,931      0       0  7,905      .       .              if((base - (((char*)in)[i])) != 0)
            .           .           .      .      .       .      .      .       .                  break;
            .           .           .      .      .       .      .      .       .      } 
            .           .           .      .      .       .      .      .       .  
    4,875,520           0           0  9,085      0       0  9,085      .       .      if (i == m_cache_line_size) {
      487,246           0     487,246      .      .       .      .      .       .          res->is_compressible = true;
      487,246           0     487,246      .      .       .      .      .       .          res->compressed_size = 1;
    2,436,230           .           .      .      .       .      .      .       .          writeWord(out, 0, base, sizeof(char));
    4,385,214     487,246     487,246  6,816      0       0  6,792      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::writeWord(void*, unsigned int, long, unsigned int) (487,246x)
            .           .           .      .      .       .      .      .       .      } else {
    1,950,514           0   1,950,514      0      0       3      .      .       .          res->is_compressible = false;
    3,901,028   1,950,514   1,950,514      .      .       .      .      .       .          res->compressed_size = m_cache_line_size;
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .      return;
    1,950,514   1,950,514           .      .      .       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  void
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::repeatedValues(void* in, m_compress_info *res, void* out, UInt32 k)
   87,759,360           0  39,004,160 17,019      0       0 16,990      .       .  {
            .           .           .      .      .       .      .      .       .      //  Repeated value compression checks if a cache line has the same 1/2/4/8 byte value repeated. If so, it compresses the cache line to the corresponding value
            .           .           .      .      .       .      .      .       .      SInt64 base;
            .           .           .      .      .       .      .      .       .      bool repeated;
            .           .           .      .      .       .      .      .       .      UInt32 i;
            .           .           .      .      .       .      .      .       .      repeated = true;
   46,317,440           0           0  3,465      0       0  3,396      .       .      switch(k)
            .           .           .      .      .       .      .      .       .      {
            .           .           .      .      .       .      .      .       .          case 8:   
    2,437,760   2,437,760           .      .      .       .      .      .       .              base = ((SInt64*)in)[0];
   29,038,746   2,437,760           .      .      .       .      .      .       .              for (i = 1; i < (m_cache_line_size / k); i++) 
   10,405,847   4,257,383           .      .      .       .      .      .       .                  if ((base - ((SInt64*)in)[i]) != 0) {
            .           .           .      .      .       .      .      .       .                      repeated = false;
            .           .           .      .      .       .      .      .       .                      break;
            .           .           .      .      .       .      .      .       .                  }
            .           .           .      .      .       .      .      .       .              break;          
            .           .           .      .      .       .      .      .       .          case 4:   
    4,875,520   2,437,760           0 17,018      0       0 16,990      .       .              base = ((SInt32*)in)[0];
   39,719,601   2,437,760           .      .      .       .      .      .       .              for (i = 1; i < (m_cache_line_size / k); i++) 
   17,526,525   7,817,704           .      .      .       .      .      .       .                  if ((base - ((SInt32*)in)[i]) != 0) {
            .           .           .      .      .       .      .      .       .                      repeated = false;
            .           .           .      .      .       .      .      .       .                      break;
            .           .           .      .      .       .      .      .       .                  }
            .           .           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          case 2:
    4,875,520   2,437,760           0  3,811      0       0  3,396      .       .              base = ((SInt16*)in)[0];
   58,621,377   2,437,760           .      .      .       .      .      .       .              for (i = 1; i < (m_cache_line_size / k); i++) 
   28,355,386  14,177,693           .      .      .       .      .      .       .                  if ((base - ((SInt16*)in)[i]) != 0) {
            .           .           .      .      .       .      .      .       .                      repeated = false;
            .           .           .      .      .       .      .      .       .                      break;
            .           .           .      .      .       .      .      .       .                  }
            .           .           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          case 1:
    4,875,520   2,437,760           0 17,018      0       0 16,990      .       .              base = ((SInt8*)in)[0];
   94,077,122   2,437,760           .      .      .       .      .      .       .              for (i = 1; i < (m_cache_line_size / k); i++) 
   57,193,410  27,621,448           .      .      .       .      .      .       .                  if ((base - ((SInt8*)in)[i]) != 0) {
            .           .           .      .      .       .      .      .       .                      repeated = false;
            .           .           .      .      .       .      .      .       .                      break;
            .           .           .      .      .       .      .      .       .                  }
            .           .           .      .      .       .      .      .       .              break;
            .           .           .      .      .       .      .      .       .          default:
            .           .           .      .      .       .      .      .       .              fprintf(stderr,"Unknown Base Size\n");
            .           .           .      .      .       .      .      .       .              exit(1);
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      }      
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      if (repeated == true) {
    2,067,814           0   2,067,814      .      .       .      .      .       .          res->is_compressible = true;
    2,067,814           0   2,067,814  9,589      0       0  9,561      .       .          res->compressed_size = k;
   12,406,884           0   2,067,814      .      .       .      .      .       .          writeWord(out, 0, k, sizeof(char));
   18,610,326   2,067,814   2,067,814     10      0       0     10      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::writeWord(void*, unsigned int, long, unsigned int) (2,067,814x)
    2,067,814           .           .      .      .       .      .      .       .          out = (void*)(((char*)out)+1); // Move out pointer by one byte
   10,339,070           .           .      .      .       .      .      .       .          writeWord(out, 0, base, k * sizeof(char));
   17,944,889   2,067,814   2,067,814      .      .       .      .      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::writeWord(void*, unsigned int, long, unsigned int) (2,067,814x)
            .           .           .      .      .       .      .      .       .          return;
            .           .           .      .      .       .      .      .       .      } 
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      assert(repeated == false && "[LZBDI] repeated_values() failed!");
    7,683,226           0   7,683,226 14,209      0       2 13,594      .       .      res->is_compressible = false;
   15,366,452   7,683,226   7,683,226      .      .       .      .      .       .      res->compressed_size = m_cache_line_size;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      return;
   56,438,426  46,687,386           0 13,669      0       0 13,594      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  void
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::specializedCompress(void *in, m_compress_info *res, void *out, SInt32 k, SInt32 delta_size)
  204,771,840           0 102,385,920 34,035      0       0 33,980      .       .  {
            .           .           .      .      .       .      .      .       .   
            .           .           .      .      .       .      .      .       .      UInt32 i;
            .           .           .      .      .       .      .      .       .      SInt64 base, word, delta;
            .           .           .      .      .       .      .      .       .      bool within_limits = true;
            .           .           .      .      .       .      .      .       .  
   58,506,240           0  14,626,560      .      .       .      .      .       .      base = readWord(in, 0, k);
  121,888,000  29,253,120           0 17,021      0       0 16,990      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::readWord(void*, unsigned int, unsigned int) (14,626,560x)
   87,759,360           0  14,626,560      .      .       .      .      .       .      writeWord(out, 0, base, k);
  121,888,000  14,626,560  14,626,560 27,208      0       7 27,178      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::writeWord(void*, unsigned int, long, unsigned int) (14,626,560x)
  350,705,370  63,326,415           0      1      1       .      .      .       .      for(i = 0; i < (m_cache_line_size / k); i++){
  300,003,770           0  60,000,754 17,017      0       0 16,990      .       .         word = readWord((void*)((char*)in), i, k);
  509,182,981 120,001,508           0      2      1       .      .      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::readWord(void*, unsigned int, unsigned int) (60,000,754x)
  120,001,508           .           .      .      .       .      .      .       .         delta = base - word;
            .           .           .      .      .       .      .      .       .  
  180,002,262           0  60,000,754      .      .       .      .      .       .         within_limits = checkDeltaLimits(delta, delta_size);
3,913,141,469  60,000,754           0 17,019      1       0 16,990      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::checkDeltaLimits(long, unsigned int) (60,000,754x)
  120,001,508           0           0      1      .       .      .      .       .         if (within_limits == false)
            .           .           .      .      .       .      .      .       .             break;
            .           .           .      .      .       .      .      .       .      //    else
            .           .           .      .      .       .      .      .       .      //        writeWord((void*) (((char*)out) + k * sizeof(char)), i, delta, delta_size);
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .      
            .           .           .      .      .       .      .      .       .      if(within_limits == true) {
    6,651,322   3,325,661   3,325,661      .      .       .      .      .       .          res->is_compressible = within_limits; 
   19,953,966   3,325,661   3,325,661      .      .       .      .      .       .          res->compressed_size = (UInt32) (k + (m_cache_line_size / k) * delta_size);
            .           .           .      .      .       .      .      .       .      } else {
   22,601,798  11,300,899  11,300,899      0      0       2      .      .       .          res->is_compressible = within_limits; 
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .      return; 
  117,012,480 102,385,920           0      0      1       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  UInt32 
            .           .           .      .      .       .      .      .       .  CompressionModelFPCBDI::compressCacheLine(void* in, void* out)
   34,128,640   2,437,760  17,064,320 34,036      0       0 33,980      .       .  {
            .           .           .      .      .       .      .      .       .      UInt32 i;
            .           .           .      .      .       .      .      .       .      SInt32 b, d, cur_option;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // Initial compression info
            .           .           .      .      .       .      .      .       .      m_compress_info *m_options_compress_info;
            .           .           .      .      .       .      .      .       .      char **m_options_data_buffer;
    9,751,040   2,437,760   4,875,520      .      .       .      .      .       .      m_options_compress_info = new m_compress_info[m_options];
  148,703,528  41,441,949  19,502,104 52,938 76,815       1 50,899 67,911       1  => ???:0x000000000040a010 (2,437,760x)
   12,188,800   4,875,520   2,437,760 17,017      0       0 16,990      .       .      m_options_data_buffer = new char*[m_options];
  148,703,528  41,441,949  19,502,104      0 19,008       1      0 16,989       1  => ???:0x000000000040a010 (2,437,760x)
  141,390,080  46,317,440           0 17,019      3       0 16,990      .       .      for(i = 0; i < m_options; i++) {
  175,518,720           0  43,879,680      0      0  38,101      0      0  33,980          m_options_compress_info[i].is_compressible = false;
  131,639,040  43,879,680  43,879,680      0      2       .      .      .       .          m_options_compress_info[i].compressed_size = m_cache_line_size * 8; // bytes to bits
  131,639,040           0  87,759,360      1      0  37,803      0      0  33,299          m_options_data_buffer[i] = new char[m_cache_line_size];
4,110,140,844 1,125,745,388 514,126,828  8,813 424,175  11,786  8,586 313,647   6,319  => ???:0x000000000040a010 (43,879,680x)
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      cur_option = 0;
            .           .           .      .      .       .      .      .       .      // FPC Compression - Starts at 0
            .           .           .      .      .       .      .      .       .  	UInt32 *cache_line = (UInt32*)in;
    7,313,280   2,437,760           .      .      .       .      .      .       .  	UInt32 fpc_compressed_size_bits = 0;
   14,626,560           0   7,313,280      0      0      14      .      .       .  	UInt32 mask_to_bits[6] = {3, 4, 8, 16, 16, 16};
   12,188,800   2,437,760   4,875,520 17,018      3       0 16,990      .       .      UInt8 *fpc_chosen_options = new UInt8[(m_cache_line_size * 8) / 32];
  138,953,357  41,442,122  19,502,249      2 17,196      12      2 14,068      11  => ???:0x000000000040a010 (2,437,760x)
            .           .           .      .      .       .      .      .       .  
  114,574,720   7,313,280   4,875,520 17,015      0       0 16,987      .       .  	for (int i = 0; i < (m_cache_line_size * 8) / 32; i++)
            .           .           .      .      .       .      .      .       .  	{
   19,502,080  19,502,080           0 17,018    376       0 16,990      .       .  		UInt32 word = cache_line[i];
   58,506,240           0  19,502,080      .      .       .      .      .       .          fpc_chosen_options[i] = 42;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .          bool is_pattern_matched = false;
  126,402,433           .           .      .      .       .      .      .       .  		for (int j = 0; j < 6; j++)
            .           .           .      .      .       .      .      .       .  		{
            .           .           .      .      .       .      .      .       .              // Pattern match and handle
            .           .           .      .      .       .      .      .       .              // Starting with the highest compressibility option - We include an early break if pattern is found
  284,379,781  25,465,801           0     84 25,748       0     84 23,963       .  			if (((word | mask[j]) == mask[j]) || ((int)word < 0 && word >= neg_check[j]))
            .           .           .      .      .       .      .      .       .  			{
   17,407,509           0           0 15,206      0       0 15,178      .       .                  fpc_compressed_size_bits += m_prefix_len;
   17,407,509  17,407,509           .      .      .       .      .      .       .  				fpc_compressed_size_bits += mask_to_bits[j];
            .           .           .      .      .       .      .      .       .                  is_pattern_matched = true;
   17,407,509           0  17,407,509      .      .       .      .      .       .                  fpc_chosen_options[i] = j;
            .           .           .      .      .       .      .      .       .                  //m_compress_option[j] += 1;
            .           .           .      .      .       .      .      .       .                  //m_bits_saved_per_option[j] += 32 - m_prefix_len - mask_to_bits[j];
            .           .           .      .      .       .      .      .       .                  // printf("[FPC] %d %x\n", j, word);
            .           .           .      .      .       .      .      .       .  				break;
            .           .           .      .      .       .      .      .       .  			}
            .           .           .      .      .       .      .      .       .  		}
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .          if (!is_pattern_matched)
            .           .           .      .      .       .      .      .       .          {
            .           .           .      .      .       .      .      .       .              // Handle words consisting of repeated bytes
            .           .           .      .      .       .      .      .       .              UInt32 repeated_mask = 0x000000ff;
            .           .           .      .      .       .      .      .       .              bool repeated = true;
            .           .           .      .      .       .      .      .       .              SInt8 base = word & repeated_mask;
            .           .           .      .      .       .      .      .       .              for (int j = 1; j < 4; j++)
    8,415,336           0           0  1,731      0       0  1,731      .       .                  if ((word & (repeated_mask << (j * 8))) >> (j * 8) != base) {
            .           .           .      .      .       .      .      .       .                      repeated = false;
            .           .           .      .      .       .      .      .       .                      break;
            .           .           .      .      .       .      .      .       .                  }
            .           .           .      .      .       .      .      .       .              if (repeated)
            .           .           .      .      .       .      .      .       .              {
            .           .           .      .      .       .      .      .       .                  fpc_compressed_size_bits += m_prefix_len;
    4,875,675           .           .      .      .       .      .      .       .                  fpc_compressed_size_bits += 8;
            .           .           .      .      .       .      .      .       .                  is_pattern_matched = true;
          155           0         155      .      .       .      .      .       .                  fpc_chosen_options[i] = 6;
            .           .           .      .      .       .      .      .       .                  //m_compress_ption[6] += 1;
            .           .           .      .      .       .      .      .       .                  //m_bits_saved_per_option[6] += 32 - m_prefix_len - 8;
            .           .           .      .      .       .      .      .       .                  // printf("[FPC] pattern match %x\n", word);
            .           .           .      .      .       .      .      .       .              }
            .           .           .      .      .       .      .      .       .          }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .          // None of the patterns match, so can't compress
            .           .           .      .      .       .      .      .       .          if (!is_pattern_matched)
            .           .           .      .      .       .      .      .       .          {
    4,532,176           0           0  7,343      0       0  7,343      .       .              fpc_compressed_size_bits += (32 + m_prefix_len);
    4,532,176           0   2,437,760 17,017      0       0 16,990      .       .              fpc_chosen_options[i] = 42;
            .           .           .      .      .       .      .      .       .              // printf("[FPC] uncompressed %x\n", word);
            .           .           .      .      .       .      .      .       .          }
            .           .           .      .      .       .      .      .       .  	}
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // BDI Compression - Starting at option 7
            .           .           .      .      .       .      .      .       .      cur_option = 7;
            .           .           .      .      .       .      .      .       .      // BDI-Option 0: all bytes within the cache line are equal to 0
   14,626,560   4,875,520   2,437,760 17,018     14       0 16,990      .       .      zeroValues(in, &(m_options_compress_info[cur_option]), (void*) m_options_data_buffer[cur_option]);
  227,669,605  35,768,437   5,362,766 40,850      0       3 40,772      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::zeroValues(void*, CompressionModelFPCBDI::m_compress_info*, void*) (2,437,760x)
            .           .           .      .      .       .      .      .       .      cur_option++;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // BDI-Option 1: a single value with 1-byte size granularity repeated through the cache line 
   14,626,560   2,437,760   2,437,760      .      .       .      .      .       .      repeatedValues(in, &(m_options_compress_info[cur_option]), (void*) m_options_data_buffer[cur_option], 1);
  225,857,420  47,123,528  16,088,298 71,482      0       0 70,707      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::repeatedValues(void*, CompressionModelFPCBDI::m_compress_info*, void*, unsigned int) (2,437,760x)
            .           .           .      .      .       .      .      .       .      cur_option++;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // BDI-Option 2: a single value with 2-byte size granularity repeated through the cache line 
   14,626,560   2,437,760   2,437,760      .      .       .      .      .       .      repeatedValues(in, &(m_options_compress_info[cur_option]), (void*) m_options_data_buffer[cur_option], 2);
  167,413,663  33,679,773  16,088,298  3,811      0       0  3,396      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::repeatedValues(void*, CompressionModelFPCBDI::m_compress_info*, void*, unsigned int) (2,437,760x)
            .           .           .      .      .       .      .      .       .      cur_option++;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // BDI-Option 3: a single value with 4-byte size granularity repeated through the cache line 
   14,626,560   2,437,760   2,437,760 17,265      0       0 16,990      .       .      repeatedValues(in, &(m_options_compress_info[cur_option]), (void*) m_options_data_buffer[cur_option], 4);
  124,542,921  27,319,784  16,266,489 17,050      0       2 17,022      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::repeatedValues(void*, CompressionModelFPCBDI::m_compress_info*, void*, unsigned int) (2,437,760x)
            .           .           .      .      .       .      .      .       .      cur_option++;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      // BDI-Option 4: a single value with 8-byte size granularity repeated through the cache line 
   14,626,560   2,437,760   2,437,760      .      .       .      .      .       .      repeatedValues(in, &(m_options_compress_info[cur_option]), (void*) m_options_data_buffer[cur_option], 8);
  113,257,845  23,759,463  16,266,597  3,465      0       0  3,396      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::repeatedValues(void*, CompressionModelFPCBDI::m_compress_info*, void*, unsigned int) (2,437,760x)
    2,437,760           .           .      .      .       .      .      .       .      cur_option++;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
    4,875,520   2,437,760           .      .      .       .      .      .       .      if (use_additional_options) {
            .           .           .      .      .       .      .      .       .          // Additional Options:
            .           .           .      .      .       .      .      .       .          // BDI-Option 5: base_size = 8 bytes, delta_size = 1 byte
            .           .           .      .      .       .      .      .       .          // BDI-Option 6: base_size = 8 bytes, delta_size = 2 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 7: base_size = 8 bytes, delta_size = 3 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 8: base_size = 8 bytes, delta_size = 4 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 9: base_size = 8 bytes, delta_size = 5 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 10: base_size = 8 bytes, delta_size = 6 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 11: base_size = 8 bytes, delta_size = 7 bytes
-- line 439 ----------------------------------------
-- line 451 ----------------------------------------
            .           .           .      .      .       .      .      .       .      } else {
            .           .           .      .      .       .      .      .       .          // Original Options:
            .           .           .      .      .       .      .      .       .          // BDI-Option 5: base_size = 8 bytes, delta_size = 1 byte
            .           .           .      .      .       .      .      .       .          // BDI-Option 6: base_size = 8 bytes, delta_size = 2 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 7: base_size = 8 bytes, delta_size = 4 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 8: base_size = 4 bytes, delta_size = 1 byte
            .           .           .      .      .       .      .      .       .          // BDI-Option 9: base_size = 4 bytes, delta_size = 2 bytes
            .           .           .      .      .       .      .      .       .          // BDI-Option 10: base_size = 2 bytes, delta_size = 1 byte
   56,068,480           0   9,751,040      .      .       .      .      .       .          for (b = 8; b >= 2; b /= 2) {
  175,518,720  43,879,680   7,313,280 34,036      1       0 33,980      .       .              for(d = 1; d <= (b/2); d *= 2){
   29,253,120  14,626,560           0      0      1       .      .      .       .                  assert(cur_option < m_options);
  102,385,920  14,626,560  29,253,120      0      1       .      .      .       .                  specializedCompress(in, &(m_options_compress_info[cur_option]), (void*)m_options_data_buffer[cur_option], b, d);
6,254,071,874 407,546,498 284,219,329 112,304      4       9 112,128      .       .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/compression_model_fpcbdi.cc:CompressionModelFPCBDI::specializedCompress(void*, CompressionModelFPCBDI::m_compress_info*, void*, int, int) (14,626,560x)
   14,626,560           0           0      1      .       .      .      .       .                  cur_option++;
            .           .           .      .      .       .      .      .       .              }
            .           .           .      .      .       .      .      .       .          }
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  
    7,313,280   2,437,760           0 17,018      0       0 16,990      .       .      UInt32 bdi_compressed_size_bits = (UInt32) m_cache_line_size * 8;
    4,875,520   2,437,760           .      .      .       .      .      .       .      UInt8 bdi_chosen_option = 42; // If chosen_option == 42, cache line is not compressible (leave it uncompressed)
   97,510,400   4,875,520           0 30,628      0       0 30,584      .       .      for(i = 7; i < m_options; i++) {
   53,630,720  26,815,360           0      0      1       .      .      .       .          if(m_options_compress_info[i].is_compressible == true){
   23,522,884   5,880,721           0  3,408      0       0  3,396      .       .              if((m_options_compress_info[i].compressed_size * 8) < bdi_compressed_size_bits){
            .           .           .      .      .       .      .      .       .                  bdi_compressed_size_bits = (m_options_compress_info[i].compressed_size * 8);
    1,164,436           .           .      .      .       .      .      .       .                  bdi_chosen_option = i; // Update chosen option
            .           .           .      .      .       .      .      .       .              }
            .           .           .      .      .       .      .      .       .          }
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .      // Add prefix len needed for decompression
    2,437,760           .           .      .      .       .      .      .       .      bdi_compressed_size_bits += m_prefix_len;
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      UInt32 compressed_size_bits = 0;
            .           .           .      .      .       .      .      .       .      // Select best option between BDI and FPC
   10,868,764   2,437,760     558,862  3,532      0       0  3,520      .       .      if(fpc_compressed_size_bits < bdi_compressed_size_bits) { // FPC is selected
            .           .           .      .      .       .      .      .       .          compressed_size_bits = fpc_compressed_size_bits;
   48,851,193           .           .      .      .       .      .      .       .  	    for (int i = 0; i < (m_cache_line_size * 8) / 32; i++) {
   45,093,552  15,031,184           0      0      1       .      .      .       .              if(fpc_chosen_options[i] < 6) {
   26,990,158           0  13,495,079      0      0  18,155      0      0  16,560                  m_compress_options[fpc_chosen_options[i]]++;
   65,253,704  15,373,977  13,495,079 16,584      0  18,146 16,560      0  16,560                  m_bits_saved_per_option[fpc_chosen_options[i]] += 32 - m_prefix_len - mask_to_bits[fpc_chosen_options[i]]; 
    3,072,210           .           .      .      .       .      .      .       .              } else if (fpc_chosen_options[i] == 6) {
          310           0         155      .      .       .      .      .       .                  m_compress_options[fpc_chosen_options[i]]++;
    5,636,849           0         155      .      .       .      .      .       .                  m_bits_saved_per_option[fpc_chosen_options[i]] += 32 - m_prefix_len - 8; 
            .           .           .      .      .       .      .      .       .              } else {
    3,071,900           .           .      .      .       .      .      .       .                  assert(fpc_chosen_options[i] == 42); // Uncompressed word
            .           .           .      .      .       .      .      .       .              }
            .           .           .      .      .       .      .      .       .          }
            .           .           .      .      .       .      .      .       .      } else { // BDI is selected
            .           .           .      .      .       .      .      .       .          compressed_size_bits = bdi_compressed_size_bits;
            .           .           .      .      .       .      .      .       .          // Statistics
    1,117,724           0           0  9,796      0       0  9,768      .       .          if(bdi_chosen_option != 42) {
    1,094,552           .           .      .      .       .      .      .       .              assert(bdi_chosen_option >= 7);
    1,094,552           0     547,276      0      0  10,559      0      0   9,671              m_compress_options[bdi_chosen_option]++;
    1,094,552           0     547,276      0      0  10,386      0      0   9,671              m_bits_saved_per_option[bdi_chosen_option] += ((m_cache_line_size * 8) - bdi_compressed_size_bits); 
            .           .           .      .      .       .      .      .       .          }
            .           .           .      .      .       .      .      .       .      }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
  135,396,836  43,879,680           0 13,486      0       0 13,470      .       .      for(i = 0; i < m_options; i++) {
  219,398,400  43,879,680  43,879,680      0     16       .      .      .       .          delete [] m_options_data_buffer[i];
5,164,266,035 1,406,296,782 445,751,661 60,606 296,906      18 58,440 214,306      18  => ???:0x000000000040aa20 (43,879,680x)
            .           .           .      .      .       .      .      .       .      }
    4,875,520   2,437,760   2,437,760 17,018      0       0 16,990      .       .      delete [] m_options_compress_info;
  231,587,200  65,819,520  26,815,360      0      9       0      0      1       .  => ???:0x000000000040aa20 (2,437,760x)
    4,875,520           0   2,437,760      .      .       .      .      .       .      delete [] m_options_data_buffer;
  231,587,200  65,819,520  26,815,360      .      .       .      .      .       .  => ???:0x000000000040aa20 (2,437,760x)
    4,875,520   2,437,760   2,437,760      .      .       .      .      .       .      delete [] fpc_chosen_options;
  231,587,225  65,819,526  26,815,359      0 22,393       0      0  6,551       .  => ???:0x000000000040aa20 (2,437,760x)
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .      return compressed_size_bits; 
   29,253,120  24,377,600           0      0      6       .      .      .       .  }
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  
            .           .           .      .      .       .      .      .       .  // UInt32 
            .           .           .      .      .       .      .      .       .  // CompressionModelFPCBDI::decompressCacheLine(void *in, void *out)
            .           .           .      .      .       .      .      .       .  // {
            .           .           .      .      .       .      .      .       .  //     char chosen_option;
            .           .           .      .      .       .      .      .       .  //     UInt32 i;
-- line 523 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_list.h
--------------------------------------------------------------------------------
Ir          Dr          Dw          I1mr    D1mr       D1mw   ILmr    DLmr       DLmw   

-- line 209 ----------------------------------------
          .           .           .       .          .      .       .          .      .        operator*() const _GLIBCXX_NOEXCEPT
          .           .           .       .          .      .       .          .      .        { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        pointer
          .           .           .       .          .      .       .          .      .        operator->() const _GLIBCXX_NOEXCEPT
          .           .           .       .          .      .       .          .      .        { return static_cast<_Node*>(_M_node)->_M_valptr(); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        _Self&
 43,190,487           0           0  57,385          0      0  57,385          .      .        operator++() _GLIBCXX_NOEXCEPT
          .           .           .       .          .      .       .          .      .        {
 66,437,430  66,437,430           0       0 33,985,836      0       0 30,987,460      .  	_M_node = _M_node->_M_next;
          .           .           .       .          .      .       .          .      .  	return *this;
          .           .           .       .          .      .       .          .      .        }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        _Self
          .           .           .       .          .      .       .          .      .        operator++(int) _GLIBCXX_NOEXCEPT
          .           .           .       .          .      .       .          .      .        {
          .           .           .       .          .      .       .          .      .  	_Self __tmp = *this;
677,872,518 451,915,012 225,957,506  67,463 42,674,688      0  67,462  6,985,866      .  	_M_node = _M_node->_M_next;
          .           .           .       .          .      .       .          .      .  	return __tmp;
          .           .           .       .          .      .       .          .      .        }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        _Self&
          .           .           .       .          .      .       .          .      .        operator--() _GLIBCXX_NOEXCEPT
          .           .           .       .          .      .       .          .      .        {
          .           .           .       .          .      .       .          .      .  	_M_node = _M_node->_M_prev;
          .           .           .       .          .      .       .          .      .  	return *this;
-- line 235 ----------------------------------------
-- line 396 ----------------------------------------
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        _List_impl _M_impl;
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .  #if _GLIBCXX_USE_CXX11_ABI
          .           .           .       .          .      .       .          .      .        size_t _M_get_size() const { return _M_impl._M_node._M_size; }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }
          .           .           .       .          .      .       .          .      .  
  4,686,221           0   4,686,221       0          0  1,064       .          .      .        void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
          .           .           .       .          .      .       .          .      .  
  9,280,691           0   6,985,368 100,761          0  9,701 100,760          0  8,215        void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .  # if !_GLIBCXX_INLINE_VERSION
          .           .           .       .          .      .       .          .      .        size_t
          .           .           .       .          .      .       .          .      .        _M_distance(const __detail::_List_node_base* __first,
          .           .           .       .          .      .       .          .      .  		  const __detail::_List_node_base* __last) const
          .           .           .       .          .      .       .          .      .        { return _S_distance(__first, __last); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        // return the stored size
-- line 414 ----------------------------------------
-- line 640 ----------------------------------------
          .           .           .       .          .      .       .          .      .  #if _GLIBCXX_USE_CXX11_ABI
          .           .           .       .          .      .       .          .      .        static size_t
          .           .           .       .          .      .       .          .      .        _S_distance(const_iterator __first, const_iterator __last)
          .           .           .       .          .      .       .          .      .        { return std::distance(__first, __last); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        // return the stored size
          .           .           .       .          .      .       .          .      .        size_t
          .           .           .       .          .      .       .          .      .        _M_node_count() const
  2,343,650   2,326,660           .       .          .      .       .          .      .        { return this->_M_get_size(); }
          .           .           .       .          .      .       .          .      .  #else
          .           .           .       .          .      .       .          .      .        // dummy implementations used when the size is not stored
          .           .           .       .          .      .       .          .      .        static size_t
          .           .           .       .          .      .       .          .      .        _S_distance(const_iterator, const_iterator)
          .           .           .       .          .      .       .          .      .        { return 0; }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        // count the number of nodes
          .           .           .       .          .      .       .          .      .        size_t
-- line 656 ----------------------------------------
-- line 952 ----------------------------------------
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        /**
          .           .           .       .          .      .       .          .      .         *  Returns a read/write iterator that points one past the last
          .           .           .       .          .      .       .          .      .         *  element in the %list.  Iteration is done in ordinary element
          .           .           .       .          .      .       .          .      .         *  order.
          .           .           .       .          .      .       .          .      .         */
          .           .           .       .          .      .       .          .      .        iterator
          .           .           .       .          .      .       .          .      .        end() _GLIBCXX_NOEXCEPT
  4,771,914           .           .       .          .      .       .          .      .        { return iterator(&this->_M_impl._M_node); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        /**
          .           .           .       .          .      .       .          .      .         *  Returns a read-only (constant) iterator that points one past
          .           .           .       .          .      .       .          .      .         *  the last element in the %list.  Iteration is done in ordinary
          .           .           .       .          .      .       .          .      .         *  element order.
          .           .           .       .          .      .       .          .      .         */
          .           .           .       .          .      .       .          .      .        const_iterator
          .           .           .       .          .      .       .          .      .        end() const _GLIBCXX_NOEXCEPT
-- line 968 ----------------------------------------
-- line 1200 ----------------------------------------
          .           .           .       .          .      .       .          .      .         *  This is a typical stack operation.  The function creates an
          .           .           .       .          .      .       .          .      .         *  element at the end of the %list and assigns the given data to
          .           .           .       .          .      .       .          .      .         *  it.  Due to the nature of a %list this operation can be done
          .           .           .       .          .      .       .          .      .         *  in constant time, and does not invalidate iterators and
          .           .           .       .          .      .       .          .      .         *  references.
          .           .           .       .          .      .       .          .      .         */
          .           .           .       .          .      .       .          .      .        void
          .           .           .       .          .      .       .          .      .        push_back(const value_type& __x)
      7,053           .           .       .          .      .       .          .      .        { this->_M_insert(end(), __x); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .  #if __cplusplus >= 201103L
          .           .           .       .          .      .       .          .      .        void
          .           .           .       .          .      .       .          .      .        push_back(value_type&& __x)
          .           .           .       .          .      .       .          .      .        { this->_M_insert(end(), std::move(__x)); }
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        template<typename... _Args>
          .           .           .       .          .      .       .          .      .  #if __cplusplus > 201402L
-- line 1216 ----------------------------------------
-- line 1297 ----------------------------------------
          .           .           .       .          .      .       .          .      .         *
          .           .           .       .          .      .       .          .      .         *  This function will insert a copy of the given rvalue before
          .           .           .       .          .      .       .          .      .         *  the specified location.  Due to the nature of a %list this
          .           .           .       .          .      .       .          .      .         *  operation can be done in constant time, and does not
          .           .           .       .          .      .       .          .      .         *  invalidate iterators and references.
          .           .           .       .          .      .       .          .      .  	*/
          .           .           .       .          .      .       .          .      .        iterator
          .           .           .       .          .      .       .          .      .        insert(const_iterator __position, value_type&& __x)
 32,126,715  11,461,693   6,883,193 201,932          1      0 201,929          .      .        { return emplace(__position, std::move(__x)); }
432,754,753 124,205,994  96,604,989 297,609    419,912 91,188 297,597    151,832 24,198  => /usr/include/c++/9/bits/list.tcc:std::_List_iterator<std::pair<SubsecondTime, SubsecondTime> > std::__cxx11::list<std::pair<SubsecondTime, SubsecondTime>, std::allocator<std::pair<SubsecondTime, SubsecondTime> > >::emplace<std::pair<SubsecondTime, SubsecondTime> >(std::_List_const_iterator<std::pair<SubsecondTime, SubsecondTime> >, std::pair<SubsecondTime, SubsecondTime>&&) (4,593,943x)
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        /**
          .           .           .       .          .      .       .          .      .         *  @brief  Inserts the contents of an initializer_list into %list
          .           .           .       .          .      .       .          .      .         *          before specified const_iterator.
          .           .           .       .          .      .       .          .      .         *  @param  __p  A const_iterator into the %list.
          .           .           .       .          .      .       .          .      .         *  @param  __l  An initializer_list of value_type.
          .           .           .       .          .      .       .          .      .         *  @return  An iterator pointing to the first element inserted
          .           .           .       .          .      .       .          .      .         *           (or __position).
-- line 1313 ----------------------------------------
-- line 1900 ----------------------------------------
          .           .           .       .          .      .       .          .      .  	this->_M_inc_size(1);
          .           .           .       .          .      .       .          .      .        }
          .           .           .       .          .      .       .          .      .  #else
          .           .           .       .          .      .       .          .      .       template<typename... _Args>
          .           .           .       .          .      .       .          .      .         void
          .           .           .       .          .      .       .          .      .         _M_insert(iterator __position, _Args&&... __args)
          .           .           .       .          .      .       .          .      .         {
          .           .           .       .          .      .       .          .      .  	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
    201,546           0     109,268       4          0  3,791       4          0  3,597  	 __tmp->_M_hook(__position._M_node);
    582,940     233,176     233,176 102,482     51,504      0 102,482     51,241      .  => ???:0x000000000040a090 (58,294x)
          .           .           .       .          .      .       .          .      .  	 this->_M_inc_size(1);
          .           .           .       .          .      .       .          .      .         }
          .           .           .       .          .      .       .          .      .  #endif
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .        // Erases element at position given.
          .           .           .       .          .      .       .          .      .        void
          .           .           .       .          .      .       .          .      .        _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
          .           .           .       .          .      .       .          .      .        {
          .           .           .       .          .      .       .          .      .  	this->_M_dec_size(1);
  9,343,691           0   4,694,902       0          0 39,923       0          0 17,135  	__position._M_node->_M_unhook();
    583,352     291,676     145,838 100,724     57,521 34,388 100,672     50,333 29,832  => ???:0x000000000040ad80 (72,919x)
          .           .           .       .          .      .       .          .      .  	_Node* __n = static_cast<_Node*>(__position._M_node);
          .           .           .       .          .      .       .          .      .  #if __cplusplus >= 201103L
          .           .           .       .          .      .       .          .      .  	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
          .           .           .       .          .      .       .          .      .  #else
          .           .           .       .          .      .       .          .      .  	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
          .           .           .       .          .      .       .          .      .  #endif
          .           .           .       .          .      .       .          .      .  
          .           .           .       .          .      .       .          .      .  	_M_put_node(__n);
-- line 1926 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/misc/subsecond_time.h
--------------------------------------------------------------------------------
Ir          Dr          Dw         I1mr    D1mr        D1mw    ILmr    DLmr       DLmw    

-- line 59 ----------------------------------------
          .           .          .       .           .       .       .          .       .     static const SubsecondTime PSfromFloat(float ps)        { return ps * SubsecondTime(PS_1); }
          .           .          .       .           .       .       .          .       .     static const SubsecondTime NSfromFloat(float ns)        { return ns * SubsecondTime(NS_1); }
          .           .          .       .           .       .       .          .       .     static const SubsecondTime USfromFloat(float us)        { return us * SubsecondTime(US_1); }
          .           .          .       .           .       .       .          .       .     static const SubsecondTime MSfromFloat(float ms)        { return ms * SubsecondTime(MS_1); }
          .           .          .       .           .       .       .          .       .     static const SubsecondTime SECfromFloat(float sec)      { return sec * SubsecondTime(SEC_1); }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // Public constructors
          .           .          .       .           .       .       .          .       .     SubsecondTime()
 15,106,456   2,309,670  3,556,055  17,162     708,873  11,417  17,135    168,798   3,142        : m_time(0)
          .           .          .       .           .       .       .          .       .     {}
  2,511,569           .          .       .           .       .       .          .       .     SubsecondTime(const SubsecondTime &_time)
775,100,195 716,345,136 56,224,522 773,660 173,722,595 788,165 771,425 28,610,385 302,796        : m_time(_time.m_time)
          .           .          .       .           .       .       .          .       .     {}
          .           .          .       .           .       .       .          .       .     SubsecondTime(uint64_t multiplier, const SubsecondTime &_time)
          .           .          .       .           .       .       .          .       .        : m_time(_time.m_time * multiplier)
          .           .          .       .           .       .       .          .       .     {}
          .           .          .       .           .       .       .          .       .     SubsecondTime(const subsecond_time_t &sstime)
          .           .          .       .           .       .       .          .       .        : m_time(sstime.m_time)
          .           .          .       .           .       .       .          .       .     {}
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     UInt64 getFS() const { return m_time / FS_1; }
 26,690,550   4,799,477          0 148,578          30       0 148,571          .       .     UInt64 getPS() const { return m_time / PS_1; }
          .           .          .       .           .       .       .          .       .     UInt64 getNS() const { return m_time / NS_1; }
          .           .          .       .           .       .       .          .       .     UInt64 getUS() const { return m_time / US_1; }
          .           .          .       .           .       .       .          .       .     UInt64 getMS() const { return m_time / MS_1; }
          .           .          .       .           .       .       .          .       .     UInt64 getSEC() const { return m_time / SEC_1; }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // Public operators
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     SubsecondTime& operator=(const SubsecondTime &rhs)
          .           .          .       .           .       .       .          .       .     {
 22,166,259   5,759,870 16,321,439  67,464           0 457,449  67,436          0  44,399        m_time = rhs.m_time;
        155           1          0       1           0       0       1          .       .        return *this;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .     SubsecondTime& operator+=(const SubsecondTime &rhs)
          .           .          .       .           .       .       .          .       .     {
497,940,007 246,377,720 13,222,458 246,722     105,914 393,908 246,641     67,475 261,474        m_time += rhs.m_time;
    112,215      21,096      2,055  33,980           0       0  33,980          .       .        return *this;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .     // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .     SubsecondTime& operator-=(const SubsecondTime &rhs)
          .           .          .       .           .       .       .          .       .     {
 28,267,764   9,646,356     25,320 102,591   1,869,380       0 102,590    571,959       .        m_time -= rhs.m_time;
  2,303,670           .          .       .           .       .       .          .       .        return *this;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     SubsecondTime& operator<<=(uint64_t rhs)
          .           .          .       .           .       .       .          .       .     {
          .           .          .       .           .       .       .          .       .        m_time <<= rhs;
          .           .          .       .           .       .       .          .       .        return *this;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // From http://www.stackoverflow.com/questions/1751869
          .           .          .       .           .       .       .          .       .     // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .     template <class T>
          .           .          .       .           .       .       .          .       .     SubsecondTime& operator*=(T rhs)
          .           .          .       .           .       .       .          .       .     {
  6,260,141   1,332,773          0  17,134      18,581       0  17,134     16,964       .        m_time *= rhs;
          .           .          .       .           .       .       .          .       .        return *this;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     SubsecondTime operator/(const uint64_t &divisor) const
          .           .          .       .           .       .       .          .       .     {
  2,551,685   1,225,575          0  19,332     177,043       0  19,331          .       .        return SubsecondTime(m_time / divisor);
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // Implicit conversion operator from SubsecondTime to subsecond_time_t
          .           .          .       .           .       .       .          .       .     //  to allow operations on SubsecondTime
          .           .          .       .           .       .       .          .       .     // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .     operator subsecond_time_t() const
          .           .          .       .           .       .       .          .       .     {
          .           .          .       .           .       .       .          .       .        subsecond_time_t sstime;
-- line 132 ----------------------------------------
-- line 201 ----------------------------------------
          .           .          .       .           .       .       .          .       .     static inline uint64_t divideRounded(const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .     {
          .           .          .       .           .       .       .          .       .        return (lhs.m_time + ((rhs.m_time/2) + 1)) / rhs.m_time;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // cgiannoula
          .           .          .       .           .       .       .          .       .     static inline SubsecondTime max(const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .     {
    159,222     159,222          0  37,676           0       0  37,676          .       .         if (lhs.m_time > rhs.m_time)
          .           .          .       .           .       .       .          .       .             return lhs;
          .           .          .       .           .       .       .          .       .         else
          .           .          .       .           .       .       .          .       .             return rhs;
          .           .          .       .           .       .       .          .       .     }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .  private:
          .           .          .       .           .       .       .          .       .     friend class ComponentPeriod;
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // Not to be used normally
     16,990           .          .       .           .       .       .          .       .     explicit SubsecondTime(uint64_t _time)
  2,365,040           0  2,365,040  17,135           0       0  17,135          .       .        : m_time(_time)
          .           .          .       .           .       .       .          .       .     {}
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     // Internally, numbers are calculated in femtoseconds (10^(-15)s)
          .           .          .       .           .       .       .          .       .     // TimeConverter can only be used when constexpr is supported
          .           .          .       .           .       .       .          .       .     static const uint64_t FS_1 = 1;
          .           .          .       .           .       .       .          .       .     static const uint64_t PS_1 = FS_1 * 1000;
          .           .          .       .           .       .       .          .       .     static const uint64_t NS_1 = PS_1 * 1000;
          .           .          .       .           .       .       .          .       .     static const uint64_t US_1 = NS_1 * 1000;
-- line 228 ----------------------------------------
-- line 231 ----------------------------------------
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .     uint64_t m_time;
          .           .          .       .           .       .       .          .       .  };
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .  // Define addition between SubsecondTime instances
          .           .          .       .           .       .       .          .       .  // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .  inline SubsecondTime operator+(SubsecondTime lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
  2,309,670   2,309,670          .       .           .       .       .          .       .     return (lhs += rhs);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .  // Define subtraction between SubsecondTime instances
          .           .          .       .           .       .       .          .       .  // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .  inline SubsecondTime operator-(SubsecondTime lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
  1,157,801   1,157,801          .       .           .       .       .          .       .     return (lhs -= rhs);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .  // Define bitshift-left on SubsecondTime instances
          .           .          .       .           .       .       .          .       .  // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .  inline SubsecondTime operator<<(SubsecondTime lhs, uint64_t rhs)
          .           .          .       .           .       .       .          .       .  {
          .           .          .       .           .       .       .          .       .     return (lhs <<= rhs);
          .           .          .       .           .       .       .          .       .  }
-- line 254 ----------------------------------------
-- line 270 ----------------------------------------
          .           .          .       .           .       .       .          .       .  // Boolean operators
          .           .          .       .           .       .       .          .       .  // From http://www.stackoverflow.com/questions/4421706
          .           .          .       .           .       .       .          .       .  inline bool operator==(const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
          .           .          .       .           .       .       .          .       .     return (lhs.m_time == rhs.m_time);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  inline bool operator!=(const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
  1,154,835   1,154,835          .       .           .       .       .          .       .     return !operator==(lhs,rhs);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  inline bool operator< (const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
    995,667     331,889          0  66,622           0       0  66,621          .       .     return (lhs.m_time < rhs.m_time);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  inline bool operator<=(const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
          .           .          .       .           .       .       .          .       .     return !operator> (lhs,rhs);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  inline bool operator>=(const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
  9,236,466   4,617,126          0       0       1,758       .       .          .       .     return !operator< (lhs,rhs);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  inline bool operator> (const SubsecondTime& lhs, const SubsecondTime& rhs)
          .           .          .       .           .       .       .          .       .  {
 14,825,808  14,825,808          0 101,769     157,549       0 101,743     67,475       .     return  operator< (rhs,lhs);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .  inline void atomic_add_subsecondtime(SubsecondTime &src_dest, const SubsecondTime &src)
          .           .          .       .           .       .       .          .       .  {
          .           .          .       .           .       .       .          .       .     __sync_fetch_and_add(&src_dest.m_time, src.m_time);
          .           .          .       .           .       .       .          .       .  }
          .           .          .       .           .       .       .          .       .  
          .           .          .       .           .       .       .          .       .  // Base period (frequency) of a component.  This class is normally referenced as a pointer in other generating classes
-- line 302 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/list.tcc
--------------------------------------------------------------------------------
Ir          Dr         Dw         I1mr   D1mr      D1mw  ILmr   DLmr      DLmw 

-- line 81 ----------------------------------------
          .          .          .      .         .     .      .         .    .  	  _M_put_node(__tmp);
          .          .          .      .         .     .      .         .    .  	}
          .          .          .      .         .     .      .         .    .      }
          .          .          .      .         .     .      .         .    .  
          .          .          .      .         .     .      .         .    .  #if __cplusplus >= 201103L
          .          .          .      .         .     .      .         .    .    template<typename _Tp, typename _Alloc>
          .          .          .      .         .     .      .         .    .      template<typename... _Args>
          .          .          .      .         .     .      .         .    .        typename list<_Tp, _Alloc>::iterator
 41,345,487          0 18,375,772 67,476         0     0 67,475         .    .        list<_Tp, _Alloc>::
          .          .          .      .         .     .      .         .    .        emplace(const_iterator __position, _Args&&... __args)
          .          .          .      .         .     .      .         .    .        {
          .          .          .      .         .     .      .         .    .  	_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 13,781,829          0  4,593,943 67,476         0     0 67,475         .    .  	__tmp->_M_hook(__position._M_const_cast()._M_node);
 45,939,430 18,375,772 18,375,772 32,470    59,731     2 32,468    16,234    .  => ???:0x000000000040a090 (4,593,943x)
          .          .          .      .         .     .      .         .    .  	this->_M_inc_size(1);
          .          .          .      .         .     .      .         .    .  	return iterator(__tmp);
 32,157,601 22,969,715          .      .         .     .      .         .    .        }
          .          .          .      .         .     .      .         .    .  #endif
          .          .          .      .         .     .      .         .    .  
          .          .          .      .         .     .      .         .    .    template<typename _Tp, typename _Alloc>
          .          .          .      .         .     .      .         .    .      typename list<_Tp, _Alloc>::iterator
          .          .          .      .         .     .      .         .    .      list<_Tp, _Alloc>::
          .          .          .      .         .     .      .         .    .  #if __cplusplus >= 201103L
          .          .          .      .         .     .      .         .    .      insert(const_iterator __position, const value_type& __x)
          .          .          .      .         .     .      .         .    .  #else
-- line 104 ----------------------------------------
-- line 149 ----------------------------------------
          .          .          .      .         .     .      .         .    .      typename list<_Tp, _Alloc>::iterator
          .          .          .      .         .     .      .         .    .      list<_Tp, _Alloc>::
          .          .          .      .         .     .      .         .    .  #if __cplusplus >= 201103L
          .          .          .      .         .     .      .         .    .      erase(const_iterator __position) noexcept
          .          .          .      .         .     .      .         .    .  #else
          .          .          .      .         .     .      .         .    .      erase(iterator __position)
          .          .          .      .         .     .      .         .    .  #endif
          .          .          .      .         .     .      .         .    .      {
  4,621,554  2,311,884  2,309,670      0   436,598     0      0    83,462    .        iterator __ret = iterator(__position._M_node->_M_next);
          .          .          .      .         .     .      .         .    .        _M_erase(__position._M_const_cast());
          .          .          .      .         .     .      .         .    .        return __ret;
          .          .          .      .         .     .      .         .    .      }
          .          .          .      .         .     .      .         .    .  
          .          .          .      .         .     .      .         .    .    // Return a const_iterator indicating the position to start inserting or
          .          .          .      .         .     .      .         .    .    // erasing elements (depending whether the list is growing or shrinking),
          .          .          .      .         .     .      .         .    .    // and set __new_size to the number of new elements that must be appended.
          .          .          .      .         .     .      .         .    .    // Equivalent to the following, but performed optimally:
-- line 165 ----------------------------------------
-- line 323 ----------------------------------------
          .          .          .      .         .     .      .         .    .  #if __cplusplus > 201703L
          .          .          .      .         .     .      .         .    .  # define _GLIBCXX20_ONLY(__expr) __expr
          .          .          .      .         .     .      .         .    .  #else
          .          .          .      .         .     .      .         .    .  # define _GLIBCXX20_ONLY(__expr)
          .          .          .      .         .     .      .         .    .  #endif
          .          .          .      .         .     .      .         .    .  
          .          .          .      .         .     .      .         .    .    template<typename _Tp, typename _Alloc>
          .          .          .      .         .     .      .         .    .      typename list<_Tp, _Alloc>::__remove_return_type
  1,122,471          0    623,595 67,330         0 3,823 67,330         .    .      list<_Tp, _Alloc>::
          .          .          .      .         .     .      .         .    .      remove(const value_type& __value)
          .          .          .      .         .     .      .         .    .      {
          .          .          .      .         .     .      .         .    .        size_type __removed __attribute__((__unused__)) = 0;
    124,719    124,719          0      0    55,231     0      0    50,340    .        iterator __first = begin();
          .          .          .      .         .     .      .         .    .        iterator __last = end();
          .          .          .      .         .     .      .         .    .        iterator __extra = __last;
 86,678,908          .          .      .         .     .      .         .    .        while (__first != __last)
          .          .          .      .         .     .      .         .    .  	{
          .          .          .      .         .     .      .         .    .  	  iterator __next = __first;
          .          .          .      .         .     .      .         .    .  	  ++__next;
129,571,461 86,380,974          0      0 7,587,536     0      0 7,358,017    .  	  if (*__first == __value)
          .          .          .      .         .     .      .         .    .  	    {
          .          .          .      .         .     .      .         .    .  	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
          .          .          .      .         .     .      .         .    .  	      // 526. Is it undefined if a function in the standard changes
          .          .          .      .         .     .      .         .    .  	      // in parameters?
    145,838          .          .      .         .     .      .         .    .  	      if (std::__addressof(*__first) != std::__addressof(__value))
          .          .          .      .         .     .      .         .    .  		{
          .          .          .      .         .     .      .         .    .  		  _M_erase(__first);
          .          .          .      .         .     .      .         .    .  		  _GLIBCXX20_ONLY( __removed++ );
          .          .          .      .         .     .      .         .    .  		}
          .          .          .      .         .     .      .         .    .  	      else
          .          .          .      .         .     .      .         .    .  		__extra = __first;
          .          .          .      .         .     .      .         .    .  	    }
          .          .          .      .         .     .      .         .    .  	  __first = __next;
          .          .          .      .         .     .      .         .    .  	}
    226,244          0          0 57,385         0     0 57,385         .    .        if (__extra != __last)
          .          .          .      .         .     .      .         .    .  	{
          .          .          .      .         .     .      .         .    .  	  _M_erase(__extra);
          .          .          .      .         .     .      .         .    .  	  _GLIBCXX20_ONLY( __removed++ );
          .          .          .      .         .     .      .         .    .  	}
          .          .          .      .         .     .      .         .    .        return _GLIBCXX20_ONLY( __removed );
    748,314    748,314          0  9,945    58,063     0  9,945         .    .      }
          .          .          .      .         .     .      .         .    .  
          .          .          .      .         .     .      .         .    .    template<typename _Tp, typename _Alloc>
          .          .          .      .         .     .      .         .    .      typename list<_Tp, _Alloc>::__remove_return_type
          .          .          .      .         .     .      .         .    .      list<_Tp, _Alloc>::
          .          .          .      .         .     .      .         .    .      unique()
          .          .          .      .         .     .      .         .    .      {
          .          .          .      .         .     .      .         .    .        iterator __first = begin();
          .          .          .      .         .     .      .         .    .        iterator __last = end();
-- line 371 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc
--------------------------------------------------------------------------------
Ir         Dr         Dw        I1mr   D1mr      D1mw  ILmr   DLmr    DLmw  

-- line 19 ----------------------------------------
         .          .         .      .         .     .      .       .     .     registerStatsMetric(name, id, "total-queue-delay", &m_total_queue_delay);
         .          .         .      .         .     .      .       .     .  }
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .  QueueModelWindowedMG1::~QueueModelWindowedMG1()
         .          .         .      .         .     .      .       .     .  {}
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .  SubsecondTime
         .          .         .      .         .     .      .       .     .  QueueModelWindowedMG1::computeQueueDelay(SubsecondTime pkt_time, SubsecondTime processing_time, core_id_t requester)
17,322,525  1,154,835 8,083,845 67,476         0     0 67,475       .     .  {
         .          .         .      .         .     .      .       .     .     SubsecondTime t_queue = SubsecondTime::Zero();
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .     // Advance the window based on the global (barrier) time, as this guarantees the earliest time any thread may be at.
         .          .         .      .         .     .      .       .     .     // Use a backup value of 10 window sizes before the current request to avoid excessive memory usage in case something fishy is going on.
 2,309,670          .         .      .         .     .      .       .     .     SubsecondTime backup = pkt_time > 10*m_window_size ? pkt_time - 10*m_window_size : SubsecondTime::Zero();
23,096,700 12,703,185 3,464,505 67,476 1,018,906     0 67,475       .     .     SubsecondTime main = Sim()->getClockSkewMinimizationServer()->getGlobalTime() > m_window_size ? Sim()->getClockSkewMinimizationServer()->getGlobalTime() - m_window_size : SubsecondTime::Zero();
23,096,700  4,619,340 2,309,670      2   117,269     .      .       .     .  => /home/k.huang/DisaggregatedSystemsUofT/common/system/barrier_sync_server.h:BarrierSyncServer::getGlobalTime(bool) (2,309,670x)
         .          .         .      .         .     .      .       .     .     // if (m_name == "dram-datamovement-queue") {
         .          .         .      .         .     .      .       .     .     //    LOG_PRINT("m_num_arrivals=%ld initially; removeItems argument was max of %ld ns and %ld ns", m_num_arrivals,
         .          .         .      .         .     .      .       .     .     //              main.getNS(), backup.getNS());
         .          .         .      .         .     .      .       .     .     // }
 3,464,505          0 1,154,835      .         .     .      .       .     .     removeItems(std::max(main, backup));
271,018,535 79,928,003 31,614,865 472,806 3,445,063 134,227 472,803 2,818,319 132,245  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::removeItems(SubsecondTime) (1,154,835x)
         .          .         .      .         .     .      .       .     .  
 4,619,340          0 1,154,835      .         .     .      .       .     .     if (m_name == "dram-datamovement-queue")
         .          .         .      .         .     .      .       .     .        LOG_PRINT("QueueModelWindowedMG1::computeQueueDelay(): m_num_arrivals=%ld before if statement", m_num_arrivals);
 3,464,505  1,154,835         0 67,476         0     0 67,475       .     .     if (m_num_arrivals > 1)
         .          .         .      .         .     .      .       .     .     {
 9,174,760  1,146,845         0 59,562         0     0 59,561       .     .        double utilization = (double)m_service_time_sum / m_window_size.getPS();
 5,734,225          .         .      .         .     .      .       .     .        double arrival_rate = (double)m_num_arrivals / m_window_size.getPS();
         .          .         .      .         .     .      .       .     .  
 8,027,915  2,293,690 1,146,845 59,562   140,372     0 59,561  59,560     .        double service_time_Es2 = m_service_time_sum2 / m_num_arrivals;
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .        // If requesters do not throttle based on returned latency, it's their problem, not ours
 8,027,915  2,293,690 1,146,845      0   142,370     0      0  59,560     .        if (utilization > .9999) { // number here changed from .99 to .9999; still needed?
         .          .         .      .         .     .      .       .     .           utilization = .9999;
         .          .         .      .         .     .      .       .     .        }
         .          .         .      .         .     .      .       .     .  
10,321,605  2,293,690 2,293,690 59,562         0     0 59,561       .     .        t_queue = SubsecondTime::PS(arrival_rate * service_time_Es2 / (2 * (1. - utilization)));
 3,440,535  1,146,845         .      .         .     .      .       .     .        if (m_name == "dram-datamovement-queue")
         .          .         .      .         .     .      .       .     .           LOG_PRINT("t_queue initially calculated as %ld ns: %f / %f = %f ps", t_queue.getNS(),
         .          .         .      .         .     .      .       .     .                     (arrival_rate * service_time_Es2), (2 * (1. - utilization)), arrival_rate * service_time_Es2 / (2 * (1. - utilization)));
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .        // Our memory is limited in time to m_window_size. It would be strange to return more latency than that.
 2,293,690          0         0 59,559         0     0 59,559       .     .        if (t_queue > m_window_size)
         .          .         .      .         .     .      .       .     .           t_queue = m_window_size;
         .          .         .      .         .     .      .       .     .     }
         .          .         .      .         .     .      .       .     .  
 4,619,340          0 1,154,835      .         .     .      .       .     .     addItem(pkt_time, processing_time);
315,608,008 84,643,850 46,191,600 1,069,819 6,880,542 947,639 1,069,796 1,748,647 296,017  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_windowed_mg1.cc:QueueModelWindowedMG1::addItem(SubsecondTime, SubsecondTime) (1,154,835x)
         .          .         .      .         .     .      .       .     .  
 1,154,835          0 1,154,835      1         .     .      .       .     .     m_total_requests++;
         .          .         .      .         .     .      .       .     .     m_total_utilized_time += processing_time;
         .          .         .      .         .     .      .       .     .     m_total_queue_delay += t_queue;
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .     return t_queue;
13,858,020 10,393,515         0 67,476        67     0 67,475       .     .  }
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .  /* Get estimate of queue delay without adding the packet to the queue */
         .          .         .      .         .     .      .       .     .  SubsecondTime
         .          .         .      .         .     .      .       .     .  QueueModelWindowedMG1::computeQueueDelayNoEffect(SubsecondTime pkt_time, SubsecondTime processing_time, request_t request_type, core_id_t requester)
         .          .         .      .         .     .      .       .     .  {
         .          .         .      .         .     .      .       .     .     SubsecondTime t_queue = SubsecondTime::Zero();
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .     // Advance the window based on the global (barrier) time, as this guarantees the earliest time any thread may be at.
-- line 79 ----------------------------------------
-- line 101 ----------------------------------------
         .          .         .      .         .     .      .       .     .     }
         .          .         .      .         .     .      .       .     .     // removed addItem() call and calls that updated stats
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .     return t_queue;
         .          .         .      .         .     .      .       .     .  }
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .  void
         .          .         .      .         .     .      .       .     .  QueueModelWindowedMG1::addItem(SubsecondTime pkt_time, SubsecondTime service_time)
 9,238,680          0 4,619,340 67,476         0     0 67,475       .     .  {
         .          .         .      .         .     .      .       .     .     m_window.insert(std::pair<SubsecondTime, SubsecondTime>(pkt_time, service_time));
 1,154,835          0 1,154,835      .         .     .      .       .     .     m_num_arrivals ++;
 1,154,835          0 1,154,835      .         .     .      .       .     .     m_service_time_sum += service_time.getPS();
 2,309,670          0 1,154,835      .         .     .      .       .     .     m_service_time_sum2 += service_time.getPS() * service_time.getPS();
 6,929,010  5,774,175         0      0         1     .      .       .     .  }
         .          .         .      .         .     .      .       .     .  
         .          .         .      .         .     .      .       .     .  void
         .          .         .      .         .     .      .       .     .  QueueModelWindowedMG1::removeItems(SubsecondTime earliest_time)
 9,238,638          0 3,464,487 67,476         0     0 67,475       .     .  {
10,382,093  5,766,673         0 67,472   801,605     0 67,471 380,296     .     while(!m_window.empty() && m_window.begin()->first < earliest_time)
         .          .         .      .         .     .      .       .     .     {
         .          .         .      .         .     .      .       .     .        std::multimap<SubsecondTime, SubsecondTime>::iterator entry = m_window.begin();
 1,154,666          0 1,154,666      .         .     .      .       .     .        m_num_arrivals --;
 1,154,666          0 1,154,666      0         0 3,596      0       0 3,596        m_service_time_sum -= entry->second.getPS();
 2,309,332          0 1,154,666      .         .     .      .       .     .        m_service_time_sum2 -= entry->second.getPS() * entry->second.getPS();
         .          .         .      .         .     .      .       .     .        m_window.erase(entry);
         .          .         .      .         .     .      .       .     .     }
 4,619,322  4,619,322         0      4        17     0      4       .     .  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/char_traits.h
--------------------------------------------------------------------------------
Ir         Dr        Dw        I1mr D1mr D1mw ILmr DLmr DLmw 

-- line 309 ----------------------------------------
         .         .         .    .    .    .    .    .    .  	// LWG 467.
         .         .         .    .    .    .    .    .    .  	return (static_cast<unsigned char>(__c1)
         .         .         .    .    .    .    .    .    .  		< static_cast<unsigned char>(__c2));
         .         .         .    .    .    .    .    .    .        }
         .         .         .    .    .    .    .    .    .  
         .         .         .    .    .    .    .    .    .        static _GLIBCXX17_CONSTEXPR int
         .         .         .    .    .    .    .    .    .        compare(const char_type* __s1, const char_type* __s2, size_t __n)
         .         .         .    .    .    .    .    .    .        {
 4,641,736         .         .    .    .    .    .    .    .  	if (__n == 0)
         .         .         .    .    .    .    .    .    .  	  return 0;
         .         .         .    .    .    .    .    .    .  #if __cplusplus >= 201703L
         .         .         .    .    .    .    .    .    .  	if (__builtin_constant_p(__n)
         .         .         .    .    .    .    .    .    .  	    && __constant_char_array_p(__s1, __n)
         .         .         .    .    .    .    .    .    .  	    && __constant_char_array_p(__s2, __n))
         .         .         .    .    .    .    .    .    .  	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
         .         .         .    .    .    .    .    .    .  #endif
 6,962,604 2,320,868 2,320,868    .    .    .    .    .    .  	return __builtin_memcmp(__s1, __s2, __n);
58,152,843 13,925,208         0 304,407 280,137    0 304,168 85,050    .  => ???:0x000000000040a2a0 (2,320,868x)
         .         .         .    .    .    .    .    .    .        }
         .         .         .    .    .    .    .    .    .  
         .         .         .    .    .    .    .    .    .        static _GLIBCXX17_CONSTEXPR size_t
         .         .         .    .    .    .    .    .    .        length(const char_type* __s)
         .         .         .    .    .    .    .    .    .        {
         .         .         .    .    .    .    .    .    .  #if __cplusplus >= 201703L
         .         .         .    .    .    .    .    .    .  	if (__constant_string_p(__s))
         .         .         .    .    .    .    .    .    .  	  return __gnu_cxx::char_traits<char_type>::length(__s);
         .         .         .    .    .    .    .    .    .  #endif
13,925,208         0 2,320,868    .    .    .    .    .    .  	return __builtin_strlen(__s);
41,775,624 6,962,604         0 271,165 280,894    0 269,900 134,950    .  => ???:0x000000000040a270 (2,320,868x)
         .         .         .    .    .    .    .    .    .        }
         .         .         .    .    .    .    .    .    .  
         .         .         .    .    .    .    .    .    .        static _GLIBCXX17_CONSTEXPR const char_type*
         .         .         .    .    .    .    .    .    .        find(const char_type* __s, size_t __n, const char_type& __a)
         .         .         .    .    .    .    .    .    .        {
         .         .         .    .    .    .    .    .    .  	if (__n == 0)
         .         .         .    .    .    .    .    .    .  	  return 0;
         .         .         .    .    .    .    .    .    .  #if __cplusplus >= 201703L
-- line 343 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/bits/stl_tree.h
--------------------------------------------------------------------------------
Ir         Dr         Dw        I1mr    D1mr      D1mw  ILmr    DLmr      DLmw  

-- line 200 ----------------------------------------
         .          .         .       .         .     .       .         .     .        _M_node_count = __from._M_node_count;
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        __from._M_reset();
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .      void
         .          .         .       .         .     .       .         .     .      _M_reset()
         .          .         .       .         .     .       .         .     .      {
    17,234          0    17,234      13         0     0      13         .     .        _M_header._M_parent = 0;
    17,234          0    17,234       0         0     1       .         .     .        _M_header._M_left = &_M_header;
    17,234          0    17,234       .         .     .       .         .     .        _M_header._M_right = &_M_header;
    17,234          0    17,234   8,611         0     0   8,611         .     .        _M_node_count = 0;
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .    };
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Val>
         .          .         .       .         .     .       .         .     .      struct _Rb_tree_node : public _Rb_tree_node_base
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        typedef _Rb_tree_node<_Val>* _Link_type;
         .          .         .       .         .     .       .         .     .  
-- line 219 ----------------------------------------
-- line 279 ----------------------------------------
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        pointer
         .          .         .       .         .     .       .         .     .        operator->() const _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Self&
         .          .         .       .         .     .       .         .     .        operator++() _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
   255,918      1,901   110,863       .         .     .       .         .     .  	_M_node = _Rb_tree_increment(_M_node);
 4,979,413  2,391,980       152  77,341   178,512    15  77,256   117,503    14  => ???:0x000000000040a520 (70,968x)
         .          .         .       .         .     .       .         .     .  	return *this;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Self
         .          .         .       .         .     .       .         .     .        operator++(int) _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	_Self __tmp = *this;
    76,144     16,981    38,072  12,177         0     0  12,177         .     .  	_M_node = _Rb_tree_increment(_M_node);
   308,013    127,594         0  28,311    20,581     0  28,311    20,581     .  => ???:0x000000000040a520 (19,036x)
         .          .         .       .         .     .       .         .     .  	return __tmp;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Self&
         .          .         .       .         .     .       .         .     .        operator--() _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
    28,956          0    14,478   1,987         0     0   1,117         .     .  	_M_node = _Rb_tree_decrement(_M_node);
   179,006     64,454         0  24,150    12,608     0  22,838    12,025     .  => ???:0x000000000040a800 (10,831x)
         .          .         .       .         .     .       .         .     .  	return *this;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Self
         .          .         .       .         .     .       .         .     .        operator--(int) _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	_Self __tmp = *this;
         .          .         .       .         .     .       .         .     .  	_M_node = _Rb_tree_decrement(_M_node);
-- line 310 ----------------------------------------
-- line 337 ----------------------------------------
         .          .         .       .         .     .       .         .     .        typedef _Rb_tree_const_iterator<_Tp>		_Self;
         .          .         .       .         .     .       .         .     .        typedef _Rb_tree_node_base::_Const_Base_ptr	_Base_ptr;
         .          .         .       .         .     .       .         .     .        typedef const _Rb_tree_node<_Tp>*			_Link_type;
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        : _M_node() { }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        explicit
   235,607          .         .       .         .     .       .         .     .        _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        : _M_node(__x) { }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        : _M_node(__it._M_node) { }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        iterator
         .          .         .       .         .     .       .         .     .        _M_const_cast() const _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
-- line 353 ----------------------------------------
-- line 366 ----------------------------------------
         .          .         .       .         .     .       .         .     .  	_M_node = _Rb_tree_increment(_M_node);
         .          .         .       .         .     .       .         .     .  	return *this;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Self
         .          .         .       .         .     .       .         .     .        operator++(int) _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	_Self __tmp = *this;
   101,460          0    25,365       .         .     .       .         .     .  	_M_node = _Rb_tree_increment(_M_node);
       119         44         0      16         8     0      14         7     .  => ???:0x000000000040a8e0 (8x)
         .          .         .       .         .     .       .         .     .  	return __tmp;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Self&
         .          .         .       .         .     .       .         .     .        operator--() _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	_M_node = _Rb_tree_decrement(_M_node);
         .          .         .       .         .     .       .         .     .  	return *this;
-- line 382 ----------------------------------------
-- line 748 ----------------------------------------
         .          .         .       .         .     .       .         .     .        _M_begin() const _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	return static_cast<_Const_Link_type>
         .          .         .       .         .     .       .         .     .  	  (this->_M_impl._M_header._M_parent);
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Base_ptr
         .          .         .       .         .     .       .         .     .        _M_end() _GLIBCXX_NOEXCEPT
 1,969,774      8,611    16,990  69,268         0     0  69,254         .     .        { return &this->_M_impl._M_header; }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        _Const_Base_ptr
         .          .         .       .         .     .       .         .     .        _M_end() const _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        { return &this->_M_impl._M_header; }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        static const_reference
         .          .         .       .         .     .       .         .     .        _S_value(_Const_Link_type __x)
         .          .         .       .         .     .       .         .     .        { return *__x->_M_valptr(); }
-- line 764 ----------------------------------------
-- line 1007 ----------------------------------------
         .          .         .       .         .     .       .         .     .        { return iterator(this->_M_impl._M_header._M_left); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        const_iterator
         .          .         .       .         .     .       .         .     .        begin() const _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        { return const_iterator(this->_M_impl._M_header._M_left); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        iterator
         .          .         .       .         .     .       .         .     .        end() _GLIBCXX_NOEXCEPT
   222,967     20,542    67,475       0     5,496     .       .         .     .        { return iterator(&this->_M_impl._M_header); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        const_iterator
         .          .         .       .         .     .       .         .     .        end() const _GLIBCXX_NOEXCEPT
   717,234     50,340         .       .         .     .       .         .     .        { return const_iterator(&this->_M_impl._M_header); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        reverse_iterator
         .          .         .       .         .     .       .         .     .        rbegin() _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        { return reverse_iterator(end()); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        const_reverse_iterator
         .          .         .       .         .     .       .         .     .        rbegin() const _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        { return const_reverse_iterator(end()); }
-- line 1027 ----------------------------------------
-- line 1212 ----------------------------------------
         .          .         .       .         .     .       .         .     .        // LWG 2059.
         .          .         .       .         .     .       .         .     .        _GLIBCXX_ABI_TAG_CXX11
         .          .         .       .         .     .       .         .     .        iterator
         .          .         .       .         .     .       .         .     .        erase(iterator __position)
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	__glibcxx_assert(__position != end());
         .          .         .       .         .     .       .         .     .  	iterator __result = __position;
         .          .         .       .         .     .       .         .     .  	++__result;
    40,127      4,110    19,036       .         .     .       .         .     .  	_M_erase_aux(__position);
 3,005,745    845,479   336,317  57,795    19,169   705  57,795    19,169   705  => /usr/include/c++/9/bits/stl_tree.h:std::_Rb_tree<unsigned long, std::pair<unsigned long const, SubsecondTime>, std::_Select1st<std::pair<unsigned long const, SubsecondTime> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SubsecondTime> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::pair<unsigned long const, SubsecondTime> >) (19,036x)
         .          .         .       .         .     .       .         .     .  	return __result;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  #else
         .          .         .       .         .     .       .         .     .        void
         .          .         .       .         .     .       .         .     .        erase(iterator __position)
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	__glibcxx_assert(__position != end());
         .          .         .       .         .     .       .         .     .  	_M_erase_aux(__position);
-- line 1228 ----------------------------------------
-- line 1258 ----------------------------------------
         .          .         .       .         .     .       .         .     .        { _M_erase_aux(__first, __last); }
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .        void
         .          .         .       .         .     .       .         .     .        erase(const key_type* __first, const key_type* __last);
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        void
         .          .         .       .         .     .       .         .     .        clear() _GLIBCXX_NOEXCEPT
         .          .         .       .         .     .       .         .     .        {
    51,702         13    17,234   5,175         0     0   5,175         .     .  	_M_erase(_M_begin());
   227,802     61,214    22,151     124     3,072    26     124     3,070    26  => /usr/include/c++/9/bits/stl_tree.h:std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*) (13x)
         .          .         .       .         .     .       .         .     .  	_M_impl._M_reset();
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        // Set operations.
         .          .         .       .         .     .       .         .     .        iterator
         .          .         .       .         .     .       .         .     .        find(const key_type& __k);
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        const_iterator
         .          .         .       .         .     .       .         .     .        find(const key_type& __k) const;
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        size_type
         .          .         .       .         .     .       .         .     .        count(const key_type& __k) const;
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        iterator
         .          .         .       .         .     .       .         .     .        lower_bound(const key_type& __k)
   181,086    113,126    16,990  16,967    25,464     0  16,967    16,990     .        { return _M_lower_bound(_M_begin(), _M_end(), __k); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        const_iterator
         .          .         .       .         .     .       .         .     .        lower_bound(const key_type& __k) const
         .          .         .       .         .     .       .         .     .        { return _M_lower_bound(_M_begin(), _M_end(), __k); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        iterator
         .          .         .       .         .     .       .         .     .        upper_bound(const key_type& __k)
   139,848    139,848         0  67,528         0     0  67,475         .     .        { return _M_upper_bound(_M_begin(), _M_end(), __k); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        const_iterator
         .          .         .       .         .     .       .         .     .        upper_bound(const key_type& __k) const
         .          .         .       .         .     .       .         .     .        { return _M_upper_bound(_M_begin(), _M_end(), __k); }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        pair<iterator, iterator>
         .          .         .       .         .     .       .         .     .        equal_range(const key_type& __k);
         .          .         .       .         .     .       .         .     .  
-- line 1298 ----------------------------------------
-- line 1789 ----------------------------------------
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .      template<typename _Arg, typename _NodeGen>
         .          .         .       .         .     .       .         .     .  #else
         .          .         .       .         .     .       .         .     .      template<typename _NodeGen>
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .        typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
     1,788          .         .       .         .     .       .         .     .        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .        _M_insert_(_Base_ptr __x, _Base_ptr __p,
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .  		 _Arg&& __v,
         .          .         .       .         .     .       .         .     .  #else
         .          .         .       .         .     .       .         .     .  		 const _Val& __v,
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .  		 _NodeGen& __node_gen)
         .          .         .       .         .     .       .         .     .        {
     3,576          .         .       .         .     .       .         .     .  	bool __insert_left = (__x != 0 || __p == _M_end()
     7,152      1,788         0   1,788         0     0   1,788         .     .  			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
         .          .         .       .         .     .       .         .     .  							_S_key(__p)));
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .  	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
         .          .         .       .         .     .       .         .     .  
    10,812          0     3,604   1,185         0   870   1,185         0   870  	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   109,184     29,779    24,205   7,382     4,124 1,071   7,382     4,124 1,071  => ???:0x000000000040a100 (1,802x)
         .          .         .       .         .     .       .         .     .  				      this->_M_impl._M_header);
     1,802          0     1,802       .         .     .       .         .     .  	++_M_impl._M_node_count;
         .          .         .       .         .     .       .         .     .  	return iterator(__z);
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .      template<typename _Arg>
         .          .         .       .         .     .       .         .     .  #endif
-- line 1822 ----------------------------------------
-- line 1899 ----------------------------------------
         .          .         .       .         .     .       .         .     .  	    __throw_exception_again;
         .          .         .       .         .     .       .         .     .  	  }
         .          .         .       .         .     .       .         .     .  	return __top;
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      void
    74,881          0    18,934  17,247         0     0  14,554         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_erase(_Link_type __x)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        // Erase without rebalancing.
    75,716          .         .       .         .     .       .         .     .        while (__x != 0)
         .          .         .       .         .     .       .         .     .  	{
    41,248     10,312    10,312       0     1,686     5       0     1,686     5  	  _M_erase(_S_right(__x));
    34,440      8,610         0   8,610         0     0   8,610         .     .  => /usr/include/c++/9/bits/stl_tree.h:std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned int>, std::_Select1st<std::pair<unsigned long const, unsigned int> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, unsigned int> >*)'2 (8,610x)
    10,312     10,312         .       .         .     .       .         .     .  	  _Link_type __y = _S_left(__x);
         .          .         .       .         .     .       .         .     .  	  _M_drop_node(__x);
         .          .         .       .         .     .       .         .     .  	  __x = __y;
         .          .         .       .         .     .       .         .     .  	}
    55,947     46,480         0  17,221         1     0  14,528         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  		      _Compare, _Alloc>::iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_lower_bound(_Link_type __x, _Base_ptr __y,
         .          .         .       .         .     .       .         .     .  		   const _Key& __k)
         .          .         .       .         .     .       .         .     .      {
 4,024,039    100,680   159,005  12,185         0     0  12,185         .     .        while (__x != 0)
 3,538,811  1,801,596         0 157,709   504,434     0 157,709   456,996     .  	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   603,828    603,828         0       0    24,098     0       0    19,722     .  	  __y = __x, __x = _S_left(__x);
         .          .         .       .         .     .       .         .     .  	else
 1,087,903  1,074,986         0   9,677    54,519     0   9,677    48,252     .  	  __x = _S_right(__x);
         .          .         .       .         .     .       .         .     .        return iterator(__y);
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  		      _Compare, _Alloc>::const_iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
         .          .         .       .         .     .       .         .     .  		   const _Key& __k) const
         .          .         .       .         .     .       .         .     .      {
 3,493,651     67,461   185,271       .         .     .       .         .     .        while (__x != 0)
 3,686,077  1,670,783         0 185,271 1,434,114     0 185,271 1,434,113     .  	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   522,139    522,139         0       0   116,135     0       0   116,135     .  	  __y = __x, __x = _S_left(__x);
         .          .         .       .         .     .       .         .     .  	else
   913,037    913,037         0       0   211,738     0       0   211,738     .  	  __x = _S_right(__x);
         .          .         .       .         .     .       .         .     .        return const_iterator(__y);
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  		      _Compare, _Alloc>::iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_upper_bound(_Link_type __x, _Base_ptr __y,
         .          .         .       .         .     .       .         .     .  		   const _Key& __k)
         .          .         .       .         .     .       .         .     .      {
 6,153,874          .         .       .         .     .       .         .     .        while (__x != 0)
 5,769,736  2,884,868         0       0 2,148,421     0       0 1,395,155     .  	if (_M_impl._M_key_compare(__k, _S_key(__x)))
    69,396     69,396         0       0     7,959     0       0     5,563     .  	  __y = __x, __x = _S_left(__x);
         .          .         .       .         .     .       .         .     .  	else
 5,630,944  2,815,472         0       0   292,411     0       0   188,633     .  	  __x = _S_right(__x);
         .          .         .       .         .     .       .         .     .        return iterator(__y);
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  		      _Compare, _Alloc>::const_iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 1972 ----------------------------------------
-- line 1985 ----------------------------------------
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::iterator,
         .          .         .       .         .     .       .         .     .  	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::iterator>
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      equal_range(const _Key& __k)
         .          .         .       .         .     .       .         .     .      {
    50,961     50,961         0       0    29,167     0       0    12,177     .        _Link_type __x = _M_begin();
         .          .         .       .         .     .       .         .     .        _Base_ptr __y = _M_end();
   211,987          0         0  20,548         0     0  20,548         .     .        while (__x != 0)
         .          .         .       .         .     .       .         .     .  	{
   300,904    154,073         0  16,990    36,080     0  16,990    25,727     .  	  if (_M_impl._M_key_compare(_S_key(__x), __k))
    12,539     12,539         0       0       895     0       0       121     .  	    __x = _S_right(__x);
    65,209          .         .       .         .     .       .         .     .  	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
         .          .         .       .         .     .       .         .     .  	    __y = __x, __x = _S_left(__x);
         .          .         .       .         .     .       .         .     .  	  else
         .          .         .       .         .     .       .         .     .  	    {
         .          .         .       .         .     .       .         .     .  	      _Link_type __xu(__x);
         .          .         .       .         .     .       .         .     .  	      _Base_ptr __yu(__y);
         .          .         .       .         .     .       .         .     .  	      __y = __x, __x = _S_left(__x);
    33,975     33,975         0  29,171         0     0  29,171         .     .  	      __xu = _S_right(__xu);
         .          .         .       .         .     .       .         .     .  	      return pair<iterator,
         .          .         .       .         .     .       .         .     .  			  iterator>(_M_lower_bound(__x, __y, __k),
         .          .         .       .         .     .       .         .     .  				    _M_upper_bound(__xu, __yu, __k));
         .          .         .       .         .     .       .         .     .  	    }
         .          .         .       .         .     .       .         .     .  	}
         .          .         .       .         .     .       .         .     .        return pair<iterator, iterator>(iterator(__y),
         .          .         .       .         .     .       .         .     .  				      iterator(__y));
         .          .         .       .         .     .       .         .     .      }
-- line 2014 ----------------------------------------
-- line 2077 ----------------------------------------
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::_Base_ptr,
         .          .         .       .         .     .       .         .     .  	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::_Base_ptr>
    96,330          0    38,532   9,169         0     0   9,146         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_get_insert_unique_pos(const key_type& __k)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        typedef pair<_Base_ptr, _Base_ptr> _Res;
    21,068     21,068         0       1         0     0       1         .     .        _Link_type __x = _M_begin();
         .          .         .       .         .     .       .         .     .        _Base_ptr __y = _M_end();
         .          .         .       .         .     .       .         .     .        bool __comp = true;
    75,862          .         .       .         .     .       .         .     .        while (__x != 0)
         .          .         .       .         .     .       .         .     .  	{
         .          .         .       .         .     .       .         .     .  	  __y = __x;
    15,414     13,626         .       .         .     .       .         .     .  	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
    47,352     11,838         0   1,707         0     0   1,707         .     .  	  __x = __comp ? _S_left(__x) : _S_right(__x);
         .          .         .       .         .     .       .         .     .  	}
         .          .         .       .         .     .       .         .     .        iterator __j = iterator(__y);
     3,576          0         0      81         0     0      81         .     .        if (__comp)
         .          .         .       .         .     .       .         .     .  	{
    39,822     19,897         0     631       618     0     631       618     .  	  if (__j == begin())
    38,532          .         .       .         .     .       .         .     .  	    return _Res(__x, __y);
         .          .         .       .         .     .       .         .     .  	  else
         .          .         .       .         .     .       .         .     .  	    --__j;
         .          .         .       .         .     .       .         .     .  	}
     3,414        536         .       .         .     .       .         .     .        if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
         .          .         .       .         .     .       .         .     .  	return _Res(__x, __y);
         .          .         .       .         .     .       .         .     .        return _Res(__j._M_node, 0);
    77,064     57,798         0  18,271         0     0  18,260         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::_Base_ptr,
         .          .         .       .         .     .       .         .     .  	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::_Base_ptr>
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_get_insert_equal_pos(const key_type& __k)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        typedef pair<_Base_ptr, _Base_ptr> _Res;
 1,193,215  1,193,215         0  17,161         6     0  17,135         4     .        _Link_type __x = _M_begin();
         .          .         .       .         .     .       .         .     .        _Base_ptr __y = _M_end();
36,299,598          .         .       .         .     .       .         .     .        while (__x != 0)
         .          .         .       .         .     .       .         .     .  	{
         .          .         .       .         .     .       .         .     .  	  __y = __x;
23,394,698          0         0  63,961         0     0  63,961         .     .  	  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
11,697,349 11,697,349         0       0   532,572     0       0   166,195     .  		_S_left(__x) : _S_right(__x);
         .          .         .       .         .     .       .         .     .  	}
         .          .         .       .         .     .       .         .     .        return _Res(__x, __y);
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .      template<typename _Arg>
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::iterator, bool>
    18,020          0    10,812   3,599         0     0   3,599         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .      _M_insert_unique(_Arg&& __v)
         .          .         .       .         .     .       .         .     .  #else
         .          .         .       .         .     .       .         .     .      _M_insert_unique(const _Val& __v)
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        typedef pair<iterator, bool> _Res;
         .          .         .       .         .     .       .         .     .        pair<_Base_ptr, _Base_ptr> __res
         .          .         .       .         .     .       .         .     .  	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        if (__res.second)
         .          .         .       .         .     .       .         .     .  	{
         .          .         .       .         .     .       .         .     .  	  _Alloc_node __an(*this);
         .          .         .       .         .     .       .         .     .  	  return _Res(_M_insert_(__res.first, __res.second,
         .          .         .       .         .     .       .         .     .  				 _GLIBCXX_FORWARD(_Arg, __v), __an),
     3,604          .         .       .         .     .       .         .     .  		      true);
         .          .         .       .         .     .       .         .     .  	}
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        return _Res(iterator(__res.first), false);
    14,416     12,614         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .      template<typename _Arg>
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2167 ----------------------------------------
-- line 2179 ----------------------------------------
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::_Base_ptr,
         .          .         .       .         .     .       .         .     .  	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  			   _Compare, _Alloc>::_Base_ptr>
   445,728          0   222,864  68,306         0     0  67,985         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_get_insert_hint_unique_pos(const_iterator __position,
         .          .         .       .         .     .       .         .     .  				  const key_type& __k)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        iterator __pos = __position._M_const_cast();
         .          .         .       .         .     .       .         .     .        typedef pair<_Base_ptr, _Base_ptr> _Res;
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .        // end()
   111,432          .         .       .         .     .       .         .     .        if (__pos._M_node == _M_end())
         .          .         .       .         .     .       .         .     .  	{
         .          .         .       .         .     .       .         .     .  	  if (size() > 0
   107,730     65,398         0  33,373         1     0  33,350         .     .  	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
    23,066          0         0   4,067         0     0   4,067         .     .  	    return _Res(0, _M_rightmost());
         .          .         .       .         .     .       .         .     .  	  else
    57,798          .         .       .         .     .       .         .     .  	    return _M_get_insert_unique_pos(__k);
        17          5         2       3         0     0       3         .     .  => /usr/include/c++/9/bits/stl_tree.h:std::_Rb_tree<unsigned long, std::pair<unsigned long const, char>, std::_Select1st<std::pair<unsigned long const, char> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, char> > >::_M_get_insert_unique_pos(unsigned long const&) (1x)
         .          .         .       .         .     .       .         .     .  	}
    99,668     49,834         .       .         .     .       .         .     .        else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
         .          .         .       .         .     .       .         .     .  	{
         .          .         .       .         .     .       .         .     .  	  // First, try before...
         .          .         .       .         .     .       .         .     .  	  iterator __before = __pos;
    74,751     24,917         0  13,601         0     0  13,601         .     .  	  if (__pos._M_node == _M_leftmost()) // begin()
    24,917          .         .       .         .     .       .         .     .  	    return _Res(_M_leftmost(), _M_leftmost());
    27,884     13,942         .       .         .     .       .         .     .  	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
         .          .         .       .         .     .       .         .     .  	    {
         .          .         .       .         .     .       .         .     .  	      if (_S_right(__before._M_node) == 0)
    69,710     13,942         0     215         0     0     215         .     .  		return _Res(0, __before._M_node);
         .          .         .       .         .     .       .         .     .  	      else
         .          .         .       .         .     .       .         .     .  		return _Res(__pos._M_node, __pos._M_node);
         .          .         .       .         .     .       .         .     .  	    }
         .          .         .       .         .     .       .         .     .  	  else
         .          .         .       .         .     .       .         .     .  	    return _M_get_insert_unique_pos(__k);
         .          .         .       .         .     .       .         .     .  	}
         .          .         .       .         .     .       .         .     .        else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
         .          .         .       .         .     .       .         .     .  	{
-- line 2220 ----------------------------------------
-- line 2230 ----------------------------------------
         .          .         .       .         .     .       .         .     .  		return _Res(__after._M_node, __after._M_node);
         .          .         .       .         .     .       .         .     .  	    }
         .          .         .       .         .     .       .         .     .  	  else
         .          .         .       .         .     .       .         .     .  	    return _M_get_insert_unique_pos(__k);
         .          .         .       .         .     .       .         .     .  	}
         .          .         .       .         .     .       .         .     .        else
         .          .         .       .         .     .       .         .     .  	// Equivalent keys.
         .          .         .       .         .     .       .         .     .  	return _Res(__pos._M_node, 0);
   351,480    259,314         0  29,823         0     0  29,799         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .      template<typename _Arg, typename _NodeGen>
         .          .         .       .         .     .       .         .     .  #else
         .          .         .       .         .     .       .         .     .      template<typename _NodeGen>
         .          .         .       .         .     .       .         .     .  #endif
-- line 2246 ----------------------------------------
-- line 2346 ----------------------------------------
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .  	return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .  #if __cplusplus >= 201103L
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
 1,301,063          0         0  34,176         0     0  34,149         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
         .          .         .       .         .     .       .         .     .      {
 2,459,124          0         0  23,551         0     0  23,527         .     .        bool __insert_left = (__x != 0 || __p == _M_end()
 3,783,650     41,330         0  17,843         0     0  17,817         .     .  			    || _M_impl._M_key_compare(_S_key(__z),
         .          .         .       .         .     .       .         .     .  						      _S_key(__p)));
         .          .         .       .         .     .       .         .     .  
 1,304,647          0 1,248,931   3,515         0     0   3,515         .     .        _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 1,478,018    411,285   322,851   2,473    39,006 20,289   1,857    31,768 19,076  => ???:0x000000000040a100 (19,190x)
         .          .         .       .         .     .       .         .     .  				    this->_M_impl._M_header);
 1,248,931          0 1,248,931   6,784         0   200   6,784         .     .        ++_M_impl._M_node_count;
         .          .         .       .         .     .       .         .     .        return iterator(__z);
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
-- line 2371 ----------------------------------------
-- line 2444 ----------------------------------------
         .          .         .       .         .     .       .         .     .  	    __throw_exception_again;
         .          .         .       .         .     .       .         .     .  	  }
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      template<typename... _Args>
         .          .         .       .         .     .       .         .     .        typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
   501,444          0   222,864  68,036         0   437  68,010         .     .        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .        _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
         .          .         .       .         .     .       .         .     .        {
         .          .         .       .         .     .       .         .     .  	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .  	__try
         .          .         .       .         .     .       .         .     .  	  {
   222,864          0    55,716       .         .     .       .         .     .  	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
   718,237    225,426    78,793  58,133    12,608     0  56,821    12,025     .  => /usr/include/c++/9/bits/stl_tree.h:std::_Rb_tree<unsigned long, std::pair<unsigned long const, char>, std::_Select1st<std::pair<unsigned long const, char> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, char> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, char> >, unsigned long const&) (16,990x)
         .          .         .       .         .     .       .         .     .  
   111,432          .         .       .         .     .       .         .     .  	    if (__res.second)
         .          .         .       .         .     .       .         .     .  	      return _M_insert_node(__res.first, __res.second, __z);
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .  	    _M_drop_node(__z);
         .          .         .       .         .     .       .         .     .  	    return iterator(__res.first);
         .          .         .       .         .     .       .         .     .  	  }
         .          .         .       .         .     .       .         .     .  	__catch(...)
         .          .         .       .         .     .       .         .     .  	  {
         .          .         .       .         .     .       .         .     .  	    _M_drop_node(__z);
         .          .         .       .         .     .       .         .     .  	    __throw_exception_again;
         .          .         .       .         .     .       .         .     .  	  }
   390,012    278,580         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      template<typename... _Args>
         .          .         .       .         .     .       .         .     .        typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
         .          .         .       .         .     .       .         .     .        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .        _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
         .          .         .       .         .     .       .         .     .        {
-- line 2480 ----------------------------------------
-- line 2496 ----------------------------------------
         .          .         .       .         .     .       .         .     .  	  }
         .          .         .       .         .     .       .         .     .        }
         .          .         .       .         .     .       .         .     .  #endif
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      void
    76,176          0    19,044  12,398         0     0  12,398         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_erase_aux(const_iterator __position)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        _Link_type __y =
         .          .         .       .         .     .       .         .     .  	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
 2,522,423          0 1,228,497   5,769         0 8,353   5,769         0 8,353  				(const_cast<_Base_ptr>(__position._M_node),
 1,167,831    375,309   126,021   3,717    58,559 11,816   3,717    58,559 11,816  => ???:0x000000000040a420 (14,715x)
 1,188,425          .         .       .         .     .       .         .     .  				 this->_M_impl._M_header));
         .          .         .       .         .     .       .         .     .        _M_drop_node(__y);
 1,279,211     25,357 1,228,497       .         .     .       .         .     .        --_M_impl._M_node_count;
    38,088     38,088         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      void
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      _M_erase_aux(const_iterator __first, const_iterator __last)
         .          .         .       .         .     .       .         .     .      {
   173,350     50,961         0  14,183         0     0  14,183         .     .        if (__first == begin() && __last == end())
         .          .         .       .         .     .       .         .     .  	clear();
         .          .         .       .         .     .       .         .     .        else
   185,922          8         0   8,375         0     0   8,375         .     .  	while (__first != __last)
        24          0         8       3         0     0       3         .     .  	  _M_erase_aux(__first++);
     1,144        324       154      38        40     5       6         3     .  => /usr/include/c++/9/bits/stl_tree.h:std::_Rb_tree<unsigned long, std::pair<unsigned long const, SubsecondTime>, std::_Select1st<std::pair<unsigned long const, SubsecondTime> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SubsecondTime> > >::_M_erase_aux(std::_Rb_tree_const_iterator<std::pair<unsigned long const, SubsecondTime> >) (8x)
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
   424,669          0   288,776  58,766         0     0  58,761         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      erase(const _Key& __x)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        pair<iterator, iterator> __p = equal_range(__x);
    50,961     50,961         0  25,597    16,990     0  25,597         .     .        const size_type __old_size = size();
         .          .         .       .         .     .       .         .     .        _M_erase_aux(__p.first, __p.second);
         4          .         .       .         .     .       .         .     .        return __old_size - size();
   424,669    339,737         0  24,003         0     0  24,003         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      void
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      erase(const _Key* __first, const _Key* __last)
         .          .         .       .         .     .       .         .     .      {
         .          .         .       .         .     .       .         .     .        while (__first != __last)
-- line 2546 ----------------------------------------
-- line 2549 ----------------------------------------
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  		      _Compare, _Alloc>::iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      find(const _Key& __k)
         .          .         .       .         .     .       .         .     .      {
    50,340     50,340         0  50,340    49,023     0  50,340         .     .        iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
         .          .         .       .         .     .       .         .     .        return (__j == end()
    31,762     15,881         .       .         .     .       .         .     .  	      || _M_impl._M_key_compare(__k,
    41,084     20,542         .       .         .     .       .         .     .  					_S_key(__j._M_node))) ? end() : __j;
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue,
         .          .         .       .         .     .       .         .     .  		      _Compare, _Alloc>::const_iterator
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      find(const _Key& __k) const
         .          .         .       .         .     .       .         .     .      {
   117,815    117,815         0  50,340   117,811     0  50,340   117,811     .        const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
         .          .         .       .         .     .       .         .     .        return (__j == end()
         .          .         .       .         .     .       .         .     .  	      || _M_impl._M_key_compare(__k,
   370,542          .         .       .         .     .       .         .     .  					_S_key(__j._M_node))) ? end() : __j;
         .          .         .       .         .     .       .         .     .      }
         .          .         .       .         .     .       .         .     .  
         .          .         .       .         .     .       .         .     .    template<typename _Key, typename _Val, typename _KeyOfValue,
         .          .         .       .         .     .       .         .     .  	   typename _Compare, typename _Alloc>
         .          .         .       .         .     .       .         .     .      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
         .          .         .       .         .     .       .         .     .      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
         .          .         .       .         .     .       .         .     .      count(const _Key& __k) const
         .          .         .       .         .     .       .         .     .      {
-- line 2581 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc
--------------------------------------------------------------------------------
Ir          Dr         Dw         I1mr    D1mr      D1mw    ILmr    DLmr    DLmw   

-- line 49 ----------------------------------------
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::~QueueModelHistoryList()
          .          .          .       .         .       .       .       .      .  {
          .          .          .       .         .       .       .       .      .     delete m_average_delay;
          .          .          .       .         .       .       .       .      .  }
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  SubsecondTime
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::computeQueueDelay(SubsecondTime pkt_time, SubsecondTime processing_time, core_id_t requester)
 20,787,030  2,309,670 11,548,350  67,476         0       0  67,475       .      .  {
  4,619,340  2,309,670          0  67,476   757,935       0  67,475 135,956      .     LOG_ASSERT_ERROR(m_free_interval_list.size() >= 1,
          .          .          .       .         .       .       .       .      .           "Free Interval list size < 1");
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     SubsecondTime queue_delay;
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     // Check if it is an old packet
          .          .          .       .         .       .       .       .      .     // If yes, use analytical model
          .          .          .       .         .       .       .       .      .     // If not, use the history list based queue model
          .          .          .       .         .       .       .       .      .     std::pair<SubsecondTime,SubsecondTime> oldest_interval = m_free_interval_list.front();
  4,619,340  2,309,670          0       0 1,483,263       0       0 292,918      .     if (m_analytical_model_enabled && ((pkt_time + processing_time) <= oldest_interval.first))
          .          .          .       .         .       .       .       .      .     {
          .          .          .       .         .       .       .       .      .        // Increment the number of requests that use the analytical model
          .          .          .       .         .       .       .       .      .        m_total_requests_using_analytical_model ++;
          .          .          .       .         .       .       .       .      .        queue_delay = computeUsingAnalyticalModel(pkt_time, processing_time);
          .          .          .       .         .       .       .       .      .     }
          .          .          .       .         .       .       .       .      .     else
          .          .          .       .         .       .       .       .      .     {
 16,167,690  2,309,670  2,309,670  67,476         0       0  67,475       .      .        queue_delay = computeUsingHistoryList(pkt_time, processing_time);
4,313,549,527 1,703,021,921 444,359,670 1,388,716 218,860,288 646,704 1,388,680 36,649,168 428,385  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::computeUsingHistoryList(SubsecondTime, SubsecondTime) (2,309,670x)
  6,929,010          0  2,309,670       .         .       .       .       .      .        updateAverageDelay(queue_delay);
673,895,640 226,173,660 159,241,230 1,078,991 4,790,779 352,310 1,078,977 1,098,243 129,009  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::updateAverageDelay(SubsecondTime) (2,309,670x)
          .          .          .       .         .       .       .       .      .     }
          .          .          .       .         .       .       .       .      .  
  6,929,010          0  2,309,670       .         .       .       .       .      .     updateQueueUtilization(processing_time);
  9,238,680  4,619,340  2,309,670       .         .       .       .       .      .  => /home/k.huang/DisaggregatedSystemsUofT/common/performance_model/queue_model_history_list.cc:QueueModelHistoryList::updateQueueUtilization(SubsecondTime) (2,309,670x)
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     // Increment total queue requests
  2,309,670          0  2,309,670       0         0 161,880       0       0 27,392     m_total_requests ++;
          .          .          .       .         .       .       .       .      .     m_total_queue_delay += queue_delay;
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     return queue_delay;
 23,096,700 16,167,690          0       0     4,827       .       .       .      .  }
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  float
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::getQueueUtilization()
          .          .          .       .         .       .       .       .      .  {
          .          .          .       .         .       .       .       .      .     std::pair<SubsecondTime,SubsecondTime> newest_interval = m_free_interval_list.back();
          .          .          .       .         .       .       .       .      .     SubsecondTime total_time = newest_interval.first;
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     if (total_time == SubsecondTime::Zero())
-- line 94 ----------------------------------------
-- line 109 ----------------------------------------
          .          .          .       .         .       .       .       .      .    if (m_total_requests == 0)
          .          .          .       .         .       .       .       .      .       return 0;
          .          .          .       .         .       .       .       .      .    else
          .          .          .       .         .       .       .       .      .       return ((float) m_total_requests_using_analytical_model / m_total_requests);
          .          .          .       .         .       .       .       .      .  }
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  void
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::updateQueueUtilization(SubsecondTime processing_time)
  2,309,670          .          .       .         .       .       .       .      .  {
          .          .          .       .         .       .       .       .      .     // Update queue utilization parameter
          .          .          .       .         .       .       .       .      .     m_utilized_time += processing_time;
  2,309,670  2,309,670          .       .         .       .       .       .      .  }
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  void
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::updateAverageDelay(SubsecondTime queue_delay)
 11,548,350  2,309,670  2,309,670  67,475         0       0  67,475       .      .  {
  9,238,680  6,929,010  2,309,670       0 1,548,756       0       0 313,294      .     m_average_delay->update(queue_delay);
636,940,920 207,696,300 152,312,220 944,040 3,242,023 352,310 944,027 784,949 129,009  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/moving_average.h:MovingArithmeticMean<SubsecondTime>::update(SubsecondTime) (2,309,670x)
 11,548,350  6,929,010          0  67,476         0       0  67,475       .      .  }
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  SubsecondTime
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::computeUsingAnalyticalModel(SubsecondTime pkt_time, SubsecondTime processing_time)
          .          .          .       .         .       .       .       .      .  {
          .          .          .       .         .       .       .       .      .     // WH: Old code used general queuing model to estimate delay based on historical utilization rate:
          .          .          .       .         .       .       .       .      .     //         queue_delay = (rho * processing_time) / (2 * (1 - rho))) + 1
          .          .          .       .         .       .       .       .      .     //     For rho near or over 1, which does happen due to other approximations (skew between cores), this yields nonsense.
          .          .          .       .         .       .       .       .      .     //     Yet, everyone knows that in a system with feedback, the arrival rate is no longer an independent, exponential process
          .          .          .       .         .       .       .       .      .     //     (i.e., more delay causes upstream buffer blockages which throttle the actual request rate, avoiding rho from ever reaching 1)
          .          .          .       .         .       .       .       .      .     // Current best guess: return average of delays computed using history list model
          .          .          .       .         .       .       .       .      .     return m_average_delay->compute();
          .          .          .       .         .       .       .       .      .  }
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .  SubsecondTime
          .          .          .       .         .       .       .       .      .  QueueModelHistoryList::computeUsingHistoryList(SubsecondTime pkt_time, SubsecondTime processing_time)
 30,025,710  2,309,670 16,167,690 134,952         0  50,340 134,950       0 50,340  {
  6,929,010  4,619,340          .       .         .       .       .       .      .     LOG_ASSERT_ERROR(m_free_interval_list.size() <= m_max_free_interval_list_size,
          .          .          .       .         .       .       .       .      .           "Free Interval list size(%u) > %u", m_free_interval_list.size(), m_max_free_interval_list_size);
          .          .          .       .         .       .       .       .      .     SubsecondTime queue_delay = SubsecondTime::MaxTime();
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     FreeIntervalList::iterator curr_it;
463,463,362  2,309,670  2,309,670  67,476         0  67,576  67,475       0 67,475     for (curr_it = m_free_interval_list.begin(); curr_it != m_free_interval_list.end(); curr_it ++)
          .          .          .       .         .       .       .       .      .     {
          .          .          .       .         .       .       .       .      .        std::pair<SubsecondTime,SubsecondTime> interval = (*curr_it);
          .          .          .       .         .       .       .       .      .  
913,066,490          0      2,214       .         .       .       .       .      .        if ((pkt_time >= interval.first) && ((pkt_time + processing_time) <= interval.second))
          .          .          .       .         .       .       .       .      .        {
          .          .          .       .         .       .       .       .      .           queue_delay = SubsecondTime::Zero();
          .          .          .       .         .       .       .       .      .           // Adjust the data structure accordingly
          .          .          .       .         .       .       .       .      .           curr_it = m_free_interval_list.erase(curr_it);
  6,922,368  2,307,456          .       .         .       .       .       .      .           if ((pkt_time - interval.first) >= m_min_processing_time)
          .          .          .       .         .       .       .       .      .           {
          .          .          .       .         .       .       .       .      .              m_free_interval_list.insert(curr_it, std::pair<SubsecondTime,SubsecondTime>(interval.first, pkt_time));
          .          .          .       .         .       .       .       .      .           }
  4,614,912          .          .       .         .       .       .       .      .           if ((interval.second - (pkt_time + processing_time)) >= m_min_processing_time)
          .          .          .       .         .       .       .       .      .           {
          .          .          .       .         .       .       .       .      .              m_free_interval_list.insert(curr_it, std::pair<SubsecondTime,SubsecondTime>(pkt_time + processing_time, interval.second));
          .          .          .       .         .       .       .       .      .           }
          .          .          .       .         .       .       .       .      .           break;
          .          .          .       .         .       .       .       .      .        }
          .          .          .       .         .       .       .       .      .        // WH: The request comes before this free part, but doesn't fit. It doesn't make sense to me to
          .          .          .       .         .       .       .       .      .        //     demand a fit and move this request down even further. In reality, this request would have most
          .          .          .       .         .       .       .       .      .        //     likely executed at interval.first, while later request would/could be delayed. But it's too late
-- line 169 ----------------------------------------
-- line 171 ----------------------------------------
          .          .          .       .         .       .       .       .      .        //     (If we assume all wait times are additive then the average works out by shifting it down,
          .          .          .       .         .       .       .       .      .        //      but since this is an interactive simulation all delays propagate through the system
          .          .          .       .         .       .       .       .      .        //      so this won't be accurate.)
          .          .          .       .         .       .       .       .      .        else if ((pkt_time < interval.first) /*&& ((interval.first + processing_time) <= interval.second)*/)
          .          .          .       .         .       .       .       .      .        {
          .          .          .       .         .       .       .       .      .           queue_delay = interval.first - pkt_time;
          .          .          .       .         .       .       .       .      .           // Adjust the data structure accordingly
          .          .          .       .         .       .       .       .      .           curr_it = m_free_interval_list.erase(curr_it);
  2,314,098  2,311,884          0  67,090         4       0  67,089       .      .           if ((interval.second - (interval.first + processing_time)) >= m_min_processing_time)
          .          .          .       .         .       .       .       .      .           {
          .          .          .       .         .       .       .       .      .              m_free_interval_list.insert(curr_it, std::pair<SubsecondTime,SubsecondTime>(interval.first + processing_time, interval.second));
          .          .          .       .         .       .       .       .      .           }
          .          .          .       .         .       .       .       .      .           break;
          .          .          .       .         .       .       .       .      .        }
          .          .          .       .         .       .       .       .      .     }
          .          .          .       .         .       .       .       .      .  
  4,619,340          .          .       .         .       .       .       .      .     LOG_ASSERT_ERROR(queue_delay != SubsecondTime::MaxTime(), "queue delay(%s), free interval not found", itostr(queue_delay).c_str());
          .          .          .       .         .       .       .       .      .  
  6,929,010  2,309,670          .       .         .       .       .       .      .     if (m_free_interval_list.size() > m_max_free_interval_list_size)
          .          .          .       .         .       .       .       .      .     {
  2,278,333  2,278,333          .       .         .       .       .       .      .        m_free_interval_list.erase(m_free_interval_list.begin());
          .          .          .       .         .       .       .       .      .     }
          .          .          .       .         .       .       .       .      .  
  6,929,010  2,309,670  2,309,670       0    71,287       0       0  67,475      .     LOG_PRINT("HistoryList: pkt_time(%s), processing_time(%s), queue_delay(%s)", itostr(pkt_time).c_str(), itostr(processing_time).c_str(), itostr(queue_delay).c_str());
 13,858,020  4,619,340          0  67,475    80,435       0  67,475  67,475      .  => /home/k.huang/DisaggregatedSystemsUofT/common/misc/log.cc:Log::getSingleton() (2,309,670x)
          .          .          .       .         .       .       .       .      .  
          .          .          .       .         .       .       .       .      .     return queue_delay;
 27,716,040 20,787,030          0       0     3,040       .       .       .      .  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir         Dr        Dw        I1mr    D1mr D1mw  ILmr    DLmr DLmw 

-- line 81 ----------------------------------------
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .        _GLIBCXX20_CONSTEXPR
         .         .         .       .    .     .       .    .    .        new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .        template<typename _Tp1>
         .         .         .       .    .     .       .    .    .  	_GLIBCXX20_CONSTEXPR
         .         .         .       .    .     .       .    .    .  	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         .         .         .       .    .     .       .    .    .  
    38,376    19,188         0  18,264    0     0  17,134    .    .        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .        pointer
         .         .         .       .    .     .       .    .    .        address(reference __x) const _GLIBCXX_NOEXCEPT
         .         .         .       .    .     .       .    .    .        { return std::__addressof(__x); }
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .        const_pointer
         .         .         .       .    .     .       .    .    .        address(const_reference __x) const _GLIBCXX_NOEXCEPT
         .         .         .       .    .     .       .    .    .        { return std::__addressof(__x); }
-- line 97 ----------------------------------------
-- line 106 ----------------------------------------
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .  #if __cpp_aligned_new
         .         .         .       .    .     .       .    .    .  	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .         .         .       .    .     .       .    .    .  	  {
         .         .         .       .    .     .       .    .    .  	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
         .         .         .       .    .     .       .    .    .  	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         .         .         .       .    .     .       .    .    .  	  }
         .         .         .       .    .     .       .    .    .  #endif
17,810,986        30 5,937,003 159,936    0 6,603 159,909    .    .  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     1,179       298       168      63   62     4      63   62    4  => ???:0x000000000040a790 (15x)
         .         .         .       .    .     .       .    .    .        }
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .        // __p is not permitted to be a null pointer.
         .         .         .       .    .     .       .    .    .        void
         .         .         .       .    .     .       .    .    .        deallocate(pointer __p, size_type)
         .         .         .       .    .     .       .    .    .        {
         .         .         .       .    .     .       .    .    .  #if __cpp_aligned_new
         .         .         .       .    .     .       .    .    .  	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .         .         .       .    .     .       .    .    .  	  {
         .         .         .       .    .     .       .    .    .  	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
         .         .         .       .    .     .       .    .    .  	    return;
         .         .         .       .    .     .       .    .    .  	  }
         .         .         .       .    .     .       .    .    .  #endif
12,872,990 2,309,670 5,916,733   5,195    0     0   5,195    .    .  	::operator delete(__p);
     1,254       348       126      57   28     0      57   28    .  => ???:0x000000000040a720 (12x)
         .         .         .       .    .     .       .    .    .        }
         .         .         .       .    .     .       .    .    .  
         .         .         .       .    .     .       .    .    .        size_type
         .         .         .       .    .     .       .    .    .        max_size() const _GLIBCXX_USE_NOEXCEPT
         .         .         .       .    .     .       .    .    .        {
         .         .         .       .    .     .       .    .    .  #if __PTRDIFF_MAX__ < __SIZE_MAX__
         .         .         .       .    .     .       .    .    .  	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
         .         .         .       .    .     .       .    .    .  #else
-- line 136 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/misc/utils.cc
--------------------------------------------------------------------------------
Ir         Dr        Dw I1mr   D1mr D1mw ILmr   DLmr DLmw 

-- line 15 ----------------------------------------
         .         .  .      .    .    .      .    .    .  }
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  bool isPower2(UInt32 n)
         .         .  .      .    .    .      .    .    .  { return ((n & (n - 1)) == 0); }
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  SInt32 floorLog2(UInt32 n)
 3,855,050         0  0 67,479    0    0 67,475    .    .  {
 3,855,050         .  .      .    .    .      .    .    .     SInt32 p = 0;
         .         .  .      .    .    .      .    .    .  
 7,710,100         .  .      .    .    .      .    .    .     if (n == 0) return -1;
         .         .  .      .    .    .      .    .    .  
 7,710,100         .  .      .    .    .      .    .    .     if (n & 0xffff0000) { p += 16; n >>= 16; }
 8,221,290         .  .      .    .    .      .    .    .     if (n & 0x0000ff00) { p +=  8; n >>=  8; }
10,800,860         .  .      .    .    .      .    .    .     if (n & 0x000000f0) { p +=  4; n >>=  4; }
10,289,670         .  .      .    .    .      .    .    .     if (n & 0x0000000c) { p +=  2; n >>=  2; }
15,420,200 3,855,050  0 67,480    0    0 67,475    .    .     if (n & 0x00000002) { p +=  1; }
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .     return p;
         .         .  .      .    .    .      .    .    .  }
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  
         .         .  .      .    .    .      .    .    .  SInt32 ceilLog2(UInt32 n)
         .         .  .      .    .    .      .    .    .  { return floorLog2(n - 1) + 1; }
         .         .  .      .    .    .      .    .    .  
-- line 40 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/misc/log.cc
--------------------------------------------------------------------------------
Ir        Dr        Dw I1mr   D1mr   D1mw ILmr   DLmr   DLmw 

-- line 62 ----------------------------------------
        .         .  .      .      .    .      .      .    .  
        .         .  .      .      .    .      .      .    .     if (_systemFile)
        .         .  .      .      .    .      .      .    .        fclose(_systemFile);
        .         .  .      .      .    .      .      .    .  
        .         .  .      .      .    .      .      .    .     CircularLog::fini();
        .         .  .      .      .    .      .      .    .  }
        .         .  .      .      .    .      .      .    .  
        .         .  .      .      .    .      .      .    .  Log* Log::getSingleton()
2,328,858         0  0 68,477      0    0 67,475      .    .  {
9,315,432 2,328,858  0      0 84,582    0      0 67,475    .     assert(_singleton);
        .         .  .      .      .    .      .      .    .     return _singleton;
2,328,858 2,328,858  .      .      .    .      .      .    .  }
        .         .  .      .      .    .      .      .    .  
        .         .  .      .      .    .      .      .    .  bool Log::isEnabled(const char* module)
        .         .  .      .      .    .      .      .    .  {
        .         .  .      .      .    .      .      .    .     // either the module is specifically enabled, or all logging is
        .         .  .      .      .    .      .      .    .     // enabled and this one isn't disabled
        .         .  .      .      .    .      .      .    .     return _anyLoggingEnabled &&
        .         .  .      .      .    .      .      .    .        (_enabledModules.find(module) != _enabledModules.end()
        .         .  .      .      .    .      .      .    .         || (_loggingEnabled && _disabledModules.find(module) == _disabledModules.end())
-- line 81 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/address_home_lookup.cc
--------------------------------------------------------------------------------
Ir        Dr        Dw        I1mr   D1mr    D1mw   ILmr   DLmr   DLmw   

-- line 31 ----------------------------------------
        .         .         .      .       .      .      .      .      .     SInt32 module_num = (address >> m_ahl_param) % m_total_modules;
        .         .         .      .       .      .      .      .      .     LOG_ASSERT_ERROR(0 <= module_num && module_num < (SInt32) m_total_modules, "module_num(%i), total_modules(%u)", module_num, m_total_modules);
        .         .         .      .       .      .      .      .      .  
        .         .         .      .       .      .      .      .      .     LOG_PRINT("address(0x%x), module_num(%i)", address, module_num);
        .         .         .      .       .      .      .      .      .     return (m_core_list[module_num]);
        .         .         .      .       .      .      .      .      .  }
        .         .         .      .       .      .      .      .      .  
        .         .         .      .       .      .      .      .      .  IntPtr AddressHomeLookup::getLinearBlock(IntPtr address) const
1,154,835         .         .      .       .      .      .      .      .  {
6,929,010 2,309,670         0      0 197,637      0      0 67,475      .     return (address >> m_ahl_param) / m_total_modules;
1,154,835 1,154,835         .      .       .      .      .      .      .  }
        .         .         .      .       .      .      .      .      .  
        .         .         .      .       .      .      .      .      .  IntPtr AddressHomeLookup::getLinearAddress(IntPtr address) const
6,929,010         0 2,309,670 67,476       0 50,340 67,475      0 50,340  {
5,774,175 2,309,670 1,154,835 67,476       0      0 67,475      .      .     return (getLinearBlock(address) << m_ahl_param) | (address & m_ahl_mask);
9,238,680 3,464,505         0      0 197,637      0      0 67,475      .  => /home/k.huang/DisaggregatedSystemsUofT/common/core/memory_subsystem/address_home_lookup.cc:AddressHomeLookup::getLinearBlock(unsigned long) const (1,154,835x)
4,619,340 3,464,505         .      .       .      .      .      .      .  }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c
  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/strlen-avx2.S

--------------------------------------------------------------------------------
Ir             Dr            Dw            I1mr       D1mr        D1mw      ILmr       DLmr       DLmw      
--------------------------------------------------------------------------------
15,659,533,817 3,274,081,904 1,451,331,197 11,823,674 299,301,278 3,566,931 11,792,315 90,393,654 1,885,703  events annotated

