# 1 core SKX
# #include skx
#include nehalem
#include ../disaggr_config/ddr4-2400-disagg

# l3_cache settings from gainestown.cfg file (need values for simulator to run)
#include ../disaggr_config/l3cache

[general]
total_cores = 1
# The 4 inst_ configs are the default settings
inst_mode_end = "fast_forward" # After the anotation SimRoiEnd(), the simulation goes into the fasat forward mode, where neither cycles,instructions are measured nor the cache events (miss,hits, etc)
inst_mode_init = "fast_forward" # This initializes the simulation mode without counting the cycles, instructions but only fetching data in caches (until the annotation SimRoiStart()
inst_mode_output = "true"
inst_mode_roi = "detailed" # Between the SimRoiStart() and SimRoiEnd() annotations, the simulator runs in a detailed mode, i.e., it simulates all the instryctions, cycles and cache events (i.e., simulate everything)
magic = "false" # basically same effect as passing --roi option to run-sniper

[dvfs/simple]
cores_per_socket = 1

[network]
frequency = 4.0

[network/emesh_hop_by_hop]
size=1:1

[perf_model/core]
frequency = 3.6

[perf_model/dram]
# per_controller_bandwidth = 24.0    # In GB/s   # not used in dram_perf_model_disagg
num_controllers =  1              # Total Bandwidth = per_controller_bandwidth * num_controllers?
controller_positions = "0"
type = "disaggregated"
enable_remote_mem = true
page_size = 4096                  # In Bytes; default should be 4096. This is different than the HW ddr "dram_page_size" config
localdram_size = 16777216         # in Bytes  # 33554432 = 32 MB;  16777216 = 16 MB;  8388608 = 8 MB;  4194304 = 4 MB (1024 4K pages);
remote_mem_bw_scalefactor = 4
remote_mem_add_lat = 120          # in nanoseconds (ns)
remote_datamov_threshold = 0
simulate_tlb_overhead = true      # Currently this config is not implemented in dram_perf_model_disagg
simulate_datamov_overhead = true
remote_memory_mode = 1
remote_partitioning_ratio = 50
simulate_sw_pagereclaim_overhead = false
remote_exclusive_cache = false    # We have a lot of remote memory so can have inclusive cache
remote_init = false
enable_remote_prefetcher = false
remote_disturbance_factor = 0
remote_dontevictdirty = false
remote_enable_selective_moves = false
remote_partitioned_queues = 0          # Currently, 0 is off, 1 is one
remote_cacheline_queue_fraction = 0.5  # The fraction of remote bandwidth used for the cacheline queue (decimal between 0 and 1)
remote_use_cacheline_granularity = false
remote_reserved_buffer_space = 100
remote_limit_redundant_moves = 1000
remote_throttle_redundant_moves = false

[perf_model/dram/queue_model]
type = windowed_mg1
use_separate_remote_queue_model = true
remote_queue_model_type = windowed_mg1_remote

[perf_model/dram/compression_model]
use_compression = false
compression_scheme = bdi
compression_latency = -1 # -1 to set to default
decompression_latency = -1 # -1 to set to default

[queue_model/windowed_mg1]
# window_size = 10000000
window_size = 10000

[clock_skew_minimization/barrier]
quantum = 1000

[osemu]
numa_domains = 1

[log]
# enabled_modules = "dram_perf_model_disagg.cc"
# enabled_modules = "dram_perf_model_disagg.cc queue_model_windowed_mg1.cc"
